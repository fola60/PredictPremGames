
var __sr_srdevel = 'deploy';
/* **********************************************************************
   sr.mod.share.js
   ********************************************************************** */

// SR Translation strings
var __sr_text_turn_inline_styles = 'Turn Inline Styles';
var __sr_text_turned_On = 'On';
var __sr_text_turned_Off = 'Off';
var __sr_text_click_what_are_these = 'Click "What are these &amp what should I use?" for explanation.';

var __sr_text_ctrl_a = 'Ctrl-A, Ctrl-C to copy to clipboard. ';

var __sr_text_save_and_share_the_table = 'Save and share the table you created.';
var __sr_text_title_of_your_report = 'Title of your generated report';
var __sr_text_note_on_your_report = 'Notes on your report (shown with report)';
var __sr_text_please_keep_it_clean = 'Please keep it clean. Sorry, but no &gt; or &lt; symbols or html tags are allowed at the moment.';
var __sr_text_save_comments_and_report = 'Save Comments and Report!';
var __sr_text_a_link_will_be_created = 'A link will be created for your report.';
var __sr_text_we_are_sorry_failed = 'We are sorry, but this request failed.';
var __sr_text_click_to_delete_a_column = 'Click <button class="sharing delete"></button> to delete a column or row, and ';
var __sr_text_click_to_delete_trailing = 'click <button class="sharing right"></button> or <button class="sharing down"></button> to delete trailing columns or rows. Sorting after deleting may not work as expected.';
var __sr_text_share_or_get_code = 'Share or get code for table as:';

var __sr_text_share_please_cite = 'Please include a link or a mention when using Sports Reference data.';
var __sr_text_share_cite_plaintext ='When using SR data, please cite us and provide a link and/or a mention.';

var __sr_text_url_for_sharing = 'url for sharing';
var __sr_text_pre_formatted_text = 'pre-formatted text';
var __sr_text_comma_separated = 'comma-separated';
var __sr_text_what_are_these = 'What are these &amp what should I use?';
var __sr_text_mess_up_click_to_reload = 'Make a mistake?  Click to reload the page and start over';
var __sr_text_provided_by = 'Provided by';
var __sr_text_view_pi_tool = 'Found with Stathead. See Full Results.';
var __sr_text_view_stathead_tool = 'Found with Stathead. See Full Results.';
var __sr_text_view_original_table = 'View Original Table';
var __sr_text_data_not_shareable_format = 'The data is not shareable in this format.  Try copy and paste.';

var __sr_text_show_credit_links_in = 'Show credit links in';
var __sr_text_show_credit_links_as = 'Show credit links as';

var __sr_text_show_only_selected_rows = 'Show Only Selected Rows';

var __sr_text_embed_note_table = ' <div>To embed this table on your webpage, copy the text in the box below and paste on your website where you want it to appear.</div>';    
var __sr_text_embed_remove_col_note = ' <div>To <strong>remove columns</strong> add the following text to the end of the src="..." value below <em>&del_col=1,5,10</em> where 1, 5 and 10 are the columns you want to remove counting from left to right.</div>';
var __sr_text_embed_max_rows_note = ' <div>You can also <strong>set a maximum number of rows</strong> to display (including the header) by adding the following text to the end of the src="..." value below <em>&max_rows=21</em>, and the display will now have 21 rows total.</div>';
var __sr_text_embed_more_info_note = ' <div>For more information see <a target="_blank" href="//widgets.sports-reference.com/">Widgets at Sports-Reference.com</a>.</div>';


/* **********************************************************************
   sr.mod.statsTable.js
   ********************************************************************** */
// SR translation strings
var __sr_text_minimize_all = 'Minimize all';
var __sr_text_expand_all   = 'Expand all';
var __sr_text_scroll_right_widescreen = 'Scroll Right For More Stats &#183; <span class="click">Switch to Widescreen View</span>';
var __sr_text_also_view_explanations = 'Also view explanations by holding mouse over column headers';
var __sr_text_hide_non_quals = 'Hide Non-Qualifiers for Rate Stats';
var __sr_text_glossary = 'Glossary';
var __sr_text_show_glossary = 'Show a glossary for each term in the table below<br>or hold your mouse over the header';
var __sr_text_per90 = 'Toggle Per90 Stats';
var __sr_text_per90_tip = 'Convert the season stats in the table below to a per-90 value.<br>Changed values will be shaded.<br>Note that underlined stats do not have values for all games and per-90 stats<br>via this tool do not account for this issue and use full-season per-90 values.';
var __sr_text_hide_partial_rows = 'Hide Partial Rows';
var __sr_text_hide = 'Hide';
var __sr_text_show = 'Show';
var __sr_text_modify_and_share     = 'Modify, Export &amp; Share Table';
var __sr_text_modify_and_share_tip = 'Use a customizable report creator that can<br>output HTML, CSV, or a shareable link.';
var __sr_text_embed_this_table     = 'Embed this Table';
var __sr_text_embed_this_table_tip = 'Get a bit of widget code to embed this table on your site';
var __sr_text_get_as_excel = 'Get as Excel Workbook';
var __sr_text_get_as_excel_tip = 'Convert the table below to comma-separated values<br>suitable for use with Excel';
var __sr_text_get_as_csv     = 'Get table as CSV (for Excel)';
var __sr_text_get_as_csv_tip = 'Export table as <br>suitable for use with Excel';
var __sr_text_strip_mobile = 'Strip Mobile Formatting';
var __sr_text_copy_link_clipboard = 'Get Link to Table';
var __sr_text_copy_link_tip = 'Get a link directly to this table on this page';
var __sr_text_about_sharing_tools = 'About Sharing Tools';
var __sr_text_video_sr_sharing = 'Video: SR Sharing Tools &amp; How-to';
var __sr_text_video_sr_stats_table = 'Video: Stats Table Tips &amp; Tricks';
var __sr_text_data_usage_terms = 'Data Usage Terms';
var __sr_text_share_and_more = 'Share &amp; Export';
var __sr_text_share_and_more_stathead = 'Export Data';
var __sr_text_converting_from_pre = 'Converting from PRE-Formatted to CSV does not work, please <span class=tooltip onClick="window.location.reload()">Reload</span> and then click CSV';
var __sr_text_we_can_not_convert_from_pre = 'We can not convert from pre-formatted back to CSV';
var __sr_text_reload_page_to_return = '<p><span class=tooltip onClick="window.location.reload()">Reload</span> page to return to the table-formatted data.</p>';
var __sr_text_excel_constraints = 'Due to constraints set by browsers and out of our control, downloads of only 500 rows are possible.  You should use "Get Table as CSV" and then copy and paste into excel (splitting the rows using the "Data" -&gt; "Text to Columns" command if needed) to retrieve the full table.  The download provided will only contain the first 500 rows.';


/* **********************************************************************
   libs-mod/jsModal.js
   ********************************************************************** */
var __sr_text_we_apologize_server_error = 'We apologize, but we had a server error, it may help to try again';



/* **********************************************************************
   sr.all.commentControl.js
   ********************************************************************** */
var __sr_tableHeaderText = 'This Section';
var __sr_text_show  = 'Show';
var __sr_text_show_hidden_rows = 'Show hidden rows';
var __sr_text_to_numbers = 'to'; // as in 'show rows 5 to 10'



/* **********************************************************************
   sr.mod.display.js
   ********************************************************************** */
// SR translation strings
var __sr_text_search_placeholder_short  = 'Enter Person, Tm, etc';
var __sr_text_search_placeholder_medium = 'Enter Person, Team, etc';
var __sr_text_search_placeholder_long   = 'Enter Person, Team, Section, etc';




/* **********************************************************************
   sr.all.utilities.js
   ********************************************************************** */
// STRINGS TO TRANSLATE
var __sr_text_thousands_separator = ',';
var __sr_text_happy_birthday = 'Happy Birthday!';
var __sr_text_Age = 'Age';

var __sr_text_local_time = 'local time';



/* **********************************************************************
   sr.mod.autocomplete.js
   ********************************************************************** */
// VARS TO TRANSLATE
var __sr_text_quote_open = '"';
var __sr_text_quote_closed = '"';



var __sr_text_all_matches_for = 'All matches for'; 

var __sr_text_press_enter_to_search_for = 'or press enter'; 


var __sr_text_autocomplete_error = 'Sorry, but this player did not work. We may be having a system-wide error.';

var __sr_text_mens_comp = 'Men';

var __sr_text_womens_comp = 'Women';

    


/* **********************************************************************
   sr.mod.form.js
   ********************************************************************** */
/* strings to TRANSLATE */
var __sr_text_please_select_an_option_for_each = 'Please select an option for each';



/* **********************************************************************
   sr.mod.menus.js
   ********************************************************************** */
var __sr_text_additional_pages = 'Additional Pages';



/* **********************************************************************
   libs-mod/chosen.native.js
   ********************************************************************** */
var __sr_text_select_some_options = 'Select Some Options';
var __sr_text_select_an_option    = 'Select An Option';
var __sr_text_no_results_match    = 'No Results Match';




/* **********************************************************************
   libs-mod/tipsy.js
   ********************************************************************** */
var __sr_text_sorry_no_info = 'Sorry, but no information<br>is given for this term.';

/* ### FILE:sites/fb.en.js.js                     */var sr_SHARING_PAGE  = '//www.sports-reference.com/sharing.html';
var sr_SITE_ABB       = 'fb';
var sr_SITE_NAME      = 'FBref.com';
var sr_SITE_PREFIX    = '';
var sr_rowsum_span_url= sr_SITE_PREFIX.concat("/tools/span_stats.cgi");
var sr_SITE_URL       = 'fbref.com';
var sr_jscss_version  = Modernizr.is_dev ? 'dev_build:2024-08-30-Fri-10:48:57' : '202408301';
var sr_svg_sprite_url = 'https://cdn.ssref.net/req/202408301/icons/sr_icons-min.svg?fb';
var sr_dropmenu_url   = 'https://fbref.com/short/inc/main_nav_menu_en.json';
var sr_SITE_CDN       = 'https://fbref.com/short';

// This is production:1:

var completely_config = [

    {
      name:    'fb__players',
      url:     'https://fbref.com/short/inc/players_search_list.csv',
      limit:    10,
      header:  '<div class="ac-results-header"><a href="/en/players/">See all Players</a></div>',
      suppress: 0,
      defaultResults: 0,
      template: '<div> <span class="search-results-years"> {{c}}{{#f}}&nbsp;<span class="f-i f-{{f}}"></span>{{/f}} </span> <span class="search-results-item" >{{#a}}<strong>{{/a}}{{n}}{{#a}}</strong>{{/a}}</span>{{#y}}<div class="subhead">{{{y}}}{{#b}}, <em>{{b}}</em>{{/b}}{{#g}}, <em>{{g}}</em>{{/g}}</div>{{/y}}</div>'
  },
    {
      name:    'fb__clubs',
      url:     'https://fbref.com/short/inc/clubs_search_list.csv',
      limit:    10,
      header:  '<div class="ac-results-header"><a href="/en/squads/">See all Clubs</a></div>',
      suppress: 0,
      defaultResults: 0,
      template: '<div> <span class="search-results-years"> {{c}}{{#f}}&nbsp;<span class="f-i f-{{f}}"></span>{{/f}} </span> <span class="search-results-item" >{{#a}}<strong>{{/a}}{{n}}{{#a}}</strong>{{/a}}</span>{{#y}}<div class="subhead">{{{y}}}{{#b}}, <em>{{b}}</em>{{/b}}{{#g}}, <em>{{g}}</em>{{/g}}</div>{{/y}}</div>'
  },
    {
      name:    'fb__comps',
      url:     'https://fbref.com/short/inc/comps_search_list_en.csv',
      limit:    10,
      header:  '<div class="ac-results-header"><a href="/en/comps/">See all Competitions</a></div>',
      suppress: 0,
      defaultResults: 0,
      template: '<div> <span class="search-results-years"> {{c}}{{#f}}&nbsp;<span class="f-i f-{{f}}"></span>{{/f}} </span> <span class="search-results-item" >{{#a}}<strong>{{/a}}{{n}}{{#a}}</strong>{{/a}}</span>{{#y}}<div class="subhead">{{{y}}}{{#b}}, <em>{{b}}</em>{{/b}}{{#g}}, <em>{{g}}</em>{{/g}}</div>{{/y}}</div>'
  },
    {
      name:    'fb__sh_squads',
      url:     'https://fbref.com/short/inc/sh_squads_search_list.csv',
      limit:    10,
      header:  '<div class="ac-results-header"><a href="/en/squads/">See all Squads</a></div>',
      suppress: 1,
      defaultResults: 0,
      template: '<div> {{#f}}<span class="f-i f-{{f}}"></span>{{/f}} <span class="search-results-item" > {{#a}}<strong>{{/a}} {{n}} {{#a}}</strong>{{/a}} </span> </div>'
  },
    {
      name:    'fb__direct',
      url:     'https://fbref.com/short/inc/direct_search_list.csv',
      limit:    10,
      header:  '<div class="ac-results-header"><a href="#site_menu_link">Site Map</a></div>',
      suppress: 0,
      defaultResults: 0,
      template: '<div> <span class="search-results-years"> {{c}}{{#f}}&nbsp;<span class="f-i f-{{f}}"></span>{{/f}} </span> <span class="search-results-item" >{{#a}}<strong>{{/a}}{{n}}{{#a}}</strong>{{/a}}</span>{{#y}}<div class="subhead">{{{y}}}{{#b}}, <em>{{b}}</em>{{/b}}{{#g}}, <em>{{g}}</em>{{/g}}</div>{{/y}}</div>'
  }
];




/*
 configuration for the player select auto-complete search.
 note that this piggy-backs on the json used in the search above,
 so we always assume that is available to us here.*/
var player_select_config = [

{
    name:    'players',
    url:     'https://fbref.com/short/inc/players_search_list.csv',
    limit:    10,
    header:  '',
    template: '<div> <span class="search-results-years"> {{c}}{{#f}}&nbsp;<span class="f-i f-{{f}}"></span>{{/f}} </span> <span class="search-results-item" >{{#a}}<strong>{{/a}}{{n}}{{#a}}</strong>{{/a}}</span>{{#y}}<div class="subhead">{{{y}}}{{#b}}, <em>{{b}}</em>{{/b}}{{#g}}, <em>{{g}}</em>{{/g}}</div>{{/y}}</div>'
    
}
];

// Add translation material for fb.
var sr_lang_hash = new Object();
sr_lang_hash['pt'] = {};
sr_lang_hash['pt'].title       = "Português";
sr_lang_hash['pt'].yes         = "SIM";
sr_lang_hash['pt'].or_word     = "ou";
sr_lang_hash['pt'].no          = "NÃO";
sr_lang_hash['pt'].continue    = "Continue perguntando isso em futuras visitas?";
sr_lang_hash['pt'].autoforward = "Sempre envia você para a página em inglês em futuras visitas?";
sr_lang_hash['en'] = {};
sr_lang_hash['en'].title       = "English";
sr_lang_hash['en'].yes         = "YES";
sr_lang_hash['en'].or_word     = "or";
sr_lang_hash['en'].no          = "NO";
sr_lang_hash['en'].continue    = "Continue asking this on future visits?";
sr_lang_hash['en'].autoforward = "Always send you to the English page on future visits?";
sr_lang_hash['fr'] = {};
sr_lang_hash['fr'].title       = "Français";
sr_lang_hash['fr'].yes         = "OUI";
sr_lang_hash['fr'].or_word     = "ou";
sr_lang_hash['fr'].no          = "NON";
sr_lang_hash['fr'].continue    = "Continuer à poser cette question lors de futures visites?";
sr_lang_hash['fr'].autoforward = "Toujours vous envoyer à la page anglaise sur les visites futures?";
sr_lang_hash['it'] = {};
sr_lang_hash['it'].title       = "Italiano";
sr_lang_hash['it'].yes         = "SÌ";
sr_lang_hash['it'].or_word     = "o";
sr_lang_hash['it'].no          = "NO";
sr_lang_hash['it'].continue    = "Continua a chiedere questo su future visite?";
sr_lang_hash['it'].autoforward = "Ti mando sempre alla pagina inglese per le visite future?";
sr_lang_hash['de'] = {};
sr_lang_hash['de'].title       = "Deutsch";
sr_lang_hash['de'].yes         = "JA";
sr_lang_hash['de'].or_word     = "oder";
sr_lang_hash['de'].no          = "NEIN";
sr_lang_hash['de'].continue    = "Fragen Sie dies bei zukünftigen Besuchen weiter?";
sr_lang_hash['de'].autoforward = "Schicke dich bei zukünftigen Besuchen immer auf die deutsche Seite?";
sr_lang_hash['es'] = {};
sr_lang_hash['es'].title       = "Español";
sr_lang_hash['es'].yes         = "SI";
sr_lang_hash['es'].or_word     = "o";
sr_lang_hash['es'].no          = "NO";
sr_lang_hash['es'].continue    = "¿Continuar preguntando esto en futuras visitas?";
sr_lang_hash['es'].autoforward = "¿Siempre te enviamos a la página de español en futuras visitas?";


/* ### FILE:libs-all/vanilla.js    */
/* *********************************************************************
   # Usage       :   sr_debugging
   # Purpose     :   check to see if this is a dev debugging something.
   # Returns     :   boolean true or false
   # Comments :   to get to true, you need to add sr_debug to page parameter list
                  like:
                  http://b.pfref.com/?sr_debugger
                 or add &sr_debugger into the param lists
   ********************************************************************** */

function sr_debugging () {
    var locate = window.location.search;
    return !!locate.match('sr_debugger');
}

/* *********************************************************************
   # Usage       :   vjs_hasClass
   # Purpose     :   checks to see if an element has a particular class listed
   # Returns     :   boolean true or false
   # Parameters  :   element node and string for class name
   # Throws      :
   # See Also    :
   # Comments :   
   ********************************************************************** */
function vjs_hasClass (el, className) {
    if (!el || !className)
	return false;
    var return_value = false;
    if (el.classList)
	return_value = el.classList.contains(className);
    else
	return_value = new RegExp('(^| )' + className + '( |$)', 'gi').test(el.className);
    
    return return_value;
}

/* *********************************************************************
   # Usage       :   vjs_removeClass
   # Purpose     :   removes a class from a list of classes
   # Returns     :   nothing
   # Parameters  :   element node and string for class name
   # Throws      :
   # See Also    :
   # Comments :   
   ********************************************************************** */
function vjs_removeClass (el, className) {
    if (!el || !className)
	return false;
    //console.log('vjs_removeClass:' + className + ' from:');
    //console.log(el);
    if (el.classList)
	el.classList.remove(className);
    else
	el.className = el.className.replace(new RegExp('(^|\\b)' + className.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
    return true;
}


/* *********************************************************************
   # Usage       :   vjs_addClass
   # Purpose     :   adds a class from a list of classes
   # Returns     :   nothing
   # Parameters  :   element node and string for class name
   # Throws      :
   # See Also    :
   # Comments :   
   ********************************************************************** */
function vjs_addClass (el, className) {
    if (!el || !className)
	return false;
    if (el.classList)
	el.classList.add(className);
    else if (!vjs_hasClass(el, className)) 
	el.className += ' ' + className;
    return true;
}


/* *********************************************************************
   # Usage       :   vjs_isHovered
   # Purpose     :   checks to see if we are hovering over an element.
   # Returns     :   nothing
   # Parameters  :   element node
   # Throws      :
   # See Also    :   used on the dropdown for search, when we click out of the search box
   # Comments :      https://stackoverflow.com/questions/13980448/jquery-focusout-click-conflict/27053444#27053444
   ********************************************************************** */
function vjs_isHovered(el) {
    return (el.parentElement.querySelector(':hover') === el);
}


/* *********************************************************************
   # Usage       :   vjs_hrefIsClicked
   # Purpose     :   checks to see if the click target is contained in an href
   # Returns     :   nothing
   # Parameters  :   event and the element onto which the click handler was added.
   # Throws      :
   # See Also    :   used on the rowHighlight and rowSum, 
   # Comments :      used so that the row doesn't highlight if user clicks on a link
   ********************************************************************** */
function vjs_hrefIsClicked(event, el) {

    event = event || window.event;
    var t = event.srcElement || event.target;
    if( !t.tagName) t = t.parentNode; // some browsers treat text nodes as potential targets
    while(t && (t !== el)) {
	if( t.tagName === "A") return true;
	t = t.parentNode;
    }
    return false;
}

/* *********************************************************************
   # Usage       :   vjs_fadeIn
   # Purpose     :   fades in a previously hidden item
   # Returns     :   nothing
   # Parameters  :   element node and timer in ms
   # Throws      :
   # See Also    :
   # Comments :   
   ********************************************************************** */
function vjs_fadeIn(el, timer) {
    el.style.opacity = 0;
    vjs_removeClass(el,'hidden');

    timer = timer ? timer : 400;
    
    var last = +new Date();
    var tick = function() {
	el.style.opacity = +el.style.opacity + (new Date() - last) / timer;
	last = +new Date();
	
	if (+el.style.opacity < 1) {
	    (window.requestAnimationFrame && requestAnimationFrame(tick)) || setTimeout(tick, 16);
	}
    };
    tick();
}

/* *********************************************************************
   # Usage       :   vjs_forEach
   # Purpose     :   runs through a list and applies a function to each
   # Returns     :   nothing
   # Parameters  :   list, function(list_item, idx)
   # Throws      :
   # See Also    :

   # Example use:

     vjs_forEach.call(sr_controls, function(el, i){
	    vjs_removeClass(el,'hidden');
         });

   ********************************************************************** */
var vjs_forEach = Array.prototype.forEach;


/* *********************************************************************
   # Usage       :   vjs_eraseCookie(name)
   # Purpose     :   deletes the cookie with "name"
   # Returns     :   
   # Parameters  :   
   # Throws      :
   # See Also    :
   # Comments :    http://clubmate.fi/setting-and-reading-cookies-with-javascript/
   ********************************************************************** */
function vjs_eraseCookie(name) {
    vjs_createCookie(name,"",-1);
}

/* *********************************************************************
   # Usage       :   vjs_clearCookies(name)
   # Purpose     :   deletes all of the domain cookies
   # Comments :   http://stackoverflow.com/questions/15804462/
   ********************************************************************** */
function vjs_clearCookies() {
    var cookies = document.cookie;
    for (var i = 0; i < cookies.split(";").length; ++i)
    {
	var myCookie = cookies[i];
	var pos = myCookie.indexOf("=");
	var name = pos > -1 ? myCookie.substr(0, pos) : myCookie;
	vjs_eraseCookie(name);
    }
}
/* *********************************************************************
   # Usage       :   vjs_getJson
   # Purpose     :   runs a ajax json request to the server.
   # Returns     :   
   # Parameters  :   url, params (as JSON or string), success and failure functions
   #                   suppressCallback disables the cache breaker for the request
   #                   isJSON tells us whether to expect json back
   # Throws      :
   # See Also    :
   # Comments :    
   ********************************************************************** */
function vjs_getJson (url, params, funcSuccess, funcFailure, suppressCallback) {
    console.log('   ### vjs_getJson  url:'.concat(url)); vjs_Ajax('GET',  url, params, funcSuccess, funcFailure, suppressCallback, true);
}
function vjs_getAjax (url, params, funcSuccess, funcFailure, suppressCallback, isJSON) {
    console.log('   ### vjs_getAjax  url:'.concat(url)); vjs_Ajax('GET',  url, params, funcSuccess, funcFailure, suppressCallback, isJSON);
}
function vjs_postJson (url, params, funcSuccess, funcFailure, suppressCallback) {
    console.log('   ### vjs_postJson url:'.concat(url)); vjs_Ajax('POST', url, params, funcSuccess, funcFailure, suppressCallback, true);
}
function vjs_postAjax (url, params, funcSuccess, funcFailure, suppressCallback, isJSON) {
    console.log('   ### vjs_postAjax url:'.concat(url)); vjs_Ajax('POST', url, params, funcSuccess, funcFailure, suppressCallback, isJSON);
}


/* *********************************************************************
   # Usage       :   
   # Purpose     :   
   # Returns     :   
   # Parameters  : for params,  we expect an object for a GET request,
                        and a string for a POST request 
   # Throws      :
   # See Also    :
   # Comments :    The callback referred to here is a random string added to the
   #                 request to prevent any caching of the response, this would be needed
   #                 for get but not post requests as they are never cached.
   ********************************************************************** */
function vjs_Ajax (request_type, url, params, funcSuccess, funcFailure, suppressCallback, isJSON) {

    // this is needed for ie < 10 and it doesn't handle CORS properly
    // below that.
    if (sr_detect_ie) {
        url = url.replace('https:','http:');
    }
    
    console.log('   ### vjs_Ajax  sent url:'.concat(url));

    // setup the request using the appropriate method for the browser.
    var request = false;
    var XMLHttpRequestObjects = [
        function () {
            return new window.XMLHttpRequest();  // IE7+, Firefox, Chrome, Opera, Safari
        },
        function () {
            return new window.ActiveXObject('Msxml2.XMLHTTP.6.0');
        },
        function () {
            return new window.ActiveXObject('Msxml2.XMLHTTP.3.0');
        },
        function () {
            return new window.ActiveXObject('Msxml2.XMLHTTP');
        }
    ];
    
    for (var i = 0; i < XMLHttpRequestObjects.length; i += 1) {
        try {
            request = XMLHttpRequestObjects[i]();
        } catch (ignore) {
        }
	
        if (request !== false) {
            break;
        }
    }


    var post_params = null;
    // read through the params to build the request.   
    var request_params = suppressCallback ?
	    '' :
	    'callback=SR'.concat( Math.floor((Math.random() * 10000000) + 1) );

    if ((params instanceof Object)  && params) {
	for (var key in params) {
	    // tack on each of the values for the key pair, if none already exist don't
	    // prefix with an &
	    request_params = request_params.concat(request_params ? '&': '',
						   encodeURIComponent(key), '=', encodeURIComponent(params[key]));
	}	
    }
    else if ((typeof params === 'string') && params) {
	// add our given params to the request_params.
	request_params = request_params.concat(request_params ? '&': '', params);
    }
    
    // if we are suppressing the callback we reset the params here.
    if (request_type === 'GET') {

	// if there is something in request_params from above we tack that onto
	// the end of our url for a GET request, else it's just the url
	if (request_params) {
	    // determine if there are params attached to the url already.
	    var join_char = (url.indexOf('?') === -1)? '?': '&';
	    url = url.concat(join_char, request_params);
	}

	// We don't want to use request_params anymore so unset it here.
	request_params = '';
    }

    console.log('   ### vjs_Ajax final url:'.concat(url));

    try { request.open(request_type, url, true); } catch (err) { return false; }

    if (request_type === 'POST') {
	// set the content-type as we are sending all of the content via key-pair values
	request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');
    }
    
    // get the response of the request.
    request.onload = function() {	
	if (request.status >= 200 && request.status < 400) {
	    // Success!
	    var data;
	    if (request.responseText) {
		// get the response and trim the leading and trailing
		// callback material.
		data = request.responseText;

		// strip out the callback if one is provided.
		if (!suppressCallback) {
		    data = data.replace(/^SR[0-9]+\(/, '');
		    data = data.replace(/\)$/, '');
		}
		
		// if it's json we parse it here.
		if (isJSON) {
		    data = JSON.parse(data);
		}
	    }
	    // run through the success function
	    if (typeof funcSuccess === 'function') {
		funcSuccess(data);
	    }	    
	} else {
	    // We reached our target server, but it returned an error
	    if (typeof funcFailure === 'function') {
		funcFailure();
	    }
	}
    };

    // server error, so run our failure func here.
    request.onerror = function() {
	if (typeof funcFailure === 'function') {
	    funcFailure();
	}	    	
    };

    // launch the request.
    request.send(request_params);
}



/* *********************************************************************
   # Usage       :   vjs_scrollLeft()
   # Purpose     :   returns pixels we are scrolled left in the window
   # Returns     :   an integer
   # Parameters  :   
   # Throws      :
   # See Also    :
   # Comments :    
   ********************************************************************** */
function vjs_scrollLeft() {
    var scrOfX = 0;
    if( typeof( window.pageYOffset ) === 'number' ) {
	//Netscape compliant
	scrOfX = window.pageXOffset;
    } else if( document.body && ( document.body.scrollLeft || document.body.scrollTop ) ) {
	//DOM compliant
	scrOfX = document.body.scrollLeft;
    } else if( document.documentElement && ( document.documentElement.scrollLeft || document.documentElement.scrollTop ) ) {
	//IE6 standards compliant mode
	scrOfX = document.documentElement.scrollLeft;
    }
    return scrOfX;
}

/* *********************************************************************
   # Usage       :   vjs_scrollTop()
   # Purpose     :   
   # Returns     :   returns pixels we have scrolled from top of the windwo
   # Parameters  :   
   # Throws      :
   # See Also    :
   # Comments :    
   ********************************************************************** */
function vjs_scrollTop() {
    var scrOfY = 0;
    if( typeof( window.pageYOffset ) === 'number' ) {
	//Netscape compliant
	scrOfY = window.pageYOffset;
    } else if( document.body && ( document.body.scrollLeft || document.body.scrollTop ) ) {
	//DOM compliant
	scrOfY = document.body.scrollTop;
    } else if( document.documentElement && ( document.documentElement.scrollLeft || document.documentElement.scrollTop ) ) {
	//IE6 standards compliant mode
	scrOfY = document.documentElement.scrollTop;
    }
    return scrOfY;
}


/* *********************************************************************
   # Usage       :   vjs_offset(el)
   # Purpose     :   tells us where an element is in the browser
   # Returns     :   {top: , left: } which are pixels from (0,0)
   # Parameters  :   
   # Throws      :
   # See Also    :
   # Comments :    
   ********************************************************************** */
function vjs_offset(el) {
    if (el) {
	var rect = el.getBoundingClientRect();
	return {
	    top: rect.top + vjs_scrollTop(),
	    left: rect.left + vjs_scrollLeft(),
	    bottom: rect.top + vjs_scrollTop() + el.offsetHeight,
	    right: rect.left + vjs_scrollLeft() + el.offsetWidth
		
	};
    }
    return {};
}


/* *********************************************************************
   # Usage       :   vjs_viewportGetHeight
   # Purpose     :   tells us how many pixels high the viewport is.
   # Returns     :   
   # Parameters  :   
   # Throws      :
   # See Also    :
   # Comments :    
   ********************************************************************** */
function vjs_viewportGetHeight(){
    return window.innerHeight || document.documentElement.offsetHeight;
}


/* *********************************************************************
   # Usage       :   vjs_viewportGetWidth
   # Purpose     :   tells us how many pixels wide the viewport is.
   # Returns     :   
   # Parameters  :   
   # Throws      :
   # See Also    :
   # Comments :    
   ********************************************************************** */
function vjs_viewportGetWidth(){
    return window.innerWidth || document.documentElement.offsetWidth;
}



/* *********************************************************************
   # Usage       :   vjs_getHeight(elem)
   # Purpose     :   tells us how many pixels high an element is
   # Returns     :   
   # Parameters  :   
   # Throws      :
   # See Also    :
   # Comments :    
   ********************************************************************** */
function vjs_getHeight(elem){
    return Math.max( elem.scrollHeight, elem.offsetHeight, elem.clientHeight );
}

/* *********************************************************************
   # Usage       :   vjs_getDocumentHeight()
   # Purpose     :   tells us how many pixels high the document is
   # Returns     :   
   # Parameters  :   
   # Throws      :
   # See Also    :
   # Comments :    
   ********************************************************************** */
function vjs_getDocumentHeight(){
    return Math.max(
	document.body.scrollHeight, document.documentElement.scrollHeight,
	document.body.offsetHeight, document.documentElement.offsetHeight,
	document.body.clientHeight, document.documentElement.clientHeight
    );
}



/* *********************************************************************
   # Usage       :   vjs_outerWidth(el)
   # Purpose     :   the outerwidth in pixels of the element.
   # Returns     :   integer
   # Parameters  :   
   # Throws      :
   # See Also    :
   # Comments :    
   ********************************************************************** */
function vjs_outerWidth(el){
    var width = el.offsetWidth;
    if (!window.getComputedStyle) {
	return width;
    }
    var style = getComputedStyle(el);
    
    width += parseInt(style.marginLeft) + parseInt(style.marginRight);
    return width;
}



/* *********************************************************************
   # Usage       :   
   # Purpose     :   
   # Returns     :   
   # Parameters  :   
   # Throws      :
   # See Also    :
   # Comments :    

  Adds eventlisteners cross browser
  @param {object}   el       The element which gets the listener
  @param {string}   e        The event type
  @param {function} callback The action to execute on event
  @param {boolean}   val      The capture mode
 
  ********************************************************************** */
function vjs_addEvent(el,e,callback,capture){
      if (el.addEventListener) {
          el.addEventListener(e,callback, capture || false);
      } else if (el.attachEvent) {
          el.attachEvent("on" + e, callback);
      }
  }

/* *********************************************************************
   # Usage       :   vjs_isNode|isObject(obj)
   # Purpose     :   help us figure out what the var is.
   # Returns     :   booleans for if the objects are dom nodes or elements
   # Parameters  :   obj
   # Throws      :
   # See Also    :
   # Comments :       http://stackoverflow.com/a/384380/425494
 ********************************************************************** */
//Returns true if it is a DOM node
function vjs_isNode(obj){
    return (
	typeof Node === "object" ? obj instanceof Node : 
	    obj && typeof obj === "object" && typeof obj.nodeType === "number" && typeof obj.nodeName==="string"
    );
}
//Returns true if it is a DOM element    
function vjs_isElement(obj){
    if (!obj) { return false; }
    return (
	((typeof HTMLElement) === "object")
	    ? (obj instanceof HTMLElement)
	    : (obj && (typeof obj === "object") && (obj !== null) && (obj.nodeType === 1) && (typeof obj.nodeName==="string"))
    );
}

/* *********************************************************************
   # Usage       :   vjs_isset(obj)
   # Purpose     :   boolean for if the object isset
   # Returns     :   
   # Parameters  :   
   # Throws      :
   # See Also    :
   # Comments :    


  Checks if obj is set
  @param  {object} obj 
  @return {boolean}    

 ********************************************************************** */
function vjs_isset(obj) {
    if (typeof obj !== 'undefined') {
	return true;
    }
    return false;
}

/* *********************************************************************
   # Usage       :   
   # Purpose     :   
   # Returns     :   
   # Parameters  :   
   # Throws      :
   # See Also    :
   # Comments :    

 Get attribute value cross-browser. Returns the attribute as string if found,
  otherwise returns false
  @param  {object} obj  
  @param  {string} attr 
  @return {boolean || string}      

 ********************************************************************** */
function vjs_getAttr(obj, attr) {
    if(!obj || !vjs_isset(obj)) {
	return false;
    }

    var ret;
    if (obj.getAttribute) {
	ret = obj.getAttribute(attr);
    }
    else if (obj.getAttributeNode) {
	ret = obj.getAttributeNode(attr).value;
    }

    if (vjs_isset(ret) && ret !== '') {
	return ret;
    }
    
    return false;
}

/* *********************************************************************
   # Usage       :   
   # Purpose     :   
   # Returns     :   
   # Parameters  :   
   # Throws      :
   # See Also    :
   # Comments :    

  Set attribute value cross-browser. Returns the attribute as string if found,
  otherwise returns false
  @param  {object} obj  
  @param  {string} attr 
  @return {boolean || string}      
 ********************************************************************** */
function vjs_setAttr(obj,attr,value) {
    if(!obj || !vjs_isset(obj)) {
	return false;
    }

    var ret;
    if (obj.setAttribute) {
	ret = obj.setAttribute(attr, value);
    }
    else if (obj.setAttributeNode) {
	var att = document.createAttribute(attr);
	att.value = value;                           // Set the value of the class attribute
	ret = obj.setAttributeNode(att);
    }

    if (vjs_isset(ret) && ret !== '') {
	return ret;
    }
    
    return false;
}

/* *********************************************************************
   # Usage       :   
   # Purpose     :   
   # Returns     :   
   # Parameters  :   
   # Throws      :
   # See Also    :
   # Comments :    

  Remove attribute value cross-browser. 
  otherwise returns false
  @param  {object} obj  
  @param  {string} attr 
  @return {boolean || string}      
   ********************************************************************** */
function vjs_removeAttr(obj,attr) {
    if(!obj || !vjs_isset(obj)) {
	return false;
    }

    var ret;
    if (obj.removeAttribute) {
	ret = obj.removeAttribute(attr);
    }
    else if (obj.removeAttributeNode) {
	ret = obj.removeAttributeNode(att);
    }

    if (vjs_isset(ret) && ret !== '') {
	return ret;
    }
    
    return false;
}

/* *********************************************************************
   # Usage       :   
   # Purpose     :   
   # Returns     :   
   # Parameters  :   
   # Throws      :
   # See Also    :
   # Comments :    

  Checks if element has attribute cross-browser
  @param  {object}  obj  
  @param  {string}  attr   
  @return {boolean}      

 ********************************************************************** */
function vjs_hasAttr(obj,attr) {

    if (!obj || !vjs_isset(obj)) {
	return false;
    }

    var ret;

    if (obj.getAttribute) {
	ret=obj.getAttribute(attr);
    }
    else if (obj.getAttributeNode){
	ret=obj.getAttributeNode(attr).value;
    }
    
    if (typeof ret === 'string'){
	return true;
    }

    return false;
}


/* *********************************************************************
   # Usage       :   
   # Purpose     :   
   # Returns     :   
   # Parameters  :   
   # Throws      :
   # See Also    :
   # Comments :    

  Stop event propagation cross browser
  @param  {object} e 

 ********************************************************************** */
function vjs_stopPropagation(e) {
    var event = e || window.event;

    if (event.stopPropagation) {
	event.stopPropagation();
    }
    else if(window.event){
	window.event.cancelBubble=true;
    }
    else {
	event.returnValue=false;
    }

}


/* *********************************************************************
   # Usage       :   vjs_padStringWithChars(string, final_wdith, chars to add)
   # Purpose     :   
   # Returns     :   
   # Parameters  :   
   # Throws      :
   # See Also    :
   # Comments :    
   ********************************************************************** */
function vjs_padStringWithChars(string, final_width, chars) {
    chars = chars || '0';
    string = string + '';
    return string.length >= final_width 
	? string
	: new Array(final_width - string.length + 1).join(chars) + string;
}

/* *********************************************************************
   # Usage       :   vjs_serializeForm(obj form)
   # Purpose     :   provides the form serialized for storing as a string.
   # Returns     :   a string with the parameters serialized
   # Parameters  :   a form js object
   * https://gist.github.com/brettz9/7147458
   * Adapted from {@link http://www.bulgaria-web-developers.com/projects/javascript/serialize/}
   * Changes:
   *     Ensures proper URL encoding of name as well as value
   *     Preserves element order
   *     XHTML and JSLint-friendly
   *     Disallows disabled form elements and reset buttons as per HTML4 [successful controls]{@link http://www.w3.org/TR/html401/interact/forms.html#h-17.13.2}
   *         (as used in jQuery). Note: This does not serialize <object>
   *         elements (even those without a declare attribute) or
   *         <input type="file" />, as per jQuery, though it does serialize
   *         the <button>'s (which are potential HTML4 successful controls) unlike jQuery
   * @license MIT/GPL
   ********************************************************************** */
function vjs_serializeForm(form) {
    'use strict';
    var i, j, len, jLen, formElement, q = [];
    function urlencode (str) {
	// http://kevin.vanzonneveld.net
        // Tilde should be allowed unescaped in future versions of PHP (as reflected below), but if you want to reflect current
        // PHP behavior, you would need to add ".replace(/~/g, '%7E');" to the following.
        return encodeURIComponent(str).replace(/!/g, '%21').replace(/'/g, '%27').replace(/\(/g, '%28').  
            replace(/\)/g, '%29').replace(/\*/g, '%2A').replace(/%20/g, '+');
    }
    function addNameValue(name, value) {
        q.push(urlencode(name) + '=' + urlencode(value));
    }
    if (!form || !form.nodeName || form.nodeName.toLowerCase() !== 'form') {
        throw 'You must supply a form element';
    }
    for (i = 0, len = form.elements.length; i < len; i++) {
        formElement = form.elements[i];

	// get the form value and append to your array
	var formValue = vjs_getFormElement(formElement);
	if (formValue && formValue.constructor === Array) {
	    for (var k = 0, lenK = formValue.length; k < lenK; k++) {
		addNameValue(formElement.name, formValue[k]);
	    }
	}
	else if (formValue) {
	    addNameValue(formElement.name, formValue);
	}
    }
    return q.join('&');
}



/* *********************************************************************
   # Usage       :   vjs_[un]escapeHtml(str)
   # Purpose     :   cleans out html from a user input.
   # Parameters  :   this is for xss safety.

   # See Also    :
   # Comments :     http://shebang.brandonmintern.com/foolproof-html-escaping-in-javascript/
                      Use the browser's built-in functionality to quickly and safely escape
                      the string

		      Recommendation here is that you escape the string before you use it and
		      not when you first read it as a matter of course.
********************************************************************** */
function vjs_escapeHtml(str) {
    var div = document.createElement('div');
    div.appendChild(document.createTextNode(str));
    return div.innerHTML;
}

// UNSAFE with unsafe strings; only use on previously-escaped ones!
function vjs_unescapeHtml(escapedStr) {
    var div = document.createElement('div');
    div.innerHTML = escapedStr;
    var child = div.childNodes[0];
    return child ? child.nodeValue : '';
}

/* *********************************************************************
   # Usage       :   vjs_toggleDisplayBlock(el)
   # Purpose     :   shows or hides a block
   # Returns     : [open|closed]  
   # Parameters  :   
   # Throws      :
   # See Also    :
   # Comments :    
   ********************************************************************** */
function vjs_toggleDisplayBlock (el) {
    var disp       = el.style.display;
    var has_more   = vjs_hasClass(el,'more');
    var has_hidden = vjs_hasClass(el,'hidden');

    // check to see if the element is displayed.
    if ((disp === 'none') || has_more  || has_hidden ) {
	el.style.display = 'initial';
        if (has_more) {
	    vjs_removeClass(el,'more');
        }
        if (has_hidden) {
	    vjs_removeClass(el,'hidden');
        }
	return 'open';
    }
    else {
	el.style.display = 'none';
	return 'closed';
    }
}

/* *********************************************************************
   # Usage       :   vjs_toggleClass(el,class)
   # Purpose     :   toggles the appearance of a class on an object.
   # Returns     : true if the element has the class at the end of this routine
                   false if the element does not have the class.
   # Parameters  :   
   # Throws      :
   # See Also    :
   # Comments :    
   ********************************************************************** */
function vjs_toggleClass (el,theClass) {
    if (!el || !theClass) {
	return false;
    }
    var has_theClass = vjs_hasClass(el, theClass);

    // check to see if the element is displayed.
    if ( has_theClass ) {
	vjs_removeClass(el,theClass);
	return false;
    }
    else {
	vjs_addClass(el,theClass);
	return true;
    }
}

/* *********************************************************************
   # Usage       :   vjs_isHidden or vjs_isVisbile
   # Purpose     :   booleans to tell me if something is seeable.
   # Returns     :   
   # Parameters  :   
   # Throws      :
   # See Also    :
   # Comments :    
   ********************************************************************** */
function vjs_isHidden (el) {
    return el.offsetWidth <= 0 || el.offsetHeight <= 0;    
}
function vjs_isVisible (el) {
    return !vjs_isHidden(el);
}


/* *********************************************************************
   # Usage       :   vjs_deserializeForm(form, d) 
   # Purpose     :   takes a json object and sets a form accordingly
   # Returns     :   nothing.
   # Parameters  :   a form obejct, a json object, is_initial_load for page (boolean),
   #                  firedPreset: node that we click/changed for a preset
   # Throws      :
   # See Also    :
   # Comments :    
 * This function sets the values of form element variables from an array
 * This is the reverse process of Mark Constable's serialize function
 * It is expected to be used as a call back for an ajax call that retrieves the form data
 * @param data : array or hash containing name,value pairs for elements in the form
 *
 * Examples
 *
 * 1. Deserialize from an array
 *    $('#form-id').deserialize([{'name':'firstname','value':'John'},{'name':'lastname','value':'Resig'}]);
 *
 * 2. Deserialize from a hash(object)
 *    $('#form-id').deserialize({'firstname':'John','lastname':'Resig'});
 *
 * 3. Deserialize multiple config for select/radio/checkbox
 *    $('#form-id').deserialize({'toppings':['capsicum','mushroom','extra_cheese'],'size':'medium'})
 * which will set the corresponding select/radio/checkbox config for toppings
 *
 * 3. Deserialize multiple config for select/radio/checkbox and with isPHPnaming = true
 *    $('#form-id').deserialize({'toppings':['capsicum','mushroom','extra_cheese'],'size':'medium'},{isPHPnaming:true})
 * which will set the corresponding select/radio/checkbox config for toppings, but will ignore select names ending with []
 *
 * @return         the jQuery Object
 * @author         Ashutosh Bijoor (bijoor@reach1to1.com)
 * @version        0.35

 This was rewritten 2015-07-10 to be vanilla js.


 couple helper things here.

 if the value given = 'default' then value set will be the elements defaultValue
   ********************************************************************** */
function vjs_deserializeForm(form, d, is_initial_load, firedPreset) {
	console.log('   ### vjs_deserializeForm ');
	console.log('   ### is_initial_load:'.concat(is_initial_load));

	var data = d;

	if (!form || (d === undefined)) {
		return false;
	}

	// check if data is an array, and convert to hash, converting multiple entries of 
	// same name to an array
	if (d.constructor === Array) {
		data={};

		for(var i = 0; i < d.length; i++) {

		if (typeof data[d[i].name] !== 'undefined') {

				if (data[d[i].name].constructor !== Array) {
					data[d[i].name] = [data[d[i].name],d[i].value];
				} else {
					data[d[i].name].push(d[i].value);
				}

			}
		else {
				data[d[i].name] = d[i].value;
			}
		}
	}

    
	// in some cases the params could get a touch sloppy as with dates
	// and be passed as '08' rather than '8', we will go through each
	// param and clean any such params-value pairs.
	for (var key in data) {
		if (key && data[key] && (typeof(data[key]) !== 'object') && data[key].match(/^0+[0-9]+$/)) {
			var new_value = data[key].replace(/^0+/,'');
			data[key] = new_value;
		}
	}

    
	// for checkboxes in a group we may want to turn them off by default and then
	// turn them back on one-by-one later. this can be used to turn them off.
	vjs_forceFormElements(form,data);

	// now data is a hash. insert each parameter into the form
	var formElements = form.querySelectorAll('input,select,textarea');

	// Run through each form element to serialize it.
	vjs_forEach.call(formElements, function(formElement, idx) {

		// if the formElement has an attribute data-no-serial we move on.
		if (vjs_hasAttr(formElement, 'data-no-serial')) {
			return false;
		}
		
		var p = formElement.name;

		// we don't want to update the hint on the forms.
		if (p === 'hint') {
			return false;
		}
		
		// allows us to set a form element to be the same as another
		// form element.  data[p] is the value of our form element.
		// If we have another form element that has the name of the
		// value given here, we set our form element equal to that
		// other form element.  this is necessary if we want to set
		// year_min === year_max, we just pass year_min : 'year_max'
		// and they'll be equal. this causes problems when we are
		// loading the form for the first time.  NOTE: this caused an
		// issue for a season_finder table as we loaded the table with
		// location: 'pob', pob: 'United_States', to handle this we
		// add a flag, is_initial_load that gets passed along from
		// sr.mod.form.js:function sr_form_checkDeserialize (params, formToSet, is_initial_load)
		// we exclude the -- values here because they seem to throw errors within namedItem
		if (data[p] && (typeof data[p] === 'string') && !data[p].match('--') && form.elements.namedItem(data[p]) && form.elements.namedItem(data[p]).value && !is_initial_load) {
			data[p] = form.elements.namedItem(data[p]).value;	    
		}

		// if given the value "default", set the desired value to the default.
		if (data[p] === 'default') {
			data[p] = form.elements.namedItem(p).defaultValue || form.elements.namedItem(p).defaultSelected || '';
			//console.log('default:'.concat(p,',',data[p]));
		}
		
		var v = [];
		// handle weird PHP names if required
		if(p && data[p] !== undefined) {
			v = data[p].constructor === Array ? data[p] : [data[p]];
		}

		// ////////////////////////////////////////////////////////////////////////////////////
		// set the value for this formElement
		// ////////////////////////////////////////////////////////////////////////////////////
		if (typeof data[p] !== 'undefined') {
			vjs_setFormElement(formElement,v, firedPreset, is_initial_load);
		}

		if (chosen_events) {
			chosen_events.fire(formElement,"chosen:updated");
		}
		return true;
	});

	// ////////////////////////////////////////////////////////////////////////////////////
	// run through the elements to hide
	// // console.log("### HIDING");
	if(data['hide'] !== undefined) {
		var hideIds = data['hide'].split(',');
		// console.log(hideIds);
		for (var i = 0, max = hideIds.length; i < max; i++) {

			var elemsHide =  (hideIds[i].indexOf('.') === 0)
				? document.querySelectorAll(hideIds[i])
				: document.querySelectorAll('#'.concat(hideIds[i]))
			;
			
			// // console.log('elemsHide');
			// // console.log(elemsHide);
			for (var j = 0, max_j = elemsHide.length; j < max_j; j++) {
				// console.log('hide:'+elemsHide[j]);
				vjs_addClass(elemsHide[j],'hidden');
			}
		}
	}

	// run through the elements to show
	// // console.log("### SHOWING");
	if(data['show'] !== undefined) {
		var showIds = data['show'].split(',');
		// console.log(showIds);
		for (var i = 0, max = showIds.length; i < max; i++) {

			showIds[i] = vjs_preset_convert_lookup(form,showIds[i]);

			var elemsShow =  (showIds[i].indexOf('.') === 0)
				? document.querySelectorAll(showIds[i])
				: document.querySelectorAll('#'.concat(showIds[i]))
			;
			
			// // console.log('elemsShow');
			// // console.log(elemsShow);
			for (var j = 0, max_j = elemsShow.length; j < max_j; j++) {
			// console.log('show:'+elemsShow[j]);
			vjs_removeClass(elemsShow[j],'hidden');
			}
		}
	}
    
	// run through the elements to bounce
	// // console.log("### BOUNCING");
	if(data['bounce'] !== undefined) {
		var bounceIds = data['bounce'].split(',');
		// console.log(bounceIds);
		for (var i = 0, max = bounceIds.length; i < max; i++) {
			var elemsBounce =  (bounceIds[i].indexOf('.') === 0)
				? document.querySelectorAll(bounceIds[i])
				: document.querySelectorAll('#'.concat(bounceIds[i]))
			;
			// // console.log('elemsBounce');
			// // console.log(elemsBounce);
			for (var j = 0, max_j = elemsBounce.length; j < max_j; j++) {
				// // console.log('bounce:'+elemsBounce[j]);
				vjs_addClass(elemsBounce[j],'animated');
				vjs_addClass(elemsBounce[j],'bounce');
				setTimeout(function () {
					vjs_removeClass(elemsBounce[j],'animated');
					vjs_removeClass(elemsBounce[j],'bounce');
				}, 1000);
			}
		}
	}
	return true;
};



/* *********************************************************************
   # Usage       :   vjs_setFormElement
   # Purpose     :   given a form elment it attempts to set its given value
   # Returns     :   nothing
   # Parameters  :   form element, array of values. nodeNoTrigger is the element that started this cascade,
                      and we don't want to trigger the event on that element multiple times.
		      is_initial_load keeps us from resetting elements if they are blank and it's the initial_load
   # Throws      :
   # See Also    :
   # Comments :     was broken out of vjs_deserializeForm
   #  NOTE: this is the final stop on a couple of things we do
   #   1) it's how we set the parameters using our presets
   #   2) it's also used on load to get the form to matchup with the values we were passed.
 ********************************************************************** */
function vjs_setFormElement(formElement, arrValues, nodeNoTrigger, is_initial_load) {   

	var arrLen = arrValues.length;
	console.log('   ### vjs_setFormElement #####');
	console.log(formElement);
	console.log(arrValues);
	console.log(nodeNoTrigger);

	// for cases where there is one value and it's blank we just do
	// nothing and rely on the cgi to set the value properly.
	// typically these params would be scrubbed on submit from the PI
	// tool, but there are some cases we we provide a link to the tool
	// directly and we may not have filtered out the empty values, so
	// in that case we need this belt and suspenders approach here.
	if ((arrLen === 1) && (arrValues[0] === "") && is_initial_load) {
		// console.log('  RETURN WITH NOTHING CHANGED');
		return false;
	}

	if (!formElement) {	return false; }

	switch(formElement.type || formElement.tagName.toLowerCase()) {
	
		case "radio":
		case "checkbox":
			formElement.checked = false;
			for(var i = 0; i < arrLen; i++) {
			// this is a bitwise-or to handle the case where we have a lot of values passing through here
			// and we just need it to match one time for one of the items in the array.
				formElement.checked |=  ((formElement.value !== '' && arrValues[i] === formElement.value) || (formElement.value === '' && arrValues[i] === ''));
			}

			// there are cases where a preset in one part of the form
			// affects something elsewhere that also has its own trigger.
			// In that case we want to make sure that we aren't running
			// the preset of the changed element causing a possible race
			// condition.
			// 
			// this is used in the baseball event finder.  In the results
			// you click a preset for something like walk-off and then it
			// checks the box for walk-off within the form.
			if (formElement.checked && (formElement !== nodeNoTrigger) && (!vjs_getAttr(formElement,'data-notrigger'))) {
				vjs_triggerEvent(formElement,'click');
			}
			// if the event we don't want to trigger the click event we can try the change event. 
			else if	(formElement.checked && (formElement !== nodeNoTrigger) && (vjs_getAttr(formElement,'data-notrigger'))) {
				vjs_triggerEvent(formElement,'change');
			}

			// For ie and edge see if this helps with the 
			if (formElement.checked && (sr_detect_edge || sr_detect_ie)) {
				console.log("IE, Edge: formElement.checked = ".concat(formElement.checked));
				formElement.setAttribute("checked", true);
				formElement.checked    = "checked";
				formElement.defaultChecked    = true;
			}

			break;
	
		case "select-one":
			var was_selected = -1;
			var new_selected = -1;
			for(i = 0; i < formElement.options.length; i++) {
				if (formElement.options[i].selected) {
					was_selected = i;
				}
				formElement.options[i].selected = false;
				// we see if the query matches the form element value or matches '0'+ form element value - make sure what we're trying to select isn't blank before applying that last bit of logic
				formElement.options[i].selected = ((formElement.options[i].value === arrValues[0]) || (arrValues[0] !== "" && formElement.options[i].value === '0'.concat(arrValues[0])));
				if (formElement.options[i].selected) {
					new_selected = i;
				}
			}
			if ((new_selected === -1) && (was_selected !== -1)) {
				formElement.options[was_selected].selected = true;
				alert('There is no matching value');
			}
			else if ((formElement !== nodeNoTrigger) && (!vjs_getAttr(formElement,'data-notrigger'))) {
				vjs_triggerEvent(formElement,'change');
			}
			break;
	
		case "select-multiple" || "select": 
			var was_selected = -1;
			var new_selected = -1;
			for(i = 0; i < formElement.options.length; i++) {
				if (formElement.options[i].selected) {
					was_selected = i;
				}
				formElement.options[i].selected = false;

				// step through and see if we have a matching value.
				for(var j = 0; j < arrValues.length; j++) {
				// we see if the query matches the form element value or matches '0'+ form element value
					formElement.options[i].selected |=  ( (formElement.options[i].value !== '') &&
						  ((formElement.options[i].value === arrValues[j]) || (formElement.options[i].value === '0'.concat(arrValues[j]) ) )
					);
					if (formElement.options[i].selected) {
						new_selected = i;
					}
				}
				if ((new_selected === -1) && (was_selected !== -1)) {
					formElement.options[was_selected].selected = true;
					alert('There is no matching value');
				}
				else if ((formElement !== nodeNoTrigger) && (!vjs_getAttr(formElement,'data-notrigger'))) {
					vjs_triggerEvent(formElement,'change');
				}
			}
			break;
	
		case "button":
		case "submit":
			formElement.value=arrValues.length>0?arrValues.join(','):formElement.value;
			break;

		default:
			formElement.value = arrValues.join(',');
	}
}



/* *********************************************************************
   # Usage       :   vjs_getFormElement
   # Purpose     :   given a form elment it returns a value for the element
   # Returns     :   a string
   # Parameters  :   form element
   # Throws      :
   # See Also    :
   # Comments :     was broken out of vjs_serializeForm
 ********************************************************************** */
function vjs_getFormElement(formElement) {   
    if (formElement.name === '' || formElement.disabled) {
        return '';
    }
    switch (formElement.nodeName.toLowerCase()) {
    case 'input':
        switch (formElement.type) {
        case 'text':
        case 'date':
        case 'number':
        case 'search':
        case 'hidden':
        case 'password':
        case 'button': // Not submitted when submitting form manually, though jQuery does serialize this and it can be an HTML4 successful control
        case 'submit':
            return formElement.value;
        case 'checkbox':
        case 'radio':
            if (formElement.checked) {
		return formElement.value;
            }
	    return '';
        case 'file':
	    return '';
        case 'reset':
	    return '';
	default:
	    return '';
        }
	return '';
        break;
    case 'textarea':
        return formElement.value;
    case 'select':
        switch (formElement.type) {
        case 'select-one':
            return  formElement.value;
        case 'select-multiple':
	    var list = [];
            for (j = 0, jLen = formElement.options.length; j < jLen; j++) {
                if (formElement.options[j].selected) {
                    list.push( formElement.options[j].value);
                }
            }
	    return list;
        } 
	return '';
   case 'button': // jQuery does not submit these, though it is an HTML4 successful control
        switch (formElement.type) {
        case 'reset':
        case 'submit':
        case 'button':
            return formElement.value;
        }
    default:
	return '';
    }
    return '';
}

/* *********************************************************************
   # Usage       :   vjs_forceFormElements
   # Purpose     :   takes a form and object data and forces some form elements
   # Returns     :   nothing
   # Parameters  :   form element, data associative array.
   # Throws      :
   # See Also    :
   # Comments :    
To implement this
<input type="hidden" name="force:pos_is" value="1" data-force=".pos_is" data-value="">  in the form
and add class pos_is to the elments to force

 ********************************************************************** */
function vjs_forceFormElements(form,data) {   
    // console.log('### vjs_forceFormElements');
    for (var key in data) {
	if (key.match(/^force:/)) {
	    // console.log('gotta force:'.concat(key));

	    // get the element that corresponds to this <input name="key">
	    var elForce = form.querySelector('input[name="'.concat(key,'"]'));
	    if (elForce) {
		// got the element, pull its data.
		var selectorForce = vjs_getAttr(elForce,'data-force');
		var selectorValue = vjs_getAttr(elForce,'data-value');
		if (selectorForce) {
		    var arrValue = [selectorValue];
		    var els = form.querySelectorAll(selectorForce);
		    // console.log(arrValue);
		    // console.log(els);
		    vjs_forEach.call(els, function(el, idx) {
			vjs_setFormElement(el,arrValue);
		    });
		}		    
	    }
	}
    }
}

/* *********************************************************************
   # Usage       :   vjs_preset_convert_lookup
   # Purpose     :   takes a form and convert
   # Returns     :   
   # Parameters  :   
   # Throws      :
   # See Also    :
   # Comments :    
SLF: I'm sorry, but I'm no longer 100% clear on what this does

 supports string+VAL:id
 will look up the form value of form element withname id

 ********************************************************************** */
function vjs_preset_convert_lookup(form,string) {

    var return_value = string;
    if (string.indexOf('+') > 0) {
	// console.log("### vjs_preset_convert_lookup");
	// console.log(form);
	// console.log(string);
	var id_split = string.split('+');
	var value_split = id_split[1].split(':');
	return_value =  id_split[0].concat(form.elements.namedItem(value_split[1]).value);
	// console.log(return_value);
    }
    return return_value;
}


/* *********************************************************************
   # Usage       :   vjs_cloneObject(obj);
   # Usage       :   vjs_deepExtend({}, objA, objB);
   # Purpose     :   extends objA with what's in objB
   #                  object A is the deep copy of object B, or
   #                  clone of b into a
   # Returns     :   
   # Parameters  :   
   # Throws      :
   # See Also    :

 http://youmightnotneedjquery.com/#deep_extend
   # Comments :    replaces: $.extend(true, {}, objA, objB);
                
 ********************************************************************** */
function vjs_cloneObject(obj) {
    if (obj === null || typeof(obj) !== 'object' || 'isActiveClone' in obj)
        return obj;
    
    if (obj instanceof Date)
        var temp = new obj.constructor(); //or new Date(obj);
    else
        var temp = obj.constructor();
    
    for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
            obj['isActiveClone'] = null;
            temp[key] = vjs_cloneObject(obj[key]);
            delete obj['isActiveClone'];
        }
    }
    return temp;
}
var vjs_deepExtend = function(out) {
  out = out || {};

  for (var i = 1; i < arguments.length; i++) {
    var obj = arguments[i];

    if (!obj)
      continue;

    for (var key in obj) {
      if (obj.hasOwnProperty(key)) {
        if (typeof obj[key] === 'object')
          vjs_deepExtend(out[key], obj[key]);
        else
          out[key] = obj[key];
      }
    }
  }

  return out;
};



/* *********************************************************************
# Usage       :   vjs_trimWhiteSpace(string)
# Purpose     :   trims start & end of string and
                     replaces multiple spaces with a single one
# Returns     :   a string
# Parameters  :   a string
# Throws      :
# See Also    :
# Comments : 
********************************************************************** */
// Regular expressions for normalizing white space.
var vjs_whiteSpaceEnds = new RegExp("^\\s*|\\s*$", "g");
var vjs_whiteSpaceMultiple = new RegExp("\\s\\s+", "g");
function vjs_trimWhitespace (s) {
    s = s.replace(vjs_whiteSpaceMultiple, " ");  // Collapse any multiple whites space.
    s = s.replace(vjs_whiteSpaceEnds, "");   // Remove leading or trailing white space.
    return s;
}




/* *********************************************************************
   # Usage       :   vjs_elChildOfEl
   # Purpose     :   checks to see if an element is a child of the 2nd param
   # Returns     :   boolean true or false
   # Parameters  :   two elements the first is checked to be a child of first
                        checkEqual - boolean to tell us to check if the two elements are equal
   # Throws      :
   # See Also    :
   # Comments :   
   ********************************************************************** */
function vjs_elChildOfEl (elChild, elParent, checkEqual ) {

    // Make sure we have elements
    if (!elChild || !elParent)
	return false;

    // if we want to hit on cases they are equal do so here.
    if (checkEqual && (elChild === elParent))
	return true;


    // iterate up the dom looking for a parent of the original node
    // that matches the parent.
    while ((elChild = elChild.parentNode)) {
	if (elChild === elParent) {
	    return true;
	}
    }
	
    return false;
}


/* *********************************************************************
   # Usage       :   vjs_elementOverflows
   # Purpose     :   checks if an element overflows its container
   # Returns     :   boolean
   # Parameters  :   element and direction (x or y or blank (defaults to both)).
   # Throws      :
   # See Also    :
   # Comments :   http://stackoverflow.com/questions/7668636/check-with-jquery-if-div-has-overflowing-elements
   ********************************************************************** */
function vjs_elementOverflows (element, direction) {
    direction = direction || '';

    var check_x = (direction === 'x' || direction === '')?true:false;
    var check_y = (direction === 'y' || direction === '')?true:false;
    
    if ((check_y && (element.offsetHeight < element.scrollHeight)) ||
	(check_x && (element.offsetWidth < element.scrollWidth))) {
	return true;
    }
    return false;
}


/* *********************************************************************
   # Usage       :   vjs_triggerEvent
   # Purpose     :   runs an event on an element.
   # Returns     :   none
   # Parameters  :   element and type of event.
   # Throws      :
   # See Also    :
                        // For a full list of event types:
                        // https://developer.mozilla.org/en-US/docs/Web/API/document.createEvent
   ********************************************************************** */
function vjs_triggerEvent (element, type) {
    if (!element || !type) {
	return false;
    }
    
    var event = document.createEvent('HTMLEvents');
    event.initEvent(type, true, false);
    element.dispatchEvent(event);
    return true;
}


/* *********************************************************************
   # Usage       :   polyfill for String.prototype.includes
   # Purpose     :   %$#@ing ie 11 doesn't support includes
   # Returns     :   
   # Throws      :
   # See Also    :   https://github.com/mathiasbynens/String.prototype.includes/blob/master/includes.js
   ********************************************************************** */
/*! https://mths.be/includes v1.0.0 by @mathias */
if (!String.prototype.includes) {
    (function() {
	'use strict'; // needed to support `apply`/`call` with `undefined`/`null`
	var toString = {}.toString;
	var defineProperty = (function() {
	    // IE 8 only supports `Object.defineProperty` on DOM elements
	    try {
		var object = {};
		var $defineProperty = Object.defineProperty;
		var result = $defineProperty(object, object, object) && $defineProperty;
	    } catch(error) {}
	    return result;
	}());
	var indexOf = ''.indexOf;
	var includes = function(search) {
	    if (this == null) {
		throw TypeError();
	    }
	    var string = String(this);
	    if (search && toString.call(search) == '[object RegExp]') {
		throw TypeError();
	    }
	    var stringLength = string.length;
	    var searchString = String(search);
	    var searchLength = searchString.length;
	    var position = arguments.length > 1 ? arguments[1] : undefined;
	    // `ToInteger`
	    var pos = position ? Number(position) : 0;
	    if (pos != pos) { // better `isNaN`
		pos = 0;
	    }
	    var start = Math.min(Math.max(pos, 0), stringLength);
	    // Avoid the `indexOf` call if no match is possible
	    if (searchLength + start > stringLength) {
		return false;
	    }
	    return indexOf.call(string, searchString, pos) != -1;
	};
	if (defineProperty) {
	    defineProperty(String.prototype, 'includes', {
		'value': includes,
		'configurable': true,
		'writable': true
	    });
	} else {
	    String.prototype.includes = includes;
	}
    }());
}

/* *********************************************************************
   # Usage       :   polyfill for String.trim
   # Purpose     :   
   # Returns     :   
   # Throws      :
   # See Also    :   https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/Trim
   ********************************************************************** */
 if (!String.prototype.trim) {
  String.prototype.trim = function () {
    return this.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');
  };
}

/* *********************************************************************
   # Usage       :   polyfill for :scope on querySelector
   # Purpose     :   allows us to use the current :scope as a selector
   # Returns     :   
   # Throws      :
   # See Also    :
                        // For a full list of event types:
                        // https://developer.mozilla.org/en-US/docs/Web/API/document.createEvent
 :scope for queryselector polyfill
 http://stackoverflow.com/posts/17989803/revisions


 for example
     var div_closer = div.querySelector(':scope > .closer');
     var sub_hrefs = el.querySelectorAll(':scope > div > ul > li > a');
 
 ********************************************************************** */
(function(doc, proto) {
  try { // check if browser supports :scope natively
    doc.querySelector(':scope body');
  } catch (err) { // polyfill native methods if it doesn't
    ['querySelector', 'querySelectorAll'].forEach(function(method) {
      var nativ = proto[method];
      proto[method] = function(selectors) {
        if (/(^|,)\s*:scope/.test(selectors)) { // only if selectors contains :scope
          var id = this.id; // remember current element id
          this.id = 'ID_' + Date.now(); // assign new unique id
          selectors = selectors.replace(/((^|,)\s*):scope/g, '$1#' + this.id); // replace :scope with #ID
          var result = doc[method](selectors);
          this.id = id; // restore previous id
          return result;
        } else {
          return nativ.call(this, selectors); // use native code for other selectors
        }
      };
    });
  }
})(window.document, Element.prototype);




/* *********************************************************************
 * Takes two objects and merges the properties returning a new object. (shallow)
 * @param{Object} first - The first object to merge properties from.
 * @param{Object} second - The second object to merge properties from. This object properties are preferred.
 * @returns {Object} A new object with the properties of first and second with second's preferred.
 ********************************************************************* */
function vjs_mergeObjects( first, second ) {
    var result = {};

    for (var prop in first) {
        if (first.hasOwnProperty(prop)) {
            result[prop] = first[prop];
        }
    }

    for (var prop in second) {
        if (second.hasOwnProperty(prop)) {
            result[prop] = second[prop];
        }
    }

    return result;
}

/* *********************************************************************
 * throttles the ability of a event tracker to operate, like resize or on scroll
 * @param{Object} callback - the function
 * @param{Object} limit - The time in ms between runs
 * http://sampsonblog.com/749/simple-throttle-function
 ********************************************************************* */
function vjs_throttle(callback, limit, scope) {
    var wait = false;                  // Initially, we're not waiting
    return function () {               // We return a throttled function
	var context = scope || this,
	    args = arguments; 
        if (!wait) {                   // If we're not waiting
            callback.apply(context, args);           // Execute users function
            wait = true;               // Prevent future invocations
            setTimeout(function () {   // After a period of time
                wait = false;          // And allow future invocations
            }, limit);
        }
    };
}

                       

/* *********************************************************************
   # Usage       :   polyfill "indexOf"
   # Purpose     :   allows us to use: array.indexOf(value)
   # Returns     :   an integer and -1 if not found.
   # Throws      :
   # See Also    :  via https://gist.github.com/revolunet/1908355
 ********************************************************************** */
if (!Array.prototype.indexOf)
{
  Array.prototype.indexOf = function(elt /*, from*/)
  {
    var len = this.length >>> 0;
    var from = Number(arguments[1]) || 0;
    from = (from < 0)
         ? Math.ceil(from)
         : Math.floor(from);
    if (from < 0)
      from += len;

    for (; from < len; from++)
    {
      if (from in this &&
          this[from] === elt)
        return from;
    }
    return -1;
  };
}


/* *********************************************************************
   # Usage       :   polyfill "getSuperset"
   # Purpose     :   returns only strings that are not proper substrings of
   #                others in the array
   #                [ "j", "joh","john", "john", "rex"] =>  ["john","rex"
   #                    
   # Returns     :   the array
   # Throws      :
 ********************************************************************** */
Array.prototype.getSuperset = function() {
   var u = {}, a = [];
   for(var i = 0, l = this.length; i < l; ++i){
       var is_ok = true;

       // test item i vs each other item.
       for(var j = 0; j < l; ++j){

	   // j !== i and i is a proper substring of j
	   if ((i !== j) && (this[j].indexOf(this[i]) === 0)  && (this[j] !== this[i])) {
	       is_ok = false;
	   }
	   // j !== i and the strings are equal and i < j
	   else if ((i < j) && (this[j] === this[i]) ) {
	       is_ok = false;
	   }
       }

       if (is_ok) {
	   a.push(this[i]);
       }
   }
   return a;
}


/* *********************************************************************
   # Usage       :   polyfill "outerHTML"
   # Purpose     :   allows us to use: element.outerHTML for ie
   # Returns     :   a string
   # Throws      :
   # See Also    :
  outerHTML.js    Cross-browser full HTMLElement.outerHTML implementation.
  2011-11-14,   https://gist.github.com/eligrey/1044128
  By Eli Grey, http://eligrey.com
  Public Domain.
  NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.
 ********************************************************************** */
if (typeof document !== "undefined" && !("outerHTML" in document.createElementNS("http://www.w3.org/1999/xhtml", "_"))) {
    (function(view) {
	"use strict";
	
	var
	container = document.createElementNS("http://www.w3.org/1999/xhtml", "_")
	, elem_proto = (view.HTMLElement || view.Element).prototype
	, xml_serializer = new XMLSerializer
	, outerHTML_getter = function() {
	    var
	    node = this
	    , html
	    ;
	    if (document.xmlVersion) {
		return xml_serializer.serializeToString(node);
	    } else {
		container.appendChild(node.cloneNode(false));
		html = container.innerHTML.replace("><", ">" + node.innerHTML + "<");
		container.innerHTML = "";
		return html;
	    }
	}
	, outerHTML_setter = function(html) {
	    var
	    node = this
	    , parent = node.parentNode
	    , child
	    ;
	    if (parent === null) {
		DOMException.code = DOMException.NOT_FOUND_ERR;
		throw DOMException;
	    }
	    container.innerHTML = html;
	    while ((child = container.firstChild)) {
		parent.insertBefore(child, node);
	    }
	    parent.removeChild(node);
	}
	;
	
	if (Object.defineProperty) {
	    var outerHTML_prop_desc = {
		get: outerHTML_getter
		, set: outerHTML_setter
		, enumerable: true
		, configurable: true
	    };
	    try {
		Object.defineProperty(elem_proto, "outerHTML", outerHTML_prop_desc);
	    } catch (ex) { // IE 8 doesn't support enumerable:true
		if (ex.number === -0x7FF5EC54) {
		    outerHTML_prop_desc.enumerable = false;
		    Object.defineProperty(elem_proto, "outerHTML", outerHTML_prop_desc);
		}
	    }
	} else if (Object.prototype.__defineGetter__ && Object.prototype.__defineSetter__) {
	    elem_proto.__defineGetter__("outerHTML", outerHTML_getter);
	    elem_proto.__defineSetter__("outerHTML", outerHTML_setter);
	}	
    }(self));   
}

/* *********************************************************************
   # Usage       :   polyfill "matches"
   # Purpose     :   allows us to use: element.matches(selector)
   # Returns     :   a boolean
   # Throws      :
   # See Also    :   NOTE THAT is is like element.matches('.class_name')
 ********************************************************************** */
if (Element && !Element.prototype.matches) {
    var proto = Element.prototype;
    proto.matches = proto.matchesSelector ||
        proto.mozMatchesSelector || proto.msMatchesSelector ||
        proto.oMatchesSelector || proto.webkitMatchesSelector;
}

/* *********************************************************************
   # Usage       :   polyfill "includes"
   # Purpose     :   allows us to use: array.includes(value)
   # Returns     :   a boolean
   # Throws      :   var boolean = array.includes(searchElement[, fromIndex])
   # See Also    : https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes
 ********************************************************************** */
if (!Array.prototype.includes) {
    Array.prototype.includes = function(searchElement /*, fromIndex*/ ) {
	'use strict';
	var O = Object(this);
	var len = parseInt(O.length, 10) || 0;
	if (len === 0) {
	    return false;
	}
	var n = parseInt(arguments[1], 10) || 0;
	var k;
	if (n >= 0) {
	    k = n;
	} else {
	    k = len + n;
	    if (k < 0) {k = 0;}
	}
	var currentElement;
	while (k < len) {
	    currentElement = O[k];
	    if (searchElement === currentElement) { // NaN !== NaN
		return true;
	    }
	    k++;
	}
	return false;
    };
}

/* *********************************************************************
   # Usage       :   vjs_closest
   # Purpose     :   finds the first containing element of el matching selector
   # Returns     :   an element or null.
   # parameters  :      element, selector
   # Throws      :
   # See Also    :

  Finds the closest element of the type specified
  @param{Element} el - node to search from
  @param{String} selector - selector to match closest against

 ********************************************************************** */
function vjs_closest(el, selector) {
    var parentNode = el, matches;
    while (
        // document has no .matches
        (matches = parentNode && parentNode.matches) &&
            !parentNode.matches(selector)
    ) {
        parentNode = parentNode.parentNode;
    }
    return matches ? parentNode : null;
}

/* *********************************************************************
   # Usage       :   vjs_removeChild()
   # Purpose     :   contains the check to see if the node exists before trying to delete it
   # Returns     :   boolean if a node was removed
   # parameters  :   obj (this can be a string = id) or a dom element.
   # Throws      :
   # See Also    :  vjs_isNode, vjs_isElement

 ********************************************************************** */
function vjs_removeChild(obj) {
    console.log('   ### vjs_removeChild') ;

    // are we getting a string?
    if (typeof obj === "string") {
	//console.log('   ### removing child string:'.concat(obj));
	var el = document.getElementById(obj);
	if (el) {
		 
	    el.parentNode.removeChild(el);
	    return true;
	}
    }
    // are we getting a dom element.
    else if ((vjs_isElement(obj) || vjs_isNode(obj)) && obj.parentNode ) {
	// console.log('    ### removing child object:');
	// console.log(obj);
	obj.parentNode.removeChild(obj);
	return true;	
    }
    return false;
}

/* *********************************************************************
   # Usage       :   vjs_randomString or randomNumber
   # Purpose     :   returns a string of given length either numeric or alpha-numeric
   # Returns     :   a string or ''
   # parameters  :    stringLength, optionally a set of chars
   # Throws      :
   # See Also    :

 ********************************************************************** */
function vjs_randomNumber(stringLength) { return vjs_randomString(stringLength,'0123456789'); }
function vjs_randomString(stringLength, charSet) {

    if (!charSet) {
	    charSet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    }
    if ((charSet.length < 1) || (parseInt(stringLength) <= 0)) {
	return '';
    }

    var text = "";
    for( var i = 0, max = parseInt(stringLength); i < max; i++ ) {
        text += charSet.charAt(Math.floor(Math.random() * charSet.length));
    }    
    return text;

}

/* *********************************************************************
   # Usage       :   vjs_wrapInElementOfType
   # Purpose     :   takes an elements and wraps it within another of a type given
   # Returns     :    the outer element
   # parameters  :    element to wrap, type of wrapper, id, class for wrapper
   # Throws      :
   # See Also    :

 ********************************************************************** */
function vjs_wrapInElementOfType(el, wrapper_type, wrapper_id, wrapper_class) {

    // create wrapper container
    var wrapper = document.createElement(wrapper_type || 'div');

    // insert wrapper before el in the DOM tree
    el.parentNode.insertBefore(wrapper, el);

    // move el into wrapper
    wrapper.appendChild(el);

    wrapper.id = wrapper_id;
    wrapper.className = wrapper_class;

    return wrapper;
}


/* *********************************************************************
   # Usage       :   vjs_getUrlParameter
   # Purpose     :   returns the value of a query parameter given
   # Returns     :    a string
   # parameters  :    name of query param
   # Throws      :
   # See Also    :  https://davidwalsh.name/query-string-javascript

 ********************************************************************** */
/*
  this is included in modernizr as well, so this is just redundant. 
function vjs_getUrlParameter(name) {
    name = name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');
    var regex = new RegExp('[\\?&]' + name + '=([^&#]*)');
    var results = regex.exec(location.search);
    return results === null ? '' : decodeURIComponent(results[1].replace(/\+/g, ' '));
}
*/

/* *********************************************************************
   # Usage       :   vjs_insertAfter
   # Purpose     :   takes an element and inserts after referenceNode it within another of a type given
   # Returns     :    the outer element
   # parameters  :    element to wrap, type of wrapper, id, class for wrapper
   # Throws      :
   # See Also    :

 ********************************************************************** */
function vjs_insertAfter(newEl, afterEl) {
    afterEl.parentNode.insertBefore(newEl, afterEl.nextSibling);
}

/* *********************************************************************
   # Usage       :   vjs_nextMatchingSibling
   # Purpose     :   takes an element and select and finds the first sibling to match selector.
   # Returns     :    an element
   # parameters  :    element, selector
   # Throws      :
   # See Also    :

 ********************************************************************** */
function vjs_nextMatchingSibling(el, selector) {

    // Get the next sibling element
    var sibling = el.nextElementSibling;
    
    // If there's no selector, return the first sibling
    if (!selector) return sibling;
    
    // If the sibling matches our selector, use it
    // If not, jump to the next sibling and continue the loop
    while (sibling) {
	if (sibling.matches(selector)) return sibling;
	sibling = sibling.nextElementSibling;
    }
}


/* *********************************************************************
   # Usage       :   vjs_dateToYMD
   # Purpose     :   takes a date and returns the YYYY-MM-DD value
   # Returns     :    a string
   # parameters  :    a date object
   # Throws      :
   # See Also    :

 ********************************************************************** */
function vjs_dateToYMD(date) {

    if (!date) { return ''; }
    
    var d = date.getDate();
    var m = date.getMonth() + 1; //Month from 0 to 11
    var y = date.getFullYear();
    return '' + y + '-' + (m<=9 ? '0' + m : m) + '-' + (d <= 9 ? '0' + d : d);
}


/* *********************************************************************
 NOTES:  instead of .append you can use.

 el.insertAdjacentHTML('beforeend', html_value);

 Visualization of position names

<!-- beforebegin -->
<p>
<!-- afterbegin -->
foo
<!-- beforeend -->
</p>
<!-- afterend -->
Note: The beforebegin and afterend positions work only if the node is in a tree and has an element parent.

 Example
// <div id="one">one</div>
var d1 = document.getElementById('one');
d1.insertAdjacentHTML('afterend', '<div id="two">two</div>');

// At this point, the new structure is:
// <div id="one">one</div><div id="two">two</div>

 ********************************************************************* */


/* ### FILE:libs-mod/tipsy.js    */
// tipsy, facebook style tooltips for jquery
// version 1.0.0a
// (c) 2008-2010 jason frame [jason@onehackoranother.com]
// releated under the MIT license

// remove the tipsy element before we leave as this could
// occassionally show up when the back button is used.
function vjs_TipsyDestroy(element) {
    console.log('### this is unload remove the tipsy elements');
    var tipsy_el = document.querySelector('.tipsy');
    if (tipsy_el) {
	vjs_removeChild(tipsy_el);
    }
    //alert('this is unload');
}
vjs_addEvent(window, "beforeunload",  vjs_TipsyDestroy, false);

function vjs_Tipsy(element) {
    this.element = element;
    this.enabled = true;
}

var tipsy_delay = 140;

vjs_Tipsy.prototype = {

    //  FUNCTION
    show: function() {
        var title = this.title;
        if (title && this.enabled) {
            var $tip = this.tip();

            sr_record_analytics_event('Tool','view:tooltip',this.title);
            
	    
	    var tipInner = $tip.querySelector('.tipsy-inner');
	    tipInner.innerHTML = title;	    
	    $tip.className = 'tipsy'; // reset classname in case of dynamic gravity

	    if ($tip.parentNode) {
		$tip = $tip.parentNode.removeChild($tip);
	    }
	    $tip.style.top = '0px';
	    $tip.style.left = '0px';
	    $tip.style.visibility = 'hidden';
	    $tip.style.display = 'block';
	    document.body.appendChild($tip);

	    var pos = vjs_offset(this.element);

	    pos.width = this.element.offsetWidth;
            pos.height = this.element.offsetHeight;
            
            var actualWidth = $tip.offsetWidth, actualHeight = $tip.offsetHeight;
	    
	    // returns either SE or SW
	    var gravity = tipsy_getGravity(this.element);            
            var tp = {top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2};
	    
            if (gravity.charAt(1) == 'w') {
                tp.left = pos.left + pos.width / 2 - 15;
            } else {
                tp.left = pos.left + pos.width / 2 - actualWidth + 15;
            }
	    $tip.style.top = tp.top + 'px';
	    $tip.style.left = tp.left + 'px';
	    vjs_addClass($tip,'tipsy-'.concat(gravity));
	    $tip.style.visibility = 'visible';
	    this.$tip = $tip;
        }
    },
    
    //  FUNCTION
    hide: function() {
	if (this.$tip && this.$tip.parentNode) {
            this.$tip.parentNode.removeChild(this.$tip);
	}
    },
    
    //  FUNCTION
    getTitle: function() {
        var el = this.element;
	var title = vjs_getAttr(el, 'data-tip');
	if (!title) {
	    title = vjs_getAttr(el,'tip');
	}
        title = ('' + title).replace(/(^\s*|\s*$)/, "");
        return title || __sr_text_sorry_no_info;
    },
    
    //  FUNCTION
    tip: function() {

        if (!this.$tip) {
	    var tip = document.createElement("div");
	    vjs_addClass(tip,"tipsy");

	    var tip_arrow = document.createElement("div");
	    vjs_addClass(tip_arrow,"tipsy-arrow");
	    var tip_inner = document.createElement("div");
	    vjs_addClass(tip_inner,"tipsy-inner");

	    tip.appendChild(tip_arrow);
	    tip.appendChild(tip_inner);

	    this.$tip = tip;
	}

        return this.$tip;
    },
    
    //  FUNCTION
    enable: function() { this.enabled = true; },

    //  FUNCTION
    disable: function() { this.enabled = false; },

    //  FUNCTION
    toggleEnabled: function() { this.enabled = !this.enabled; }
};

function tipsy_setTip (el) {
    
    
    function get(ele) {
        if (!ele.tipsy) {
            ele.tipsy = new vjs_Tipsy(ele);
	    ele.tipsy.title = ele.tipsy.getTitle();
        }

        return ele.tipsy;
    }
    
    function enter() {
        var tipsy = get(this);
        tipsy.hoverState = 'in';
        setTimeout(function() {
	    if (tipsy.hoverState == 'in') tipsy.show(); }, tipsy_delay);
    };
    
    function leave() {
        var tipsy = get(this);
        tipsy.hoverState = 'out';
        setTimeout(function() { if (tipsy.hoverState == 'out') tipsy.hide(); }, tipsy_delay);
    };


    get(el);

    vjs_addEvent(el,"mouseenter", enter, false);
    vjs_addEvent(el,"mouseleave", leave, false);
    return el;
    
};


var tipsy_getGravity = function(el) {
    var tip = vjs_offset(el);
    return tip.left > (vjs_scrollLeft() + window.innerWidth / 2)	? 'se' : 'sw';
};



/* ### FILE:libs-mod/jsModal.js    */

/*!
 * jsModal - A pure JavaScript modal dialog engine v1.0d
 * http://jsmodal.com/
 *
 * Author: Henry Rune Tang Kai <henry@henrys.se>
 *
 * (c) Copyright 2013 Henry Tang Kai.
 *
 * License: http://www.opensource.org/licenses/mit-license.php
 *
 * Date: 2013-7-11
 */
/* herehere, make the elements resizeable. */

var Modal = (function () {
    "use strict";
    /*global document: false */
    /*global window: false */
    
    // create object method
    var xPosition = 0,
	yPosition = 0,
	differenceX = 0,
	differenceY = 0;
    var method = {},
        settings = {},
        modalContainer = document.createElement('div'),
        modalHeader = document.createElement('div'),
        modalContent = document.createElement('div'),
        modalLoading = document.createElement('div'),
        modalClose = document.createElement('div'),	
        modalOverlay = document.createElement('div'),	
        centerModal,	
        closeModalEvent,	
        defaultSettings = {
            width: 'auto',
            height: 'auto',
            params: {},
            hideClose: false,
            draggable: false,
            openCallback: false,
            loadCallback: false,
            closeCallback: false,
            showOverlay: false,
	    pin: false
        };
    
    // Open the modal
    method.is_open = false;
    method.open = function (parameters) {
	console.log('   ### modal: fire method.open');
        settings.width = parameters.width || defaultSettings.width;
        settings.hug = parameters.hug || parameters.params.hug || '',
        settings.height = parameters.height || defaultSettings.height;
        settings.hideClose = parameters.hideClose || defaultSettings.hideClose;
        settings.draggable = parameters.draggable || defaultSettings.draggable;
        settings.closeCallback = parameters.closeCallback || parameters.params.closeCallback || defaultSettings.closeCallback;
        settings.openCallback = parameters.openCallback || parameters.params.openCallback || defaultSettings.openCallback;
        settings.loadCallback = parameters.loadCallback || parameters.params.loadCallback || defaultSettings.loadCallback;
        settings.showOverlay = parameters.showOverlay || defaultSettings.showOverlay;
        settings.pin  = parameters.pin || defaultSettings.pin;
        centerModal = function () {
	    console.log('   ### modal: fire modal_centerModal');
            method.center(parameters);
        };
	
        if (parameters.content && !parameters.ajaxContent) {
            modalContent.innerHTML = parameters.content;
        }
	else if (parameters.ajaxContent && !parameters.content) {
	    if (settings.showOverlay) {
		modalOverlay.style.visibility = 'visible';
	    }
	    modalContainer.style.visibility = 'visible';
	    method.is_open = true;
            modalContent.innerHTML = '';
            vjs_addClass(modalLoading,'loading');

	    console.log('   ### modal: call vjs_Ajax');
	    vjs_Ajax('get',parameters.ajaxContent,{},
		     function insertAjaxResult(ajaxResult) {
			 vjs_removeClass(modalLoading,'loading');
			 if (settings.showOverlay) {
			     modalOverlay.style.visibility = 'visible';
			 }
			 modalContainer.style.visibility = 'visible';
			 method.is_open = true;
			 modalContent.innerHTML = ajaxResult;
			 Modal.center({});
			 if (settings.loadCallback) {
			     settings.loadCallback();
			 }
		     },
		     null, null, false);
	    console.log('   ### modal: call vjs_Ajax:out');
        }
	else {
            modalContent.innerHTML = '';
        }
	
        modalContainer.style.width = settings.width;
        modalContainer.style.height = settings.height;
        modalContainer.style.maxWidth = '94%';
	if (settings.pin) {
		modalContainer.style.position = 'fixed';
	}
	
        method.center(parameters);
	
        if (settings.showOverlay) {
            modalOverlay.style.visibility = 'visible';
        }
        modalContainer.style.visibility = 'visible';
	method.is_open = true;

	// did have this as onkeypress, but that doesn't register
	// an escape on every browser.
        document.onkeydown = function (e) {
	    console.log('   ### modal: fire modal document.onkeydown1');
            if (e.keyCode === 27) {
                method.close();
            }
        };
	
        modalClose.onclick = function () {
	    console.log('   ### modal: fire modalClose.onclick');
	    // set the glabal what was clicked to null.
	    sr_display_showPopup_last_clicked = null;

            if (!settings.hideClose) {
                method.close();
            } else {
                return false;
            }
	    return true;
        };
        modalOverlay.onclick = function () {
	    console.log('   ### modal: fire modalOverlay.onclick');
            method.close();
	    return true;
        };
	
        if (window.addEventListener) {
            window.addEventListener('resize', centerModal, false);
        } else if (window.attachEvent) {
            window.attachEvent('onresize', centerModal);
        }
	
        if (settings.draggable) {
            modalHeader.style.cursor = 'move';
            modalHeader.onmousedown = function (e) {
		console.log('   ### modal: fire modalHeader.onmousedown draggable');
                method.drag(e);
                return false;
            };
        } else {
            modalHeader.onmousedown = function () {
		console.log('   ### modal: fire modalHeader.onmousedown not draggable');
                return false;
            };
        }
        if (settings.openCallback) {
            settings.openCallback();
        }
    };

    // fix for event listeners.
    method.omm =  function (e) {
	console.log('   ### modal: fire modal method.onm');
        xPosition = (window.event !== undefined) ? window.event.clientX : e.clientX;
        yPosition = (window.event !== undefined) ? window.event.clientY : e.clientY;
	modalContainer.style.left = ((xPosition - differenceX) > 0) ? (xPosition - differenceX) + 'px' : 0;
        modalContainer.style.top = ((yPosition - differenceY) > 0) ? (yPosition - differenceY) + 'px' : 0;	
    };
    method.omu =  function (e) {
	console.log('   ### modal: fire modal method.omu');
	document.removeEventListener('mousemove',method.omm);
	document.removeEventListener('mouseup',method.omu);
    };
	
    // Drag the modal    
    method.drag = function (e) {
	console.log('   ### modal: fire modal method.drag');

	// if the modal is fixed, and we are dragging, we want to
	// switch it to position:absolute, but that is relative to the
	// page rather than the browser window, so to prevent the
	// modal from moving to off-screen due to this change in
	// context, we have to add in the current scroll depth to make
	// sure the modal doesn't "move" from the user's perspective.
	if (modalContainer.style.position === 'fixed') {
	    var top = parseInt(modalContainer.style.top);
	    modalContainer.style.position = 'absolute';
	    modalContainer.style.top = (top + vjs_scrollTop()) + 'px';
	}

	// note that we've moved this modal, so we don't want to move it later when it's updated.
	modalContainer.moved = true;

	xPosition = (window.event !== undefined) ? window.event.clientX : e.clientX,
        yPosition = (window.event !== undefined) ? window.event.clientY : e.clientY,
        differenceX = xPosition - modalContainer.offsetLeft,
        differenceY = yPosition - modalContainer.offsetTop;


	document.addEventListener('mousemove',method.omm);
	document.addEventListener('mouseup',method.omu);
    };
    // set the modal to loading and optionally freeze it's size.
    method.loading = function (freezeSize) {
	if (freezeSize) {
	    method.freezeSize();
	}

	// add the loading class.
    	var content = document.getElementById('modal-content');
	vjs_addClass(content,'loading');
    };
    
    // Freeze the modal's size for if we add a loading indicator we
    // don't want a janky resize of the box
    method.freezeSize = function () {
	var container = document.getElementById('modal-container');
	if (!container) {
	    return;
	}
	var padding = 16;
	var height = vjs_getHeight(container) - 2*padding;
	var width = vjs_outerWidth(container) - 2*padding;
	var style_attr = vjs_getAttr(container,'style');
	vjs_setAttr(container, 'style', style_attr.concat('; ', 'height:', height,'px!important; ', 'width:', width,'px!important; padding:',padding,'px;'));
	
    };
    
    // Close the modal
    method.close = function () {
	console.log('   ### modal: fire modal method.close');	
	if (!method.is_open) return false;
	sr_display_modalOpen = false;

	// reset moved here.
	modalContainer.moved = false;

	// empty the container.
	modalContent.innerHTML = '';
        modalOverlay.style.visibility = 'hidden';
        modalContainer.style.visibility = 'hidden';
	method.is_open = false;
        // modalOverlay.style.cssText = '';
        // modalOverlay.setAttribute('style', '');
        // modalContainer.setAttribute('style', '');
        //  modalContainer.style.cssText = '';
        //  modalHeader.style.cursor = 'default';
        //  modalClose.setAttribute('style', '');
        //  modalClose.style.cssText = '';
	
        if (closeModalEvent) {
            window.clearTimeout(closeModalEvent);
        }
	
        if (settings.closeCallback) {
            settings.closeCallback();
        }
	
        if (window.removeEventListener) {
            window.removeEventListener('resize', centerModal, false);
        } else if (window.detachEvent) {
            window.detachEvent('onresize', centerModal);
        }
	console.log('   ### modal: exiting method.close');
	return false;
    };
    
    // Center the modal in the viewport
    method.center = function (parameters) {
	console.log('   ### modal: fire modal method.center');
	console.log(settings);

	// if the modal has been dragged, we don't want to re-center
	if (modalContainer.moved) { return false; }
	
	var documentHeight = Math.max(document.body.scrollHeight, document.documentElement.scrollHeight),
	    
            modalWidth = Math.max(modalContainer.clientWidth, modalContainer.offsetWidth),
            modalHeight = Math.max(modalContainer.clientHeight, modalContainer.offsetHeight),
	    
            browserWidth = 0,
            browserHeight = 0,
	    
            amountScrolledX = 0,
            amountScrolledY = 0;
	
        if (typeof (window.innerWidth) === 'number') {
            browserWidth = window.innerWidth;
            browserHeight = window.innerHeight;
        } else if (document.documentElement && document.documentElement.clientWidth) {
            browserWidth = document.documentElement.clientWidth;
            browserHeight = document.documentElement.clientHeight;
        }
	
        if (typeof (window.pageYOffset) === 'number') {
            amountScrolledY = window.pageYOffset;
            amountScrolledX = window.pageXOffset;
        } else if (document.body && document.body.scrollLeft) {
            amountScrolledY = document.body.scrollTop;
            amountScrolledX = document.body.scrollLeft;
        } else if (document.documentElement && document.documentElement.scrollLeft) {
            amountScrolledY = document.documentElement.scrollTop;
            amountScrolledX = document.documentElement.scrollLeft;
        }

	if (settings.pin) {
 // we want to pin this to the current view portal
 // so just ignore the scroll stuff here
		modalContainer.style.top = (browserHeight / 2) - (modalHeight / 2) + 'px';
	} else {
		modalContainer.style.top = amountScrolledY + (browserHeight / 2) - (modalHeight / 2) + 'px';
	}

	if (Modernizr.constrained) {
            modalContainer.style.left =  '0px';
	}
	else {
	    if (settings.pin) {
            	modalContainer.style.left = (browserWidth / 2) - (modalWidth / 2) + 'px';
            } else {
            	modalContainer.style.left = amountScrolledX + (browserWidth / 2) - (modalWidth / 2) + 'px';
	    }
	}

	if (!settings.hug) {
	    // no hugging here.
	}
	else if (settings.hug === 'right') {
            modalContainer.style.left = '';
            modalContainer.style.right = '0';
	}
	else if (settings.hug === 'left') {
            modalContainer.style.left = '0';
            modalContainer.style.right = '';
	}
	// since top and bottom only make sense in a fixed setting, we
	// set the position fixed here.
	else if (settings.hug === 'top') {
            modalContainer.style.top = Modernizr.viewport_height > 750?'100px':'0px';
            modalContainer.style.bottom = '';
	    modalContainer.style.left = '10px';
	    modalContainer.style.position = 'fixed';
	}
	else if (settings.hug === 'bottom') {
            modalContainer.style.bottom = '0';
	    modalContainer.style.right = '0';
            modalContainer.style.top = '';
            modalContainer.style.left = '';
	    modalContainer.style.position = 'fixed';
	}
	
        modalOverlay.style.height = documentHeight + 'px';
        modalOverlay.style.width = '100%';
    };

    /*
    // this has been replaced by using vjs_Ajax up above.
    // Perform XMLHTTPRequest
    method.ajax =
	function (url, successCallback) {

	    var i,
		XMLHttpRequestObject = false,
		XMLHttpRequestObjects = [
                    function () {
			return new window.XMLHttpRequest();  // IE7+, Firefox, Chrome, Opera, Safari
                    },
                    function () {
			return new window.ActiveXObject('Msxml2.XMLHTTP.6.0');
                    },
                    function () {
			return new window.ActiveXObject('Msxml2.XMLHTTP.3.0');
                    },
                    function () {
			return new window.ActiveXObject('Msxml2.XMLHTTP');
                    }
            ];
	    
        for (i = 0; i < XMLHttpRequestObjects.length; i += 1) {
            try {
                XMLHttpRequestObject = XMLHttpRequestObjects[i]();
            } catch (ignore) {
            }
	    
            if (XMLHttpRequestObject !== false) {
                break;
            }
        }
	    
	    
            XMLHttpRequestObject.open('GET', url, true);
            XMLHttpRequestObject.onreadystatechange = function () {
		if (XMLHttpRequestObject.readyState === 4) {
                if (XMLHttpRequestObject.status === 200) {
                    successCallback(XMLHttpRequestObject.responseText);
		} else  {
                    successCallback('<h2>'.concat(__sr_text_we_apologize_server_error, ' (', XMLHttpRequestObject.status,')</h2>'));
		}
	    }
        };	
        XMLHttpRequestObject.send(null);
    };
    */

    
    // Set the id's, append the nested elements, and append the complete modal to the document body
    modalOverlay.setAttribute('id', 'modal-overlay');
    modalContainer.setAttribute('id', 'modal-container');
    modalHeader.setAttribute('id', 'modal-header');
    modalContent.setAttribute('id', 'modal-content');
    modalClose.setAttribute('id', 'modal-close');
    modalClose.setAttribute('class', 'closer');
    modalClose.setAttribute('aria-label', 'Close in-page popup window');
    modalLoading.setAttribute('id', 'modal-loading');
    modalHeader.appendChild(modalClose);
    modalContainer.appendChild(modalHeader);
    modalContainer.appendChild(modalContent);
    modalContainer.appendChild(modalLoading);
    
    modalOverlay.style.visibility = 'hidden';
    modalContainer.style.visibility = 'hidden';
    method.is_open = false;

    if (window.addEventListener) {
        window.addEventListener('load', function () {
            document.body.appendChild(modalOverlay);
            document.body.appendChild(modalContainer);
        }, false);
    } else if (window.attachEvent) {
        window.attachEvent('onload', function () {
            document.body.appendChild(modalOverlay);
            document.body.appendChild(modalContainer);
        });
    }
    
    return method;
}());

/* ### FILE:libs-mod/chosen.native.js    */
var   chosen_events = {};

// Generated by CoffeeScript 1.10.0
(function() {
	var AbstractChosen;
	var chosen_count = 0;
    
	AbstractChosen = (function() {
		function AbstractChosen(form_field, options1) {
			this.form_field = form_field;
			this.options = options1 != null ? options1 : {};
			if (!AbstractChosen.browser_is_supported()) {
				return;
			}
			this.is_multiple = this.form_field.multiple;
			this.set_default_text();
			this.set_default_values();
			this.setup();
			this.set_up_html();
			this.register_observers();
		}

		AbstractChosen.prototype.set_default_values = function() {
			this.click_test_action = (function(_this) {
			return function(evt) {
				return _this.test_active_click(evt);
			};
			})(this);
			this.activate_action = (function(_this) {
			return function(evt) {
				return _this.activate_field(evt);
			};
			})(this);
			this.active_field = false;
			this.mouse_on_container = false;
			this.results_showing = false;
			this.result_highlighted = null;
			this.allow_single_deselect = (this.options.allow_single_deselect != null) && (this.form_field.options[0] != null) && this.form_field.options[0].text === "" ? this.options.allow_single_deselect : false;
			this.disable_search_threshold = this.options.disable_search_threshold || 0;
			this.disable_search = this.options.disable_search || false;
			this.enable_split_word_search = this.options.enable_split_word_search != null ? this.options.enable_split_word_search : true;
			// Default was false, but changed this to true to handle searches like 'West Vir', before it would fail on the space
			// https://stackoverflow.com/questions/19061947/chosen-jquery-plugin-search-with-spaces
			this.search_contains = this.options.search_contains || true;
			this.single_backstroke_delete = this.options.single_backstroke_delete != null ? this.options.single_backstroke_delete : true;
			this.max_selected_options = this.options.max_selected_options || Infinity;
			this.inherit_select_classes = this.options.inherit_select_classes || false;
			this.display_selected_options = this.options.display_selected_options != null ? this.options.display_selected_options : true;
			return this.display_disabled_options = this.options.display_disabled_options != null ? this.options.display_disabled_options : true;
		};

		AbstractChosen.prototype.set_default_text = function() {
			if (this.form_field.getAttribute("data-placeholder")) {
				this.default_text = this.form_field.getAttribute("data-placeholder");
			} else if (this.is_multiple) {
				this.default_text = this.options.placeholder_text_multiple || this.options.placeholder_text || AbstractChosen.default_multiple_text;
			} else {
				this.default_text = this.options.placeholder_text_single || this.options.placeholder_text || AbstractChosen.default_single_text;
			}
			return this.results_none_found = this.form_field.getAttribute("data-no_results_text") || this.options.no_results_text || AbstractChosen.default_no_result_text;
		};

		AbstractChosen.prototype.mouse_enter = function() {
			return this.mouse_on_container = true;
		};

		AbstractChosen.prototype.mouse_leave = function() {
			return this.mouse_on_container = false;
		};

		AbstractChosen.prototype.input_focus = function(evt) {
			if (this.is_multiple) {
				if (!this.active_field) {
					return setTimeout(((function(_this) {
					return function() {
						return _this.container_mousedown();
					};
					})(this)), 50);
				}
				} else {
				if (!this.active_field) {
					return this.activate_field();
				}
			}
			return false;
		};

		AbstractChosen.prototype.input_blur = function(evt) {
			if (!this.mouse_on_container) {
				this.active_field = false;
				return setTimeout(((function(_this) {
					return function() {
					return _this.blur_test();
					};
				})(this)), 100);
			}
			return false;
		};

		AbstractChosen.prototype.results_option_build = function(options) {
			var content, data, i, len, ref;
			content = '';
			ref = this.results_data;
			for (i = 0, len = ref.length; i < len; i++) {
				data = ref[i];
				content += this.result_add_option(data);

				if (options != null ? options.first : void 0) {
					if (data.selected && this.is_multiple) {
						this.choice_build(data);
					} else if (data.selected && !this.is_multiple) {
						this.single_set_selected_text(data.text);
					}
				}
				data.html_decoded = data.html.unidecode();
				data.text_decoded = data.text.unidecode();
			}
			return content;
		};

		AbstractChosen.prototype.result_add_option = function(option) {
			var classes, option_el;
			if (!option.search_match) {
				return '';
			}
			if (!this.include_option_in_results(option)) {
				return '';
			}
			classes = [];
			if (!option.disabled && !(option.selected && this.is_multiple)) {
				classes.push("active-result");
			}
			if (option.disabled && !(option.selected && this.is_multiple)) {
				classes.push("disabled-result");
			}
			if (option.selected) {
				classes.push("result-selected");
			}
			if (option.classes !== "") {
				classes.push(option.classes);
			}
			option_el = document.createElement("li");
			option_el.className = classes.join(" ");
			option_el.style.cssText = option.style;
			option_el.setAttribute("data-option-array-index", option.array_index);
			option_el.innerHTML = option.search_text_raw;
			return this.outerHTML(option_el);
		};


		AbstractChosen.prototype.results_update_field = function() {
			this.set_default_text();
			if (!this.is_multiple) {
				this.results_reset_cleanup();
			}
			this.result_clear_highlight();
			this.results_build();
			if (this.results_showing) {
				return this.winnow_results();
			}
			return false;
		};

		AbstractChosen.prototype.reset_single_select_options = function() {
			var i, len, ref, result, results1;
			ref = this.results_data;
			results1 = [];
			for (i = 0, len = ref.length; i < len; i++) {
				result = ref[i];
				if (result.selected) {
					results1.push(result.selected = false);
				} else {
					results1.push(void 0);
				}
			}
			return results1;
		};

		AbstractChosen.prototype.results_toggle = function() {
			if (this.results_showing) {
				return this.results_hide();
			} else {
				return this.results_show();
			}
		};

		AbstractChosen.prototype.results_search = function(evt) {
			if (this.results_showing) {
				return this.winnow_results();
			} else {
				return this.results_show();
			}
		};

		AbstractChosen.prototype.winnow_results = function() {
			var escapedSearchText, i, len, option, ref, regex, regexAnchor, results, searchText, startpos, text, zregex;
			this.no_results_clear();
			results = 0;
			searchText = this.get_search_text();
			escapedSearchText = searchText.unidecode().replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
			regexAnchor = this.search_contains ? "" : "^";
			regex = new RegExp(regexAnchor + escapedSearchText, 'i');
			zregex = new RegExp(escapedSearchText, 'i');
			ref = this.results_data;
			for (i = 0, len = ref.length; i < len; i++) {
				option = ref[i];
				option.search_match = false;
				if (this.include_option_in_results(option)) {
					// was
					option.search_text_raw = option.html;
					option.search_text     = option.html_decoded;
					option.search_match = this.search_string_match(option.search_text, regex);
					if (option.search_match) {
						results += 1;
					}
					if (option.search_match) {
						if (searchText.length) {
							startpos = option.search_text.search(zregex);
							if (option.search_text.length === option.search_text_raw.length) {
								text = option.search_text_raw.substr(0, startpos + searchText.length) + '</em>' + option.search_text_raw.substr(startpos + searchText.length);
								//text = option.html.substr(0, startpos + searchText.length) + '</em>' + option.html.substr(startpos + searchText.length);
								option.search_text = text.substr(0, startpos) + '<em>' + text.substr(startpos);
							}
							else {
								option.search_text = option.search_text_raw;
							}
						}
					}
				}
			}
			this.result_clear_highlight();
			if (results < 1 && searchText.length) {
				this.update_results_content("");
				return this.no_results(searchText);
			} else {
				this.update_results_content(this.results_option_build());
				return this.winnow_results_set_highlight();
			}
		};

		AbstractChosen.prototype.search_string_match = function(search_string, regex) {
			var i, len, part, parts;
			if (regex.test(search_string)) {
				return true;
			} else if (this.enable_split_word_search && (search_string.indexOf(" ") >= 0 || search_string.indexOf("[") === 0)) {
				parts = search_string.replace(/\[|\]/g, "").split(" ");
				if (parts.length) {
					for (i = 0, len = parts.length; i < len; i++) {
						part = parts[i];
						if (regex.test(part)) {
							return true;
						}
					}
				}
			}
			return false;
		};

		AbstractChosen.prototype.choices_count = function() {
			var i, len, option, ref;
			if (this.selected_option_count != null) {
				return this.selected_option_count;
			}
			this.selected_option_count = 0;
			ref = this.form_field.options;
			for (i = 0, len = ref.length; i < len; i++) {
				option = ref[i];
				if (option.selected) {
					this.selected_option_count += 1;
				}
			}
			return this.selected_option_count;
		};

		AbstractChosen.prototype.choices_click = function(evt) {
			evt.preventDefault();
			if (!(this.results_showing || this.is_disabled)) {
				return this.results_show();
			}
			return false;
		};

		AbstractChosen.prototype.keyup_checker = function(evt) {
			var ref, stroke;
			stroke = (ref = evt.which) != null ? ref : evt.keyCode;
			this.search_field_scale();
			switch (stroke) {
				case 8:
			if (this.is_multiple && this.backstroke_length < 1 && this.choices_count() > 0) {
				return this.keydown_backstroke();
			} else if (!this.pending_backstroke) {
				this.result_clear_highlight();
				return this.results_search();
			}
			break;
				case 13:
			evt.preventDefault();
			if (this.results_showing) {
				return this.result_select(evt);
			}
			break;
				case 27:
			if (this.results_showing) {
				this.results_hide();
			}
			return true;
				case 9:
				case 38:
				case 40:
				case 16:
				case 91:
				case 17:
			break;
				default:
			return this.results_search();
			}
		};
	/*
		AbstractChosen.prototype.container_width = function() {
			if (this.options.width != null) {
			return this.options.width;
			} else {
			return this.form_field.offsetWidth + "px";
			}
		};
	*/
		AbstractChosen.prototype.include_option_in_results = function(option) {
			if (this.is_multiple && (!this.display_selected_options && option.selected)) {
				return false;
			}
			if (!this.display_disabled_options && option.disabled) {
				return false;
			}
			if (option.empty) {
				return false;
			}
			return true;
		};

		AbstractChosen.prototype.search_results_touchstart = function(evt) {
			this.touch_started = true;
			return this.search_results_mouseover(evt);
		};

		AbstractChosen.prototype.search_results_touchmove = function(evt) {
			this.touch_started = false;
			return this.search_results_mouseout(evt);
		};

		AbstractChosen.prototype.search_results_touchend = function(evt) {
			if (this.touch_started) {
				return this.search_results_mouseup(evt);
			}
			return false;
		};

		AbstractChosen.prototype.outerHTML = function(element) {
			var tmp;
			if (element.outerHTML) {
				return element.outerHTML;
			}
			tmp = document.createElement("div");
			tmp.appendChild(element);
			return tmp.innerHTML;
		};

		AbstractChosen.browser_is_supported = function() {
			if (window.navigator.appName === "Microsoft Internet Explorer") {
				return document.documentMode >= 8;
			}
			if (/iP(od|hone)/i.test(window.navigator.userAgent)) {
				return false;
			}
			if (/Android/i.test(window.navigator.userAgent)) {
				if (/Mobile/i.test(window.navigator.userAgent)) {
					return false;
				}
			}
			return true;
		};

		AbstractChosen.default_multiple_text = __sr_text_select_some_options;
		AbstractChosen.default_single_text = __sr_text_select_an_option;
		AbstractChosen.default_no_result_text = __sr_text_no_results_match;

		return AbstractChosen;

	})();

    // Generated by CoffeeScript 1.10.0
    var DOM, temp_el;

    temp_el = document.createElement('div');

	DOM = {
		find_parent: function(el, check) {
			var result;
			result = DOM.find_traversal(el, 'parentNode', function(el) {
				return el === document || check(el);
			});
			if (result === document) {
				return null;
			} else {
				return result;
			}
		},
		find_next_sibling: function(el, check) {
			return DOM.find_traversal(el, 'nextSibling', check);
		},
		find_prev_sibling: function(el, check) {
			return DOM.find_traversal(el, 'previousSibling', check);
		},
		find_traversal: function(el, property, check) {
			var current;
			current = el[property];
			while (!(current === null || check(current))) {
				current = current[property];
			}
			return current;
		}
	};

    if ('classList' in temp_el) {
		DOM.has_class = function(el, class_name) {
			return el.classList.contains(class_name);
		};
		DOM.add_class = function(el, class_name) {
			return el.classList.add(class_name);
		};
		DOM.remove_class = function(el, class_name) {
			return el.classList.remove(class_name);
		};
    } else {
		DOM.has_class = function(el, class_name) {
			return (" " + (el.className.toUpperCase()) + " ").indexOf(" " + (class_name.toUpperCase()) + " ") > -1;
		};
		DOM.add_class = function(el, class_name) {
			if (!DOM.has_class(el, class_name)) {
				return el.className += " " + class_name;
			}
		};
		DOM.remove_class = function(el, class_name) {
			return el.className = Util.trim((" " + el.className + " ").replace(" " + class_name, ""));
		};
    }

    if ('getComputedStyle' in window) {
		DOM.get_style = function(el, prop) {
			return window.getComputedStyle(el, null).getPropertyValue(prop);
		};
    } else if ('currentStyle' in temp_el) {
		DOM.get_style = function(el, prop) {
			return el.currentStyle[Util.camel_case(prop)];
		};
    } else {
		DOM.get_style = function(el, prop) {
			return "";
		};
    }

    temp_el = null;

    // Generated by CoffeeScript 1.10.0
    var emulated_event_mapped_to, emulated_events, is_emulated_event, unwrap_emulated_event, wrap_emulated_event;


	if (document.addEventListener != null) {
		chosen_events.add = function(el, type, fn) {
			if (is_emulated_event(type)) {
			fn = wrap_emulated_event(el, type, fn);
			type = emulated_event_mapped_to(type);
			}
			return el.addEventListener(type, fn, false);
		};
		chosen_events.remove = function(el, type, fn) {
			if (is_emulated_event(type)) {
			fn = unwrap_emulated_event(el, type, fn);
			type = emulated_event_mapped_to(type);
			}
			return el.removeEventListener(type, fn, false);
		};
	}
	else if (document.attachEvent != null) {
		chosen_events.add = function(el, type, fn) {
			var handler;
			handler = el['eventhandler' + type + fn] = function() {
			var evt;
			evt = window.event;
			evt.target = evt.srcElement;
			evt.currentTarget = el;
			evt.preventDefault = function() {
				return evt.returnValue = false;
			};
			evt.stopPropagation = function() {
				return evt.cancelBubble = true;
			};
			return fn.call(el, evt);
			};
			return el.attachEvent('on' + type, handler);
		};
		chosen_events.remove = function(el, type, fn) {
			var handler;
			handler = el['eventhandler' + type + fn];
			el.detachEvent('on' + type, handler);
			return el['eventhandler' + type + fn] = null;
		};
	}

	if (document.createEvent != null) {
		chosen_events.fire = function(el, type, memo) {
			var event;
			if (memo == null) {
				memo = {};
			}
			event = document.createEvent("HTMLEvents");
			event.initEvent(type, true, true);
			event.eventName = type;
			event.memo = memo;
			return el.dispatchEvent(event);
		};
	} else if (document.createEventObject != null) {
		chosen_events.fire = function(el, type, memo) {
			var event;
			if (memo == null) {
			memo = {};
			}
			if (type.indexOf(':') > -1) {
			return;
			}
			event = document.createEventObject();
			event.eventType = type;
			event.eventName = type;
			event.memo = memo;
			return el.fireEvent("on" + type, event);
		};
	}

	is_emulated_event = function(type) {
		return emulated_events[type] != null;
	};

	emulated_event_mapped_to = function(type) {
		return emulated_events[type].mapped_to;
	};

	wrap_emulated_event = function(el, type, fn) {
		var wrapped_fn_key;
		wrapped_fn_key = type + "_" + fn;
		if (el._chosen_wrapped == null) {
			el._chosen_wrapped = {};
		}
		if (el._chosen_wrapped[wrapped_fn_key] == null) {
			el._chosen_wrapped[wrapped_fn_key] = emulated_events[type].handler(el, fn);
		}
		return el._chosen_wrapped[wrapped_fn_key];
	};

	unwrap_emulated_event = function(el, type, fn) {
		var wrapped_fn, wrapped_fn_key;
		wrapped_fn_key = type + "_" + fn;
		wrapped_fn = wrap_emulated_event(el, type, fn);
		el._chosen_wrapped[wrapped_fn_key] = null;
		return wrapped_fn;
	};

	emulated_events = {
		mouseenter: {
			mapped_to: 'mouseover',
			handler: function(original_el, fn) {
			return function(evt) {
				if (original_el === evt.relatedTarget || ((evt.relatedTarget != null) && DOM.find_parent(evt.relatedTarget, function(el) {
				return el === original_el;
				}))) {
				return false;
				}
				return fn.call(this, evt);
			};
			}
		}
	};

	emulated_events.mouseleave = {
		mapped_to: 'mouseout',
		handler: emulated_events.mouseenter.handler
	};

    var SelectParser;

	SelectParser = (function() {
		function SelectParser() {
			this.options_index = 0;
			this.parsed = [];
		}

		SelectParser.prototype.add_node = function(child) {
			return this.add_option(child);
		};

		SelectParser.prototype.add_option = function(option) {
			if (option.nodeName.toUpperCase() === "OPTION") {
				if (option.text !== "") {
					this.parsed.push({
						array_index: this.parsed.length,
						options_index: this.options_index,
						value: option.value,
						text: option.text,
						html: option.innerHTML,
						selected: option.selected,
						disabled: option.disabled,
						classes: option.className,
						style: option.style.cssText
					});
				} else {
					this.parsed.push({
						array_index: this.parsed.length,
						options_index: this.options_index,
						html: '',
						text: '',
						empty: true
					});
				}
				return this.options_index += 1;
			}
			return false;
		};

		SelectParser.prototype.escapeExpression = function(text) {
			var map, unsafe_chars;
			if ((text == null) || text === false) {
				return "";
			}
			if (!/[\&\<\>\"\'\`]/.test(text)) {
				return text;
			}
			map = {
				"<": "&lt;",
				">": "&gt;",
				'"': "&quot;",
				"'": "&#x27;",
				"`": "&#x60;"
			};
			unsafe_chars = /&(?!\w+;)|[\<\>\"\'\`]/g;
			return text.replace(unsafe_chars, function(chr) {
				return map[chr] || "&amp;";
			});
		};

		return SelectParser;

    })();

	SelectParser.select_to_array = function(select) {
		var child, i, len, parser, ref;
		parser = new SelectParser();
		ref = select.childNodes;
		for (i = 0, len = ref.length; i < len; i++) {
			child = ref[i];
			parser.add_node(child);
		}
		return parser.parsed;
	};

    var Util;

    Util = {
		camel_case: function(string) {
			return string.replace(/-([a-z])/g, function(match) {
			return match[1].toUpperCase();
			});
		}
    };

    if (String.prototype.trim != null) {
		Util.trim = function(string) {
			return string.trim();
		};
    } else {
		Util.trim = function(string) {
			return string.replace(/^\s+|\s+$/g, '');
		};
    }

    var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

    this.Chosen = (function(superClass) {
		extend(Chosen, superClass);

		function Chosen() {
			return Chosen.__super__.constructor.apply(this, arguments);
		}

		Chosen.prototype.setup = function() {
			this.current_selectedIndex = this.form_field.selectedIndex;
			return this.is_rtl = DOM.has_class(this.form_field, "chosen-rtl");
		};

		Chosen.prototype.set_up_html = function() {
			var container_classes, container_props, key, value;
			container_classes = ["chosen-container"];
			container_classes.push("chosen-container-" + (this.is_multiple ? "multi" : "single"));
			if (this.inherit_select_classes && this.form_field.className) {
				container_classes.push(this.form_field.className);
			}
			if (this.is_rtl) {
				container_classes.push("chosen-rtl");
			}
			container_props = {
				'class': container_classes.join(' '),
				//'style': "width: " + (this.container_width()) + ";",
				'title': this.form_field.title
			};
			if (this.form_field.id.length) {
				container_props.id = this.form_field.id.replace(/[^\w]/g, '_') + "_chosen";
			}
			this.container = document.createElement('div');
			for (key in container_props) {
				value = container_props[key];
				this.container.setAttribute(key, value);
			}
			if (this.is_multiple) {
				this.container.innerHTML = '<ul class="chosen-choices"><li class="search-field"><input type="text" value="' + this.default_text + '" class="default" autocomplete="off" style="width:25px;" /></li></ul><div class="chosen-drop"><ul class="chosen-results"></ul></div>';
			} else {
				this.container.innerHTML = '<a class="chosen-single chosen-default" tabindex="-1"><span>' + this.default_text + '</span><div><b></b></div></a><div class="chosen-drop"><div class="chosen-search"><input type="text" autocomplete="off" /></div><ul class="chosen-results"></ul></div>';
			}
			this.form_field.style.display = 'none';

			// Edit this because the select is not wrapped in a div
			// necessarily so we will insert html after, so we give it
			// an id, insert the
			chosen_count++;
			this.container.id = 'chosen_tmp_hold'.concat(chosen_count);
			this.form_field.insertAdjacentHTML('beforebegin', this.container.outerHTML);
			// this.form_field.parentNode.appendChild(this.container);
			this.container = document.getElementById('chosen_tmp_hold'.concat(chosen_count));

			this.dropdown = this.container.querySelector('div.chosen-drop');
			this.search_field = this.container.getElementsByTagName('input')[0];
			this.search_results = this.container.querySelector('ul.chosen-results');
			this.search_field_scale();
			this.search_no_results = this.container.querySelector('li.no-results');
			if (this.is_multiple) {
				this.search_choices = this.container.querySelector('ul.chosen-choices');
				this.search_container = this.container.querySelector('li.search-field');
			} else {
				this.search_container = this.container.querySelector('div.chosen-search');
				this.selected_item = this.container.querySelector('.chosen-single');
			}
			this.results_build();
			this.set_tab_index();
			this.set_label_behavior();
			return chosen_events.fire(this.form_field, "chosen:ready", {
				chosen: this
			});
		};

		Chosen.prototype.register_observers = function() {
			chosen_events.add(this.container, 'mousedown', (function(_this) {
			return function(evt) {
				_this.container_mousedown(evt);
			};
			})(this));
			chosen_events.add(this.container, 'mouseup', (function(_this) {
			return function(evt) {
				_this.container_mouseup(evt);
			};
			})(this));
			chosen_events.add(this.container, 'mouseenter', (function(_this) {
			return function(evt) {
				_this.mouse_enter(evt);
			};
			})(this));
			chosen_events.add(this.container, 'mouseleave', (function(_this) {
			return function(evt) {
				_this.mouse_leave(evt);
			};
			})(this));
			chosen_events.add(this.search_results, "mouseup", (function(_this) {
			return function(evt) {
				_this.search_results_mouseup(evt);
			};
			})(this));
			chosen_events.add(this.search_results, "mouseover", (function(_this) {
			return function(evt) {
				_this.search_results_mouseover(evt);
			};
			})(this));
			chosen_events.add(this.search_results, "mouseout", (function(_this) {
			return function(evt) {
				_this.search_results_mouseout(evt);
			};
			})(this));
			chosen_events.add(this.search_results, 'mousewheel DOMMouseScroll', (function(_this) {
			return function(evt) {
				_this.search_results_mousewheel(evt);
			};
			})(this));
			chosen_events.add(this.search_results, 'touchstart', (function(_this) {
			return function(evt) {
				_this.search_results_touchstart(evt);
			};
			})(this));
			chosen_events.add(this.search_results, 'touchmove', (function(_this) {
			return function(evt) {
				_this.search_results_touchmove(evt);
			};
			})(this));
			chosen_events.add(this.search_results, 'touchend', (function(_this) {
			return function(evt) {
				_this.search_results_touchend(evt);
			};
			})(this));
			chosen_events.add(this.form_field, "chosen:updated", (function(_this) {
			return function(evt) {
				_this.results_update_field(evt);
			};
			})(this));
			chosen_events.add(this.form_field, "chosen:activate", (function(_this) {
			return function(evt) {
				_this.activate_field(evt);
			};
			})(this));
			chosen_events.add(this.form_field, "chosen:open", (function(_this) {
			return function(evt) {
				_this.container_mousedown(evt);
			};
			})(this));
			chosen_events.add(this.form_field, "chosen:close", (function(_this) {
			return function(evt) {
				_this.input_blur(evt);
			};
			})(this));
			chosen_events.add(this.search_field, "blur", (function(_this) {
			return function(evt) {
				_this.input_blur(evt);
			};
			})(this));
			chosen_events.add(this.search_field, "keyup", (function(_this) {
			return function(evt) {
				_this.keyup_checker(evt);
			};
			})(this));
			chosen_events.add(this.search_field, "keydown", (function(_this) {
			return function(evt) {
				_this.keydown_checker(evt);
			};
			})(this));
			chosen_events.add(this.search_field, "focus", (function(_this) {
			return function(evt) {
				_this.input_focus(evt);
			};
			})(this));
			if (this.is_multiple) {
			return chosen_events.add(this.search_choices, "click", (function(_this) {
				return function(evt) {
				_this.choices_click(evt);
				};
			})(this));
			} else {
			return chosen_events.add(this.container, "click", function(evt) {
				evt.preventDefault();
			});
			}
		};

		Chosen.prototype.destroy = function() {
			chosen_events.remove(document, "click", this.click_test_action);
			if (this.search_field.tabIndex) {
				this.form_field.tabIndex = this.search_field.tabIndex;
			}
			this.container.remove();
			return this.form_field.style.display = "";
		};

		Chosen.prototype.search_field_disabled = function() {
			this.is_disabled = this.form_field.disabled;
			if (this.is_disabled) {
				DOM.add_class(this.container, 'chosen-disabled');
				this.search_field.disabled = true;
			if (!this.is_multiple) {
				chosen_events.remove(this.selected_item, "focus", this.activate_action);
			}
			return this.close_field();
			} else {
				DOM.remove_class(this.container, 'chosen-disabled');
				this.search_field.disabled = false;
				if (!this.is_multiple) {
					return chosen_events.add(this.selected_item, "focus", this.activate_action);
				}
			}
			return false;
		};

		Chosen.prototype.container_mousedown = function(evt) {
			if (!this.is_disabled) {
				if (evt && evt.type === "mousedown" && !this.results_showing) {
					evt.preventDefault();
				}
				if (!((evt != null) && DOM.has_class(evt.target, "search-choice-close"))) {
					if (!this.active_field) {
						if (this.is_multiple) {
							this.search_field.value = "";
						}
						chosen_events.add(document, "click", this.click_test_action);
						this.results_show();
					} else if (!this.is_multiple && evt && ((evt.target === this.selected_item) || (DOM.find_parent(evt.target, function(el) {
						return DOM.has_class(el, "chosen-single");
					}) != null))) {
						evt.preventDefault();
						this.results_toggle();
					}
					return this.activate_field();
				}
			}
			return false;
		};

		Chosen.prototype.container_mouseup = function(evt) {
			if (evt.target.nodeName === "ABBR" && !this.is_disabled) {
				return this.results_reset(evt);
			}
			return false;
		};

		Chosen.prototype.search_results_mousewheel = function(evt) {
			var delta;
			if (evt.originalEvent) {
				delta = -evt.originalEvent.wheelDelta || evt.originalEvent.detail;
			}
			if (delta != null) {
				evt.preventDefault();
				if (evt.type === 'DOMMouseScroll') {
					delta = delta * 40;
				}
				return this.search_results.scrollTop(delta + this.search_results.scrollTop());
			}
			return false;
		};

		Chosen.prototype.blur_test = function(evt) {
			if (!this.active_field && DOM.has_class(this.container, "chosen-container-active")) {
				return this.close_field();
			}
			return false;
		};

		Chosen.prototype.close_field = function() {
			chosen_events.remove(document, "click", this.click_test_action);
			this.active_field = false;
			this.results_hide();
			DOM.remove_class(this.container, "chosen-container-active");
			this.clear_backstroke();
			this.show_search_field_default();
			return this.search_field_scale();
		};

		Chosen.prototype.activate_field = function() {
			DOM.add_class(this.container, "chosen-container-active");
			this.active_field = true;
			this.search_field.value = this.search_field.value;
			return this.search_field.focus();
		};

		Chosen.prototype.test_active_click = function(evt) {
			var active_container;
			active_container = DOM.find_parent(evt.target, function(el) {
				return DOM.has_class(el, 'chosen-container');
			});
			if (this.container === active_container) {
				return this.active_field = true;
			} else {
				return this.close_field();
			}
		};

		Chosen.prototype.results_build = function() {
			var el, i, len, ref;
			this.parsing = true;
			this.selected_option_count = null;
			this.results_data = SelectParser.select_to_array(this.form_field);
			if (this.is_multiple) {
				ref = this.search_choices.querySelectorAll("li.search-choice");
				for (i = 0, len = ref.length; i < len; i++) {
					el = ref[i];
					el.parentNode.removeChild(el);
				}
			} else if (!this.is_multiple) {
				this.single_set_selected_text();
				if (this.disable_search || this.form_field.options.length <= this.disable_search_threshold) {
					this.search_field.readOnly = true;
					DOM.add_class(this.container, "chosen-container-single-nosearch");
				} else {
					this.search_field.readOnly = false;
					DOM.remove_class(this.container, "chosen-container-single-nosearch");
				}
			}
			this.update_results_content(this.results_option_build({
				first: true
			}));
			this.search_field_disabled();
			this.show_search_field_default();
			this.search_field_scale();
			return this.parsing = false;
		};

		Chosen.prototype.result_do_highlight = function(el) {
			var high_bottom, high_top, maxHeight, visible_bottom, visible_top;
			if (el != null) {
				this.result_clear_highlight();
				this.result_highlight = el;
				DOM.add_class(this.result_highlight, "highlighted");
				maxHeight = parseInt(DOM.get_style(this.search_results, 'max-height'), 10);
				visible_top = this.search_results.scrollTop;
				visible_bottom = maxHeight + visible_top;
				high_top = this.result_highlight.offsetTop;
				high_bottom = high_top + this.result_highlight.clientHeight;
				if (high_bottom >= visible_bottom) {
					return this.search_results.scrollTop = (high_bottom - maxHeight) > 0 ? high_bottom - maxHeight : 0;
				} else if (high_top < visible_top) {
					return this.search_results.scrollTop = high_top;
				}
			}
			return false;
		};

		Chosen.prototype.result_clear_highlight = function() {
			if (this.result_highlight) {
				DOM.remove_class(this.result_highlight, "highlighted");
			}
			return this.result_highlight = null;
		};

		Chosen.prototype.results_show = function() {
			if (this.is_multiple && this.max_selected_options <= this.choices_count()) {
				chosen_events.fire(this.form_field, "chosen:maxselected", {
					chosen: this
				});
				return false;
			}
			DOM.add_class(this.container, "chosen-with-drop");
			chosen_events.fire(this.form_field, "chosen:showing_dropdown", {
				chosen: this
			});
			this.results_showing = true;
			this.search_field.focus();
			this.search_field.value = this.search_field.value;
			return this.winnow_results();
		};

		Chosen.prototype.update_results_content = function(content) {
			return this.search_results.innerHTML = content;
		};

		Chosen.prototype.results_hide = function() {
			if (this.results_showing) {
				this.result_clear_highlight();
				DOM.remove_class(this.container, "chosen-with-drop");
				chosen_events.fire(this.form_field, "chosen:hiding_dropdown", {
					chosen: this
				});
			}
			return this.results_showing = false;
		};

		Chosen.prototype.set_tab_index = function(el) {
			var ti;
			if (this.form_field.tabindex) {
				ti = this.form_field.tabindex;
				this.form_field.tabindex = -1;
				return this.search_field.tabindex = ti;
			}
			return false;
		};

		Chosen.prototype.set_label_behavior = function() {
			this.form_field_label = DOM.find_parent(this.form_field, function(el) {
				return el.nodeName.toUpperCase() === 'LABEL';
			});
			if ((this.form_field_label == null) && this.form_field.id.length) {
				this.form_field_label = document.querySelector("label[for='" + this.form_field.id + "']");
			}
			if (this.form_field_label != null) {
				return chosen_events.add(this.form_field_label, "click", (function(_this) {
					return function(evt) {
						if (_this.is_multiple) {
							return _this.container_mousedown(evt);
						} else {
							return _this.activate_field();
						}
					};
				})(this));
			}
			return false;
		};

		Chosen.prototype.show_search_field_default = function() {
			if (this.is_multiple && this.choices_count() < 1 && !this.active_field) {
				this.search_field.value = this.default_text;
				return DOM.add_class(this.search_field, "default");
			} else {
				this.search_field.value = "";
				return DOM.remove_class(this.search_field, "default");
			}
		};

		Chosen.prototype.search_results_mouseup = function(evt) {
			var target;
			target = DOM.has_class(evt.target, "active-result") ? evt.target : DOM.find_parent(evt.target, function(el) {
				return DOM.has_class(el, "active-result");
			});
			if (target != null) {
				this.result_highlight = target;
				this.result_select(evt);
				return this.search_field.focus();
			}
			return false;
		};

		Chosen.prototype.search_results_mouseover = function(evt) {
			var target;
			target = DOM.has_class(evt.target, "active-result") ? evt.target : DOM.find_parent(evt.target, function(el) {
				return DOM.has_class(el, "active-result");
			});
			if (target) {
				return this.result_do_highlight(target);
			}
			return false;
		};

		Chosen.prototype.search_results_mouseout = function(evt) {
			if (DOM.has_class(evt.target, "active-result" || DOM.find_parent(evt.target, function(el) {
				return DOM.has_class(el, "active-result");
			}))) {
				return this.result_clear_highlight();
			}
			return false;
		};

		Chosen.prototype.choice_build = function(item) {
			var choice, close_link;
			choice = document.createElement('li');
			choice.className = "search-choice";
			choice.innerHTML = "<span>" + item.html + "</span>";
			if (item.disabled) {
				DOM.add_class(choice, 'search-choice-disabled');
			} else {
				close_link = document.createElement('a');
				close_link.href = '#';
				close_link.className = 'search-choice-close';
				close_link.setAttribute('data-option-array-index', item.array_index);
				chosen_events.add(close_link, 'click', (function(_this) {
					return function(evt) {
					return _this.choice_destroy_link_click(evt);
					};
				})(this));
				choice.appendChild(close_link);
			}
			return this.search_container.parentNode.insertBefore(choice, this.search_container);
		};

		Chosen.prototype.choice_destroy_link_click = function(evt) {
			evt.preventDefault();
			evt.stopPropagation();
			if (!this.is_disabled) {
				return this.choice_destroy(evt.target);
			}
			return false;
		};

		Chosen.prototype.choice_destroy = function(link) {
			var li;
			if (this.result_deselect(link.getAttribute("data-option-array-index"))) {
				this.show_search_field_default();
				if (this.is_multiple && this.choices_count() > 0 && this.search_field.value.length < 1) {
					this.results_hide();
				}
				li = DOM.find_parent(link, function(el) {
					return el.nodeName.toUpperCase() === 'LI';
				});
				if (li != null) {
					li.parentNode.removeChild(li);
				}
				return this.search_field_scale();
			}
			return false;
		};

		Chosen.prototype.results_reset = function() {
			this.reset_single_select_options();
			this.form_field.options[0].selected = true;
			this.single_set_selected_text();
			this.show_search_field_default();
			this.results_reset_cleanup();
			chosen_events.fire(this.form_field, "change");
			if (this.active_field) {
				return this.results_hide();
			}
			return false;
		};

		Chosen.prototype.results_reset_cleanup = function() {
			var abbr;
			this.current_selectedIndex = this.form_field.selectedIndex;
			abbr = this.selected_item.getElementsByTagName("abbr")[0];
			if (abbr) {
				return abbr.parentNode.removeChild(abbr);
			}
			return false;
		};

		Chosen.prototype.result_select = function(evt) {
			var high, item;
			if (this.result_highlight) {
				high = this.result_highlight;
				this.result_clear_highlight();
				if (this.is_multiple && this.max_selected_options <= this.choices_count()) {
					chosen_events.fire(this.form_field, "chosen:maxselected", {
						chosen: this
					});
					return false;
				}
				if (this.is_multiple) {
					DOM.remove_class(high, "active-result");
				} else {
					this.reset_single_select_options();
				}
				item = this.results_data[high.getAttribute("data-option-array-index")];
				item.selected = true;
				this.form_field.options[item.options_index].selected = true;
				this.selected_option_count = null;
				if (this.is_multiple) {
					this.choice_build(item);
				} else {
					this.single_set_selected_text(item.text);
				}
				if (!((evt.metaKey || evt.ctrlKey) && this.is_multiple)) {
					this.results_hide();
				}
				this.search_field.value = "";
				if (this.is_multiple || this.form_field.selectedIndex !== this.current_selectedIndex) {
					chosen_events.fire(this.form_field, "change", {
					'selected': this.form_field.options[item.options_index].value
					});
				}
				this.current_selectedIndex = this.form_field.selectedIndex;
				return this.search_field_scale();
			}
			return false;
		};

		Chosen.prototype.single_set_selected_text = function(text) {
			if (text == null) {
				text = this.default_text;
			}
			if (text === this.default_text) {
				DOM.add_class(this.selected_item, "chosen-default");
			} else {
				this.single_deselect_control_build();
				DOM.remove_class(this.selected_item, "chosen-default");
			}
			return this.selected_item.getElementsByTagName("span")[0].textContent = text;
		};

		Chosen.prototype.result_deselect = function(pos) {
			var result_data;
			result_data = this.results_data[pos];
			if (!this.form_field.options[result_data.options_index].disabled) {
				result_data.selected = false;
				this.form_field.options[result_data.options_index].selected = false;
				this.selected_option_count = null;
				this.result_clear_highlight();
				if (this.results_showing) {
					this.winnow_results();
				}
				chosen_events.fire(this.form_field, "change", {
					deselected: this.form_field.options[result_data.options_index].value
				});
				this.search_field_scale();
				return true;
			} else {
				return false;
			}
		};

		Chosen.prototype.single_deselect_control_build = function() {
			var abbr, span;
			if (!this.allow_single_deselect) {
				return false;
			}
			if (this.selected_item.getElementsByTagName("abbr").length === 0) {
				span = this.selected_item.getElementsByTagName('span')[0];
				abbr = document.createElement('abbr');
				abbr.className = "search-choice-close";
				span.parentNode.insertBefore(abbr, span.nextSibling);
			}
			return DOM.add_class(this.selected_item, "chosen-single-with-deselect");
		};

		Chosen.prototype.get_search_text = function() {
			var temp_el;
			if (this.search_field.value === this.default_text) {
				return "";
			} else {
				temp_el = document.createElement("div");
				temp_el.textContent = Util.trim(this.search_field.value);
				return temp_el.innerHTML;
			}
		};

		Chosen.prototype.winnow_results_set_highlight = function() {
			var do_high, selected_results;
			selected_results = !this.is_multiple ? this.search_results.querySelectorAll(".result-selected.active-result") : [];
			do_high = selected_results.length ? selected_results[0] : this.search_results.querySelector(".active-result");
			if (do_high != null) {
				return this.result_do_highlight(do_high);
			}
			return false;
		};

		Chosen.prototype.no_results = function(terms) {
			var li, span;
			li = document.createElement('li');
			li.className = 'no-results';
			li.innerHTML = this.results_none_found + ' ';
			span = document.createElement('span');
			span.textContent = terms;
			li.appendChild(span);
			return this.search_results.appendChild(li);
		};

		Chosen.prototype.no_results_clear = function() {
			var no_results;
			no_results = this.search_results.querySelector(".no-results");
			if (no_results != null) {
				return no_results.parentNode.removeChild(no_results);
			}
			return false;
		};

		Chosen.prototype.keydown_arrow = function() {
			var next_sib;
			if (this.results_showing && this.result_highlight) {
				next_sib = DOM.find_next_sibling(this.result_highlight, (function(_this) {
					return function(el) {
					return el.nodeName.toUpperCase() === "LI" && DOM.has_class(el, "active-result");
					};
				})(this));
				if (next_sib) {
					return this.result_do_highlight(next_sib);
				}
			} else {
				return this.results_show();
			}
			return false;
		};

		Chosen.prototype.keyup_arrow = function() {
			var prev_sib;
			if (!this.results_showing && !this.is_multiple) {
				return this.results_show();
			} else if (this.result_highlight) {
				prev_sib = DOM.find_prev_sibling(this.result_highlight, (function(_this) {
					return function(el) {
						return el.nodeName.toUpperCase() === "LI" && DOM.has_class(el, "active-result");
					};
				})(this));
				if (prev_sib != null) {
					return this.result_do_highlight(prev_sib);
				} else {
					if (this.choices_count() > 0) {
					this.results_hide();
					}
					return this.result_clear_highlight();
				}
			}
			return false;
		};

		Chosen.prototype.keydown_backstroke = function() {
			var next_available_destroy, next_available_destroys;
			if (this.pending_backstroke) {
				this.choice_destroy(this.pending_backstroke.getElementsByTagName("a")[0]);
				return this.clear_backstroke();
			} else {
				next_available_destroys = this.search_container.parentNode.querySelectorAll("li.search-choice");
				if (next_available_destroys.length) {
					next_available_destroy = next_available_destroys[next_available_destroys.length - 1];
					if (!DOM.has_class(next_available_destroy, "search-choice-disabled")) {
						this.pending_backstroke = next_available_destroy;
						if (this.single_backstroke_delete) {
							return this.keydown_backstroke();
						} else {
							return DOM.add_class(this.pending_backstroke, "search-choice-focus");
						}
					}
				}
			}
			return false;
		};

		Chosen.prototype.clear_backstroke = function() {
			if (this.pending_backstroke) {
				DOM.remove_class(this.pending_backstroke, "search-choice-focus");
			}
			return this.pending_backstroke = null;
		};

		Chosen.prototype.keydown_checker = function(evt) {
			var ref, stroke;
			stroke = (ref = evt.which) != null ? ref : evt.keyCode;
			this.search_field_scale();
			if (stroke !== 8 && this.pending_backstroke) {
				this.clear_backstroke();
			}
			switch (stroke) {
				case 8:
					this.backstroke_length = this.search_field.value.length;
					break;
				case 9:
					if (this.results_showing && !this.is_multiple) {
						this.result_select(evt);
					}
					this.mouse_on_container = false;
					break;
				case 13:
					evt.preventDefault();
					break;
				case 38:
					evt.preventDefault();
					this.keyup_arrow();
					break;
				case 40:
					evt.preventDefault();
					this.keydown_arrow();
					break;
			}
		};

		Chosen.prototype.search_field_scale = function() {
			var div, f_width, h, i, len, style, styles, w;
			if (this.is_multiple) {
			h = 0;
			w = 0;
			styles = ['font-size', 'font-style', 'font-weight', 'font-family', 'line-height', 'text-transform', 'letter-spacing'];
			div = document.createElement('div');
			div.style.position = 'absolute';
			div.style.left = '-1000px';
			div.style.top = '-1000px';
			for (i = 0, len = styles.length; i < len; i++) {
				style = styles[i];
				div.style[Util.camel_case(style)] = this.search_field.style[style];
			}
			div.appendChild(document.createTextNode(this.search_field.value));
			document.body.appendChild(div);
			w = div.offsetWidth + 25;
			div.parentNode.removeChild(div);
			f_width = this.container.outerWidth;
			if (w > f_width - 10) {
				w = f_width - 10;
			}
			return this.search_field.style.width = w + 'px';
			}
			return false;
		};

		return Chosen;

	})(AbstractChosen);

}).call(this);


/* *********************************************************************
   # Usage       :   sr_chosen_enable_select
   # Purpose     :   adds fancier styling to select bars and makes them easier to use
   # Returns     :   
   # Parameters  :   
   # Throws      :
   # See Also    :
   #   
   # Comments : http://harvesthq.github.com/chosen/ for demos and options
   #            to implement add use_chosen to the classes for the form
   #            We run this automatically on a select.  To turn if off you need to include the
   #            the class no_chosen on the form or on the select box.

 ********************************************************************** */
function sr_chosen_enable_select(form) {
	if (Modernizr.touch) return;
	console.log("   ### running sr_chosen_enable_select (no on touch)");

	// for selects with more than 20 items we add class chosen_select
	var chosenForms = document.querySelectorAll('form');
	if (form) {
		chosenForms = [ form ];
	}

	// run through the forms looking for selects.
	vjs_forEach.call(chosenForms, function(chosenForm,idx) {
		if ((vjs_isHidden(chosenForm) && !vjs_hasClass(chosenForm,'force_chosen') )
			|| vjs_hasClass(chosenForm,'no_chosen')) {
			return; 
		}

		var selects = chosenForm.querySelectorAll('select');

		// we split this up to to add the classes quickly.
		vjs_forEach.call(selects, function(select,idx) {

			// Check to see if the select has no_chosen
			// if so, just loop through
			if(select.has_chosen || vjs_hasClass(select,'no_chosen') || (vjs_isHidden(select) && !vjs_hasClass(select,'force_chosen') )) {
				return; 
			}

			// mark this as having been chosen,
			// so we don't repeat.	  
			select.has_chosen = true;

			if((select.length >= 20)
			   || vjs_hasClass(chosenForm,'force_chosen')
			   || vjs_hasClass(select,'force_chosen')) {

				// add the class chosen-select and add the controls.
				vjs_addClass(select,'chosen-select');
				new Chosen(select);
			}
		});
	});
}




/* ### FILE:libs-mod/hogan.js    */
/*
 *  Copyright 2011 Twitter, Inc.
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
var Hogan = {};

(function (Hogan, useArrayBuffer) {
  Hogan.Template = function (renderFunc, text, compiler, options) {
    this.r = renderFunc || this.r;
    this.c = compiler;
    this.options = options;
    this.text = text || '';
    this.buf = (useArrayBuffer) ? [] : '';
  }

  Hogan.Template.prototype = {
    // render: replaced by generated code.
    r: function () { return ''; },

    // variable escaping
    v: hoganEscape,

    // triple stache
    t: coerceToString,

    render: function render(context, partials, indent) {
      return this.ri([context], partials || {}, indent);
    },

    // render internal -- a hook for overrides that catches partials too
    ri: function (context, partials, indent) {
      return this.r(context, partials, indent);
    },

    // tries to find a partial in the curent scope and render it
    rp: function(name, context, partials, indent) {
      var partial = partials[name];

      if (!partial) {
        return '';
      }

      if (this.c && typeof partial == 'string') {
        partial = this.c.compile(partial, this.options);
      }

      return partial.ri(context, partials, indent);
    },

    // render a section
    rs: function(context, partials, section) {
      var tail = context[context.length - 1];

      if (!isArray(tail)) {
        section(context, partials, this);
        return;
      }

      for (var i = 0; i < tail.length; i++) {
        context.push(tail[i]);
        section(context, partials, this);
        context.pop();
      }
    },

    // maybe start a section
    s: function(val, ctx, partials, inverted, start, end, tags) {
      var pass;

      if (isArray(val) && val.length === 0) {
        return false;
      }

      if (typeof val == 'function') {
        val = this.ls(val, ctx, partials, inverted, start, end, tags);
      }

      pass = (val === '') || !!val;

      if (!inverted && pass && ctx) {
        ctx.push((typeof val == 'object') ? val : ctx[ctx.length - 1]);
      }

      return pass;
    },

    // find values with dotted names
    d: function(key, ctx, partials, returnFound) {
      var names = key.split('.'),
          val = this.f(names[0], ctx, partials, returnFound),
          cx = null;

      if (key === '.' && isArray(ctx[ctx.length - 2])) {
        return ctx[ctx.length - 1];
      }

      for (var i = 1; i < names.length; i++) {
        if (val && typeof val == 'object' && names[i] in val) {
          cx = val;
          val = val[names[i]];
        } else {
          val = '';
        }
      }

      if (returnFound && !val) {
        return false;
      }

      if (!returnFound && typeof val == 'function') {
        ctx.push(cx);
        val = this.lv(val, ctx, partials);
        ctx.pop();
      }

      return val;
    },

    // find values with normal names
    f: function(key, ctx, partials, returnFound) {
      var val = false,
          v = null,
          found = false;

      for (var i = ctx.length - 1; i >= 0; i--) {
        v = ctx[i];
        if (v && typeof v == 'object' && key in v) {
          val = v[key];
          found = true;
          break;
        }
      }

      if (!found) {
        return (returnFound) ? false : "";
      }

      if (!returnFound && typeof val == 'function') {
        val = this.lv(val, ctx, partials);
      }

      return val;
    },

    // higher order templates
    ho: function(val, cx, partials, text, tags) {
      var compiler = this.c;
      var options = this.options;
      options.delimiters = tags;
      var text = val.call(cx, text);
      text = (text == null) ? String(text) : text.toString();
      this.b(compiler.compile(text, options).render(cx, partials));
      return false;
    },

    // template result buffering
    b: (useArrayBuffer) ? function(s) { this.buf.push(s); } :
                          function(s) { this.buf += s; },
    fl: (useArrayBuffer) ? function() { var r = this.buf.join(''); this.buf = []; return r; } :
                           function() { var r = this.buf; this.buf = ''; return r; },

    // lambda replace section
    ls: function(val, ctx, partials, inverted, start, end, tags) {
      var cx = ctx[ctx.length - 1],
          t = null;

      if (!inverted && this.c && val.length > 0) {
        return this.ho(val, cx, partials, this.text.substring(start, end), tags);
      }

      t = val.call(cx);

      if (typeof t == 'function') {
        if (inverted) {
          return true;
        } else if (this.c) {
          return this.ho(t, cx, partials, this.text.substring(start, end), tags);
        }
      }

      return t;
    },

    // lambda replace variable
    lv: function(val, ctx, partials) {
      var cx = ctx[ctx.length - 1];
      var result = val.call(cx);

      if (typeof result == 'function') {
        result = coerceToString(result.call(cx));
        if (this.c && ~result.indexOf("{\u007B")) {
          return this.c.compile(result, this.options).render(cx, partials);
        }
      }

      return coerceToString(result);
    }

  };

  var rAmp = /&/g,
      rLt = /</g,
      rGt = />/g,
      rApos =/\'/g,
      rQuot = /\"/g,
      hChars =/[&<>\"\']/;


  function coerceToString(val) {
    return String((val === null || val === undefined) ? '' : val);
  }

  function hoganEscape(str) {
    str = coerceToString(str);
    return hChars.test(str) ?
      str
        .replace(rAmp,'&amp;')
        .replace(rLt,'&lt;')
        .replace(rGt,'&gt;')
        .replace(rApos,'&#39;')
        .replace(rQuot, '&quot;') :
      str;
  }

  var isArray = Array.isArray || function(a) {
    return Object.prototype.toString.call(a) === '[object Array]';
  };

})(typeof exports !== 'undefined' ? exports : Hogan);




(function (Hogan) {
  // Setup regex  assignments
  // remove whitespace according to Mustache spec
  var rIsWhitespace = /\S/,
      rQuot = /\"/g,
      rNewline =  /\n/g,
      rCr = /\r/g,
      rSlash = /\\/g,
      tagTypes = {
        '#': 1, '^': 2, '/': 3,  '!': 4, '>': 5,
        '<': 6, '=': 7, '_v': 8, '{': 9, '&': 10
      };

  Hogan.scan = function scan(text, delimiters) {
    var len = text.length,
        IN_TEXT = 0,
        IN_TAG_TYPE = 1,
        IN_TAG = 2,
        state = IN_TEXT,
        tagType = null,
        tag = null,
        buf = '',
        tokens = [],
        seenTag = false,
        i = 0,
        lineStart = 0,
        otag = '{{',
        ctag = '}}';

    function addBuf() {
      if (buf.length > 0) {
        tokens.push(new String(buf));
        buf = '';
      }
    }

    function lineIsWhitespace() {
      var isAllWhitespace = true;
      for (var j = lineStart; j < tokens.length; j++) {
        isAllWhitespace =
          (tokens[j].tag && tagTypes[tokens[j].tag] < tagTypes['_v']) ||
          (!tokens[j].tag && tokens[j].match(rIsWhitespace) === null);
        if (!isAllWhitespace) {
          return false;
        }
      }

      return isAllWhitespace;
    }

    function filterLine(haveSeenTag, noNewLine) {
      addBuf();

      if (haveSeenTag && lineIsWhitespace()) {
        for (var j = lineStart, next; j < tokens.length; j++) {
          if (!tokens[j].tag) {
            if ((next = tokens[j+1]) && next.tag == '>') {
              // set indent to token value
              next.indent = tokens[j].toString()
            }
            tokens.splice(j, 1);
          }
        }
      } else if (!noNewLine) {
        tokens.push({tag:'\n'});
      }

      seenTag = false;
      lineStart = tokens.length;
    }

    function changeDelimiters(text, index) {
      var close = '=' + ctag,
          closeIndex = text.indexOf(close, index),
          delimiters = trim(
            text.substring(text.indexOf('=', index) + 1, closeIndex)
          ).split(' ');

      otag = delimiters[0];
      ctag = delimiters[1];

      return closeIndex + close.length - 1;
    }

    if (delimiters) {
      delimiters = delimiters.split(' ');
      otag = delimiters[0];
      ctag = delimiters[1];
    }

    for (i = 0; i < len; i++) {
      if (state == IN_TEXT) {
        if (tagChange(otag, text, i)) {
          --i;
          addBuf();
          state = IN_TAG_TYPE;
        } else {
          if (text.charAt(i) == '\n') {
            filterLine(seenTag);
          } else {
            buf += text.charAt(i);
          }
        }
      } else if (state == IN_TAG_TYPE) {
        i += otag.length - 1;
        tag = tagTypes[text.charAt(i + 1)];
        tagType = tag ? text.charAt(i + 1) : '_v';
        if (tagType == '=') {
          i = changeDelimiters(text, i);
          state = IN_TEXT;
        } else {
          if (tag) {
            i++;
          }
          state = IN_TAG;
        }
        seenTag = i;
      } else {
        if (tagChange(ctag, text, i)) {
          tokens.push({tag: tagType, n: trim(buf), otag: otag, ctag: ctag,
                       i: (tagType == '/') ? seenTag - ctag.length : i + otag.length});
          buf = '';
          i += ctag.length - 1;
          state = IN_TEXT;
          if (tagType == '{') {
            if (ctag == '}}') {
              i++;
            } else {
              cleanTripleStache(tokens[tokens.length - 1]);
            }
          }
        } else {
          buf += text.charAt(i);
        }
      }
    }

    filterLine(seenTag, true);

    return tokens;
  }

  function cleanTripleStache(token) {
    if (token.n.substr(token.n.length - 1) === '}') {
      token.n = token.n.substring(0, token.n.length - 1);
    }
  }

  function trim(s) {
    if (s.trim) {
      return s.trim();
    }

    return s.replace(/^\s*|\s*$/g, '');
  }

  function tagChange(tag, text, index) {
    if (text.charAt(index) != tag.charAt(0)) {
      return false;
    }

    for (var i = 1, l = tag.length; i < l; i++) {
      if (text.charAt(index + i) != tag.charAt(i)) {
        return false;
      }
    }

    return true;
  }

  function buildTree(tokens, kind, stack, customTags) {
    var instructions = [],
        opener = null,
        token = null;

    while (tokens.length > 0) {
      token = tokens.shift();
      if (token.tag == '#' || token.tag == '^' || isOpener(token, customTags)) {
        stack.push(token);
        token.nodes = buildTree(tokens, token.tag, stack, customTags);
        instructions.push(token);
      } else if (token.tag == '/') {
        if (stack.length === 0) {
          throw new Error('Closing tag without opener: /' + token.n);
        }
        opener = stack.pop();
        if (token.n != opener.n && !isCloser(token.n, opener.n, customTags)) {
          throw new Error('Nesting error: ' + opener.n + ' vs. ' + token.n);
        }
        opener.end = token.i;
        return instructions;
      } else {
        instructions.push(token);
      }
    }

    if (stack.length > 0) {
      throw new Error('missing closing tag: ' + stack.pop().n);
    }

    return instructions;
  }

  function isOpener(token, tags) {
    for (var i = 0, l = tags.length; i < l; i++) {
      if (tags[i].o == token.n) {
        token.tag = '#';
        return true;
      }
    }
  }

  function isCloser(close, open, tags) {
    for (var i = 0, l = tags.length; i < l; i++) {
      if (tags[i].c == close && tags[i].o == open) {
        return true;
      }
    }
  }

  Hogan.generate = function (tree, text, options) {
    var code = 'var _=this;_.b(i=i||"");' + walk(tree) + 'return _.fl();';
    if (options.asString) {
      return 'function(c,p,i){' + code + ';}';
    }

    return new Hogan.Template(new Function('c', 'p', 'i', code), text, Hogan, options);
  }

  function esc(s) {
    return s.replace(rSlash, '\\\\')
            .replace(rQuot, '\\\"')
            .replace(rNewline, '\\n')
            .replace(rCr, '\\r');
  }

  function chooseMethod(s) {
    return (~s.indexOf('.')) ? 'd' : 'f';
  }

  function walk(tree) {
    var code = '';
    for (var i = 0, l = tree.length; i < l; i++) {
      var tag = tree[i].tag;
      if (tag == '#') {
        code += section(tree[i].nodes, tree[i].n, chooseMethod(tree[i].n),
                        tree[i].i, tree[i].end, tree[i].otag + " " + tree[i].ctag);
      } else if (tag == '^') {
        code += invertedSection(tree[i].nodes, tree[i].n,
                                chooseMethod(tree[i].n));
      } else if (tag == '<' || tag == '>') {
        code += partial(tree[i]);
      } else if (tag == '{' || tag == '&') {
        code += tripleStache(tree[i].n, chooseMethod(tree[i].n));
      } else if (tag == '\n') {
        code += text('"\\n"' + (tree.length-1 == i ? '' : ' + i'));
      } else if (tag == '_v') {
        code += variable(tree[i].n, chooseMethod(tree[i].n));
      } else if (tag === undefined) {
        code += text('"' + esc(tree[i]) + '"');
      }
    }
    return code;
  }

  function section(nodes, id, method, start, end, tags) {
    return 'if(_.s(_.' + method + '("' + esc(id) + '",c,p,1),' +
           'c,p,0,' + start + ',' + end + ',"' + tags + '")){' +
           '_.rs(c,p,' +
           'function(c,p,_){' +
           walk(nodes) +
           '});c.pop();}';
  }

  function invertedSection(nodes, id, method) {
    return 'if(!_.s(_.' + method + '("' + esc(id) + '",c,p,1),c,p,1,0,0,"")){' +
           walk(nodes) +
           '};';
  }

  function partial(tok) {
    return '_.b(_.rp("' +  esc(tok.n) + '",c,p,"' + (tok.indent || '') + '"));';
  }

  function tripleStache(id, method) {
    return '_.b(_.t(_.' + method + '("' + esc(id) + '",c,p,0)));';
  }

  function variable(id, method) {
    return '_.b(_.v(_.' + method + '("' + esc(id) + '",c,p,0)));';
  }

  function text(id) {
    return '_.b(' + id + ');';
  }

  Hogan.parse = function(tokens, text, options) {
    options = options || {};
    return buildTree(tokens, '', [], options.sectionTags || []);
  },

  Hogan.cache = {};

  Hogan.compile = function(text, options) {
    // options
    //
    // asString: false (default)
    //
    // sectionTags: [{o: '_foo', c: 'foo'}]
    // An array of object with o and c fields that indicate names for custom
    // section tags. The example above allows parsing of {{_foo}}{{/foo}}.
    //
    // delimiters: A string that overrides the default delimiters.
    // Example: "<% %>"
    //
    options = options || {};

    var key = text + '||' + !!options.asString;

    var t = this.cache[key];

    if (t) {
      return t;
    }

    t = this.generate(this.parse(this.scan(text, options.delimiters), text, options), text, options);
    return this.cache[key] = t;
  };
})(typeof exports !== 'undefined' ? exports : Hogan);


/* ### FILE:libs-mod/unidecode.js    */
/*! JSunidecode v0.04.9 | GPL | https://github.com/xen0n/jsunidecode */
(function(){
    String.prototype.unidecode = function()
    {
	var retval="",
            idx=0,
            codepoint,
            section,
            position,
            table,
	    strLen = this.length;
	
	for (;idx < strLen; idx++) {
	    
	    codepoint = this.charCodeAt(idx);
	    
	    if (codepoint < 128) {
		// basic ASCII
		retval = retval.concat(this[idx]);
		continue;
	    }
	    
	    // SLF: for portability and performance we toss away any values above the Malaysian language codes.
	    // https://en.wikipedia.org/wiki/Unicode_block block: U+0D00..U+0D7F	Malayalam
	    if (codepoint > 3583) {        continue;      }
	    
	    // get the location in our table.
	    section = codepoint >> 8;
	    position = codepoint % 256;
	    
	    table = unidecode_datasheet[section];
	    if (table && table.length > position) {
		retval = retval.concat(table[position]);
	    }
	}      
	return retval;
    }
})();



var unidecode_datasheet={
    "0": ["\u0000","\u0001","\u0002","\u0003","\u0004","\u0005","\u0006","\u0007","\b","\t","\n","\u000b","\f","\r","\u000e","\u000f","\u0010","\u0011","\u0012","\u0013","\u0014","\u0015","\u0016","\u0017","\u0018","\u0019","\u001a","\u001b","\u001c","\u001d","\u001e","\u001f"," ","!","\"","#","$","%","&","'","(",")","*","+",",","-",".","/","0","1","2","3","4","5","6","7","8","9",":",";","<","=",">","?","@","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","]","\\","]","^","_","`","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","{","|","}","~","\u007f","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""," ","!","C/","PS","$?","Y=","|","SS","\"","(c)","a","<<","!","","(r)","-","deg","+-","2","3","'","u","P","*",",","1","o",">>","1/4","1/2","3/4","?","A","A","A","A","A","A","AE","C","E","E","E","E","I","I","I","I","D","N","O","O","O","O","O","x","O","U","U","U","U","Y","Th","ss","a","a","a","a","a","a","ae","c","e","e","e","e","i","i","i","i","d","n","o","o","o","o","o","/","o","u","u","u","u","y","th","y"],
    
    "1": ["A","a","A","a","A","a","C","c","C","c","C","c","C","c","D","d","D","d","E","e","E","e","E","e","E","e","E","e","G","g","G","g","G","g","G","g","H","h","H","h","I","i","I","i","I","i","I","i","I","i","IJ","ij","J","j","K","k","k","L","l","L","l","L","l","L","l","L","l","N","n","N","n","N","n","'n","ng","NG","O","o","O","o","O","o","OE","oe","R","r","R","r","R","r","S","s","S","s","S","s","S","s","T","t","T","t","T","t","U","u","U","u","U","u","U","u","U","u","U","u","W","w","Y","y","Y","Z","z","Z","z","Z","z","s","b","B","B","b","6","6","O","C","c","D","D","D","d","d","3","@","E","F","f","G","G","hv","I","I","K","k","l","l","W","N","n","O","O","o","OI","oi","P","p","YR","2","2","SH","sh","t","T","t","T","U","u","Y","V","Y","y","Z","z","ZH","ZH","zh","zh","2","5","5","ts","w","|","||","|=","!","DZ","Dz","dz","LJ","Lj","lj","NJ","Nj","nj","A","a","I","i","O","o","U","u","U","u","U","u","U","u","U","u","@","A","a","A","a","AE","ae","G","g","G","g","K","k","O","o","O","o","ZH","zh","j","DZ","Dz","dz","G","g","HV","W","N","n","A","a","AE","ae","O","o"],

    "2": ["A","a","A","a","E","e","E","e","I","i","I","i","O","o","O","o","R","r","R","r","U","u","U","u","S","s","T","t","Y","y","H","h","N","d","OU","ou","Z","z","A","a","E","e","O","o","O","o","O","o","O","o","Y","y","l","n","t","j","db","qp","A","C","c","L","T","s","z","","","B","U","^","E","e","J","j","q","q","R","r","Y","y","a","a","a","b","o","c","d","d","e","@","@","e","e","e","e","j","g","g","g","g","u","Y","h","h","i","i","I","l","l","l","lZ","W","W","m","n","n","n","o","OE","O","F","r","r","r","r","r","r","r","R","R","s","S","j","S","S","t","t","u","U","v","^","w","y","Y","z","z","Z","Z","?","?","?","C","@","B","E","G","H","j","k","L","q","?","?","dz","dZ","dz","ts","tS","tC","fN","ls","lz","WW","]]","h","h","k","h","j","r","r","r","r","w","y","'","\"","`","'","`","`","'","?","?","<",">","^","V","^","V","'","-","/","\\",",","_","\\","/",":",".","`","'","^","V","+","-","V",".","@",",","~","\"","R","X","G","l","s","x","?","","","","","","","","V","=","\"","","","","","","","","","","","","","","","",""],

    "3": ["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","a","e","i","o","u","c","d","h","m","r","t","v","x","","","","","'",",","","","","","","","","","?","","","","","","","","A",";","E","E","I","","O","","U","O","I","A","B","G","D","E","Z","E","Th","I","K","L","M","N","Ks","O","P","R","","S","T","U","Ph","Kh","Ps","O","I","U","a","e","e","i","u","a","b","g","d","e","z","e","th","i","k","l","m","n","x","o","p","r","s","s","t","u","ph","kh","ps","o","i","u","o","u","o","","b","th","U","U","U","ph","p","&","","","St","st","W","w","Q","q","Sp","sp","Sh","sh","F","f","Kh","kh","H","h","G","g","CH","ch","Ti","ti","k","r","c","j","","","","","","","","","","",""],

"4": ["Ie","Io","Dj","Gj","Ie","Dz","I","Yi","J","Lj","Nj","Tsh","Kj","I","U","Dzh","A","B","V","G","D","E","Zh","Z","I","I","K","L","M","N","O","P","R","S","T","U","F","Kh","Ts","Ch","Sh","Shch","'","Y","'","E","Iu","Ia","a","b","v","g","d","e","zh","z","i","i","k","l","m","n","o","p","r","s","t","u","f","kh","ts","ch","sh","shch","'","y","'","e","iu","ia","ie","io","dj","gj","ie","dz","i","yi","j","lj","nj","tsh","kj","i","u","dzh","O","o","E","e","Ie","ie","E","e","Ie","ie","O","o","Io","io","Ks","ks","Ps","ps","F","f","Y","y","Y","y","u","u","O","o","O","o","Ot","ot","Q","q","*1000*","","","","","","*100.000*","*1.000.000*","","","\"","\"","R'","r'","G'","g'","G'","g'","G'","g'","Zh'","zh'","Z'","z'","K'","k'","K'","k'","K'","k'","K'","k'","N'","n'","Ng","ng","P'","p'","Kh","kh","S'","s'","T'","t'","U","u","U'","u'","Kh'","kh'","Tts","tts","Ch'","ch'","Ch'","ch'","H","h","Ch","ch","Ch'","ch'","`","Zh","zh","K'","k'","","","N'","n'","","","Ch","ch","","","","a","a","A","a","Ae","ae","Ie","ie","@","@","@","@","Zh","zh","Z","z","Dz","dz","I","i","I","i","O","o","O","o","O","o","E","e","U","u","U","u","U","u","Ch","ch","","","Y","y","","","","",""],

    "5": ["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A","B","G","D","E","Z","E","E","T`","Zh","I","L","Kh","Ts","K","H","Dz","Gh","Ch","M","Y","N","Sh","O","Ch`","P","J","Rh","S","V","T","R","Ts`","W","P`","K`","O","F","","","<","'","/","!",",","?",".","","a","b","g","d","e","z","e","e","t`","zh","i","l","kh","ts","k","h","dz","gh","ch","m","y","n","sh","o","ch`","p","j","rh","s","v","t","r","ts`","w","p`","k`","o","f","ew","",".","-","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","@","e","a","o","i","e","e","a","a","o","","u","'","","","","","","",":","","","","","","","","","","","","","","b","g","d","h","v","z","kh","t","y","k","k","l","m","m","n","n","s","`","p","p","ts","ts","q","r","sh","t","","","","","","V","oy","i","'","\"","","","","","","","","","",""],

"6": ["","","","","","","","","","","","",",","","","","","","","","","","","","","","",";","","","","?","","","a","'","w'","","y'","","b","@","t","th","j","H","kh","d","dh","r","z","s","sh","S","D","T","Z","`","G","","","","","","","f","q","k","l","m","n","h","w","~","y","an","un","in","a","u","i","W","","","'","'","","","","","","","","","","","0","1","2","3","4","5","6","7","8","9","%",".",",","*","","","","'","'","'","","'","'w","'u","'y","tt","tth","b","t","T","p","th","bh","'h","H","ny","dy","H","ch","cch","dd","D","D","Dt","dh","ddh","d","D","D","rr","R","R","R","R","R","R","j","R","S","S","S","S","S","T","GH","F","F","F","v","f","ph","Q","Q","kh","k","K","K","ng","K","g","G","N","G","G","G","L","L","L","L","N","N","N","N","N","h","Ch","hy","h","H","@","W","oe","oe","u","yu","yu","W","v","y","Y","Y","W","","","y","y'",".","ae","","","","","","","","@","#","","","","","","","","","","","^","","","","","","","0","1","2","3","4","5","6","7","8","9","Sh","D","Gh","&","+m"],

"7": ["//","/",",","!","!","-",",",",",";","?","~","{","}","*","","","'","","b","g","g","d","d","h","w","z","H","t","t","y","yh","k","l","m","n","s","s","`","p","p","S","q","r","sh","t","","","","a","a","a","A","A","A","e","e","e","E","i","i","u","u","u","o","","`","'","","","X","Q","@","@","|","+","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","h","sh","n","r","b","L","k","'","v","m","f","dh","th","l","g","ny","s","d","z","t","y","p","j","ch","tt","hh","kh","th","z","sh","s","d","t","z","`","gh","q","w","a","aa","i","ee","u","oo","e","ey","o","oa","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],

"9": ["","N","N","H","","a","aa","i","ii","u","uu","R","L","eN","e","e","ai","oN","o","o","au","k","kh","g","gh","ng","c","ch","j","jh","ny","tt","tth","dd","ddh","nn","t","th","d","dh","n","nnn","p","ph","b","bh","m","y","r","rr","l","l","lll","v","sh","ss","s","h","","","'","'","aa","i","ii","u","uu","R","RR","eN","e","e","ai","oN","o","o","au","","","","AUM","'","'","`","'","","","","q","khh","ghh","z","dddh","rh","f","yy","RR","LL","L","LL"," / "," // ","0","1","2","3","4","5","6","7","8","9",".","","","","","","","","","","","","","","","","","N","N","H","","a","aa","i","ii","u","uu","R","RR","","","e","ai","","","o","au","k","kh","g","gh","ng","c","ch","j","jh","ny","tt","tth","dd","ddh","nn","t","th","d","dh","n","","p","ph","b","bh","m","y","r","","l","","","","sh","ss","s","h","","","'","","aa","i","ii","u","uu","R","RR","","","e","ai","","","o","au","","","","","","","","","","","+","","","","","rr","rh","","yy","RR","LL","L","LL","","","0","1","2","3","4","5","6","7","8","9","r'","r`","Rs","Rs","1/","2/","3/","4/"," 1 - 1/","/16","","","","",""],

"10": ["","","N","","","a","aa","i","ii","u","uu","","","","","ee","ai","","","oo","au","k","kh","g","gh","ng","c","ch","j","jh","ny","tt","tth","dd","ddh","nn","t","th","d","dh","n","","p","ph","b","bb","m","y","r","","l","ll","","v","sh","","s","h","","","'","","aa","i","ii","u","uu","","","","","ee","ai","","","oo","au","","","","","","","","","","","","","khh","ghh","z","rr","","f","","","","","","","","0","1","2","3","4","5","6","7","8","9","N","H","","","G.E.O.","","","","","","","","","","","","","N","N","H","","a","aa","i","ii","u","uu","R","","eN","","e","ai","oN","","o","au","k","kh","g","gh","ng","c","ch","j","jh","ny","tt","tth","dd","ddh","nn","t","th","d","dh","n","","p","ph","b","bh","m","ya","r","","l","ll","","v","sh","ss","s","h","","","'","'","aa","i","ii","u","uu","R","RR","eN","","e","ai","oN","","o","au","","","","AUM","","","","","","","","","","","","","","","","RR","","","","","","0","1","2","3","4","5","6","7","8","9","","","","","","","","","","","","","","",""],

"11": ["","N","N","H","","a","aa","i","ii","u","uu","R","L","","","e","ai","","","o","au","k","kh","g","gh","ng","c","ch","j","jh","ny","tt","tth","dd","ddh","nn","t","th","d","dh","n","","p","ph","b","bh","m","y","r","","l","ll","","","sh","ss","s","h","","","'","'","aa","i","ii","u","uu","R","","","","e","ai","","","o","au","","","","","","","","","","+","+","","","","","rr","rh","","yy","RR","LL","","","","","0","1","2","3","4","5","6","7","8","9","","","","","","","","","","","","","","","","","","","N","H","","a","aa","i","ii","u","uu","","","","e","ee","ai","","o","oo","au","k","","","","ng","c","","j","","ny","tt","","","","nn","t","","","","n","nnn","p","","","","m","y","r","rr","l","ll","lll","v","","ss","s","h","","","","","aa","i","ii","u","uu","","","","e","ee","ai","","o","oo","au","","","","","","","","","","","+","","","","","","","","","","","","","","","0","1","2","3","4","5","6","7","8","9","+10+","+100+","+1000+","","","","","","","","","","","",""],

"12": ["","N","N","H","","a","aa","i","ii","u","uu","R","L","","e","ee","ai","","o","oo","au","k","kh","g","gh","ng","c","ch","j","jh","ny","tt","tth","dd","ddh","nn","t","th","d","dh","n","","p","ph","b","bh","m","y","r","rr","l","ll","","v","sh","ss","s","h","","","","","aa","i","ii","u","uu","R","RR","","e","ee","ai","","o","oo","au","","","","","","","","","+","+","","","","","","","","","","RR","LL","","","","","0","1","2","3","4","5","6","7","8","9","","","","","","","","","","","","","","","","","","","N","H","","a","aa","i","ii","u","uu","R","L","","e","ee","ai","","o","oo","au","k","kh","g","gh","ng","c","ch","j","jh","ny","tt","tth","dd","ddh","nn","t","th","d","dh","n","","p","ph","b","bh","m","y","r","rr","l","ll","","v","sh","ss","s","h","","","","","aa","i","ii","u","uu","R","RR","","e","ee","ai","","o","oo","au","","","","","","","","","+","+","","","","","","","","lll","","RR","LL","","","","","0","1","2","3","4","5","6","7","8","9","","","","","","","","","","","","","","",""],

"13": ["","","N","H","","a","aa","i","ii","u","uu","R","L","","e","ee","ai","","o","oo","au","k","kh","g","gh","ng","c","ch","j","jh","ny","tt","tth","dd","ddh","nn","t","th","d","dh","n","","p","ph","b","bh","m","y","r","rr","l","ll","lll","v","sh","ss","s","h","","","","","aa","i","ii","u","uu","R","","","e","ee","ai","","o","oo","au","","","","","","","","","","","+","","","","","","","","","RR","LL","","","","","0","1","2","3","4","5","6","7","8","9","","","","","","","","","","","","","","","","","","","N","H","","a","aa","ae","aae","i","ii","u","uu","R","RR","L","LL","e","ee","ai","o","oo","au","","","","k","kh","g","gh","ng","nng","c","ch","j","jh","ny","jny","nyj","tt","tth","dd","ddh","nn","nndd","t","th","d","dh","n","","nd","p","ph","b","bh","m","mb","y","r","","l","","","v","sh","ss","s","h","ll","f","","","","","","","","","aa","ae","aae","i","ii","u","","uu","","R","e","ee","ai","o","oo","au","L","","","","","","","","","","","","","","","","","","","RR","LL"," . ","","","","","","","","","",""],

};


/* ### FILE:sr.all.translations.js    */
/* *********************************************************************

   The following refers only to the various parts of the user coming to fbref
   and getting the translation (t9n) message at the top of the pages on fb.

   NOTE: we also include the languages in the site nav on mobile and desktop
   in those areas we allow the user to select either language. The site nav will
   also include an option to "Reset Language Choice" in English and the site Language if
   different from english

   NOTE: there is more of this code stored in lib/SR/Templates/General/Translation.tt2
   and lib/SR/Templates/Assets/SiteJS.tt2 (only include for fbref),
   We need to define some of the material in a template, so we can drop in all of the
   translated material.
   
This has a very complicated decision tree.

Note that when loaded the t9n message does not show by default,
and we have to add a class 'show' to #translation for it to show.

We also have a counter  sr_lang_views that when it goes < 0 we no longer show the div.  We start it at
4.5

The command to run these functions is either in the Translations.tt2 template or
SiteJS.tt2 for fbref alone.  I'm going to experiment to see if there is a best place
to put it.

There are two cookies that work together here.

sr_lang = {en|es|pt|etc}  (always set to expire ten years in future)
sr_lang_confirmed = {never_question|always_forward|no_second_question}
    (set ten years in future or a session cookie (expire when browser closed)

First off some default cases.

If the user does not allow cookies, show nothing, we check this with Modernizr.cookies
If the user does not have js, show nothing, this happens by default.

Next, first visit, no cookies are set.

   Show the default question
  Welcome, football fans from around the world!</div>
  Use FBref in: English or Español

  This is on English site, so English is not a link, and Espanol is a link to the spanish page
  If user clicks Espanol, set a cookie sr_lang = 'es',
  If user clicks the closer, set a cookie sr_lang = 'en',

  During first visit, sr_lang_confirmed is never set
  
==Second visit== (user should only have sr_lang set)

  if user ignored the question the first time it shows up again here.
    (note if they do nothing for 4 page views we just stop showing it for this language, but
      can still show it for another language)

  if user is on the site that matches their choice with sr_lang,
    do nothing as they are seeing site in their chosen language

  If not, (ie user has sr_lang = 'es' and is on english page)

  Ask "¿Ir a esta página en español? SI o NO" (go to this page in Spanish?)

  ==ON ANY VISIT WHEN sr_lang is set==
  If user clicks the closer, we set a session cookie that they don't
  want to answer this question again.  sr_lang_confirmed = 'never_question'
   (Q: we could assume this means their language is wrong and reset their language in this case)
   currently, if sr_lang_choice is already set we don't override their choice.
   
  If the user answers yes or no, we remove the closer div and as we don't know what
  their intent is if they click it at that point.
  
  If the user says "YES", ask a followup.
  "¿Siempre te enviamos a la página de español en futuras visitas? SI o NO"
  "Do you want us to always forward you to the spanish page on future visits? YES or NO"

       If YES, add cookie sr_lang_confirmed='always_forward' as a long-term cookie.
       Then forward them to spanish page via js.

       If NO, set sr_lang_confirmed = 'no_second_question' as a session cookie,
       then forward them to spanish page via js.

   If the user says "NO" to "¿Ir a esta página en español? SI o NO", ask a followup.
   "¿Continuar preguntando esto en futuras visitas? SI o NO"
   "Continue asking this on future visits?  YES or NO", closer div is hidden.

        If YES, they want to be asked next time on site, but not fwd'ed this time
        so set session cookie on sr_lang_confirmed = 'no_second_question'

	If NO, they don't want to see this message again and just want to be left alone
	so set long-term cookie on sr_lang_confirmed = 'never_question',
	we also set their sr_lang ='' as they don't seem to have a language preference.


==THIRD+ visit== (user should have sr_lang and sr_lang_confirmed set)
	
   sr_lang='' && sr_lang_confirmed ='always_forward',
       this should be impossible, so we delete the two cookies and do nothing.

   sr_lang='es|en|etc' && sr_lang_confirmed ='always_forward',
       if they aren't on their default, use js to fwd them along.

   sr_lang_confirmed = 'never_question'  just don't show the div

   Else if lang matches their choice, then do nothing

   Else, then lang doesn't match their choice

      IF sr_lang_confirmed === '') we do the same as the 2nd visit

      Otherwise sr_lang_confirmed = 'no_second_question',
          and we either forward or close the div based on their answer to
	  "¿Ir a esta página en español? SI o NO" and no followup question is given.
   
   ********************************************************************* */

/* *********************************************************************
   # Usage       :   sr_reset_trans_choice();
   # Purpose     :   remove both language related cookies
   # Returns     :   nothing
   # Parameters  :   none
   # Throws      :
   # See Also    :
   # Comments    :   this is a fail-safe for the translation setup
   ********************************************************************** */
function sr_reset_trans_choice () {
    vjs_eraseCookie(sr_lang_cookie);
    vjs_eraseCookie(sr_lang_confirmed_cookie);
    sr_record_analytics_event('translations','reset-choice',sr_lang_curr);

    // then reload the page
    location.reload();
}

/* *********************************************************************
   # Usage       :   sr_set_trans_choice(lang, do_close, is_closer);
   # Purpose     :   set a cookie for the language this user wants and then optionally close the translation div
   # Returns     :   nothing
   # Parameters  :   two-letter lang code, boolean for do_close, boolean for if the closer was used to get here
   # Throws      :
   # See Also    :
   # Comments    :   note that most of our vars here are set in the header
   #                 of the file, these can only be called when those vars are set.
   ********************************************************************** */
function sr_set_trans_choice (lang, do_close, is_closer) {
    // If we have a lang set and we are using the closer, don't change the cookie
    if (sr_lang_choice && is_closer) {
	vjs_createCookie(sr_lang_confirmed_cookie, 'never_question', 0);
        sr_record_analytics_event('translations', 'set-never-question', sr_lang_curr + '-' + sr_lang_choice + '-closer');
    }       
    else {
	vjs_createCookie(sr_lang_cookie, lang, 3650);
        sr_record_analytics_event('translations', 'set-sr_lang_cookie', sr_lang_curr + '-setto-' + lang);
    }
    if (do_close) { sr_trans_el.className = ''; }
}

/* *********************************************************************
   # Usage       :   sr_confirms_trans_choice(lang, do_close);
   # Purpose     :   sets the second cookie and allows for more options how we
                      handle different t9n issues. this shows up on 2nd+ visits
   # Returns     :   nothing
   # Parameters  :   two-letter lang code,
                     choice - answer to first question
		     confirmation - answer to 2nd question.
   # Throws      :
   # See Also    :
   # Comments    :   note that most of our vars here are set in the header
   #                 of the file, these can only be called when those vars are set.
   ********************************************************************** */
function sr_confirm_trans_choice (lang, choice, confirmation) {
    
    // Confirm this choice, so we always forward it.
    if (choice === 'yes'  && confirmation == 'yes') {
	vjs_createCookie(sr_lang_confirmed_cookie, 'always_forward', 3650);
        sr_record_analytics_event('translations', 'set-always-forward', sr_lang_curr + '-yesyesto-' + lang);
        if(sr_lang_choice_url == ''){
            // sr_lang_choice_url being an empty string caused an infinite redirect -- remove translation div instead of redirecting
            sr_trans_el.className = ''; 
        }
        else{
            window.location.href = sr_lang_choice_url;
        }
    }
    // User does not always want to forward every time, but wants to fwd this time.
    // we set a session cookie to no_second_question, so the question isn't repeated on this run.
    else if (choice === 'yes' &&  confirmation === 'no') {
	vjs_createCookie(sr_lang_confirmed_cookie, 'no_second_question', 0);
	sr_lang_confirmed  = 'never_question';
        sr_record_analytics_event('translations', 'set-never-question', sr_lang_curr + '-yesnoto-' + lang);
	window.location.href = sr_lang_choice_url;
    }
    // User doesn't want to be forwarded, but still ask, just leave the cookies and close the div.
    else if (choice === 'no'  && confirmation == 'yes') {
	vjs_createCookie(sr_lang_confirmed_cookie, 'no_second_question', 0);
        sr_record_analytics_event('translations', 'set-no-second-question', sr_lang_curr + '-noyesto-' + lang);
	sr_trans_el.className = ''; 
    }
    // User doesn't want to be fwd'ed and doesn't want to be asked.
    else if (choice === 'no' &&  confirmation === 'no') {
	vjs_createCookie(sr_lang_confirmed_cookie, 'never_question', 3650);
        sr_record_analytics_event('translations', 'set-never-question', sr_lang_curr + '-nonoto-' + lang);
	sr_set_trans_choice('', true);
    }
    // user wants to be forwarded, but doesn't want to be pestered
    // with the second question, then we just fwd them.
    else if (choice === 'yes' && sr_lang_confirmed === 'no_second_question') {
        sr_record_analytics_event('translations', 'has-no-second-question', sr_lang_curr + '-yesto-' + lang);
        window.location.href = sr_lang_choice_url;	
    }
    // user doesn't want to be forwarded, but still wants to be asked
    // in the future, just close the div.
    else if (choice === 'no' && sr_lang_confirmed === 'no_second_question') {
        sr_record_analytics_event('translations', 'has-no-second-question', sr_lang_curr + '-noto-' + lang);
        sr_trans_el.className = ''; 
    }
    // User is answering yes to the first question as to
    // whether they want to be auto-fwd'ed
    else if (choice === 'yes') {
        sr_record_analytics_event('translations', 'answered-q1-yes', sr_lang_curr + '-yesto-' + lang);

        // remove teh closer, so they don't do something ambiguous we
        // can't properly interpret their intent from
        vjs_removeChild(sr_trans_closer_el);

        // add the second question to the div
        sr_trans_use_el.innerHTML = sr_lang_hash[lang].autoforward;

        var langs_el = '&nbsp;&nbsp;<a href="javascript:void(0)" onclick="sr_confirm_trans_choice(' 
			+ "'" + lang + "', " + "'yes', " + "'yes'"
			+ ')">' + sr_lang_hash[lang].yes + '</a>&nbsp;&nbsp; '
			+ sr_lang_hash[lang].or_word
			+ '&nbsp;&nbsp;<a href="javascript:void(0)" onclick="sr_confirm_trans_choice(' 
			+ "'" + lang + "', " + "'yes', " + "'no'" 
			+ ')">' + sr_lang_hash[lang].no + '</a>&nbsp;&nbsp; '
		;
        sr_trans_langs_el.innerHTML = langs_el;
    }
    // User is answering no to the 1st question as to
    // whether they want to be fwd'ed.
    else if (choice === 'no') {
        sr_record_analytics_event('translations', 'answered-q1-no', sr_lang_curr + '-noto-' + lang);
        vjs_removeChild(sr_trans_closer_el);

       // add the new text to the div.
        sr_trans_use_el.innerHTML = sr_lang_hash[lang].continue;

        var langs_el = '&nbsp;&nbsp;<a href="javascript:void(0)" onclick="sr_confirm_trans_choice(' 
			+ "'" + lang + "', " + "'no', " + "'yes'" 
			+ ')">' + sr_lang_hash[lang].yes + '</a>&nbsp;&nbsp; '
			+ sr_lang_hash[lang].or_word
			+ '&nbsp;&nbsp;<a href="javascript:void(0)" onclick="sr_confirm_trans_choice(' 
			+ "'" + lang + "', " + "'no', " + "'no'" 
			+ ')">' + sr_lang_hash[lang].no + '</a>&nbsp;&nbsp; '
		;
        sr_trans_langs_el.innerHTML = langs_el;
    }
    
}


/* ### FILE:fb.mod.front.js    */
// todo: remove the function calls within this and move to sr.jsload.js

var sr_goto_json = (typeof sr_goto_json === 'undefined') ? {} : sr_goto_json;
/* *********************************************************************
   # Usage       :   fb_front_setupPlayerRoster
   # Purpose     :   set up the select boxes for selecting players form the big 6
   # Returns     :   nothing
   # Parameters  :   none
   # Throws      :
   # See Also    :

   # Comments    :   note that we only add the selects when localstorage is
                 :    available
                 :
   ********************************************************************** */
function fb_front_setupPlayerRoster () {
	console.log('   ### fb_front_setupPlayerRoster:running');

    // Stock the data into the main_nav set of li's.  This used to use
    // onbeforeshow, but that caused some stuttering when users tried
    // to use it, so I'm now getting this data ASAP and storing it in
    // sessionStorage, so we can use it later.  This is set using ajax
    // because it changes hourly and this way it is updated for each
    // session for the user.  Check to make sure we have a main_nav and
    // sessionstorage, don't bother if not.
	if (!document.getElementById('player_roster') || !Modernizr.sessionstorage) {
		return false;
	}

    // Check to see if we are storing a lang here
    var session_storage_key = 'fb_player_roster_' + Modernizr.lang;
    console.log('   ### fb_front_setupPlayerRoster: key:' + session_storage_key);

    // this is for debugging to force a reload.
    if ((typeof sr_is_production !== "boolean") || !sr_is_production) {	
	console.log('   ### fb_front_setupPlayerRoster:purging localStorage:' + session_storage_key);
	sessionStorage.removeItem(session_storage_key);
    }
    
    // check session storage for the item.
	var player_roster_data = sessionStorage.getItem(session_storage_key);
	if (player_roster_data) {
		console.log('    ### fb_front_setupPlayerRoster:key in session_storage');
		fb_front_setupPlayerRoster_dropdowns(JSON.parse(player_roster_data));
	}
    // the try for teh file failed, so we just keep failing here.
    else if (window.sessionStorage['fb_player_roster_failed']) {
        console.log('   ### fb_player_roster_retrieval: previously failed.');
        return false;
    }
    else {
        console.log('   ### fb_front_setupPlayerRoster:key retrieval in session_storage');
	// retrieve the data via ajax TODO: make this cdn specific.
	var json_url     =  sr_SITE_CDN + '/inc/front/player_front' + '_' + Modernizr.lang + '.json';
	console.log('   ### fb_front_setupPlayerRoster: running  pre-set url:' + json_url);
	
	// retrieve the json, and set into main_nav.  note that this
	// is via AJAX, so we need to split off the
	// fb_front_setupMainNav_dropdowns as it's own function and
	// can't just run that code at the end of this one.  Took me a
	// while to figure that out.	
	vjs_getJson(json_url, {},
       		    function(data) {
			// store in session storage.
			sessionStorage.setItem(session_storage_key,
					       JSON.stringify(data));
			// push to #main_nav
			fb_front_setupPlayerRoster_dropdowns(data);
		    },
                    // on failure set a marker, so we don't try again.
		    function() {
                        console.log('   ### fb_front_setupPlayerRoster: file retrieval failed, url: ' + json_url);
                        window.sessionStorage['fb_player_roster_failed'] = true;
                    },
		    true
		   );	
    }
    return true;
}


function fb_front_setupPlayerRoster_dropdowns(data_json) {
    var goto = document.getElementById('player_roster');

    // make sure sr_goto_json is defined and we have the form needed here.
    if ((typeof sr_goto_json !== 'undefined') && goto) {
	sr_goto_json["player_json"] = data_json;

	// run the
	sr_form_setup_goto_page(goto);
    }
}

/* *********************************************************************
# Usage       :   
# Purpose     :   
# Returns     :   
# Parameters  :   
# Throws      :   
# See Also    :   
********************************************************************** */
function fb_front_country_choice(selected_country) {
    console.log('   ### fb_front_country_choice:  running' + ', selected_country: ' + selected_country);

    // for the newly gendered includes (2019-04-09) we place the -m on the end here.
    if (selected_country && !selected_country.endsWith('-f') && !selected_country.endsWith('-m')) {
	selected_country = selected_country + '-m';
	console.log('   ### fb_front_country_choice ' + ' updating selected_country: ' + selected_country);
    }


    var fb_country_choice_storage_key  = 'fb_front_country_choice_' + Modernizr.lang;
    var fb_country_choice_cookie  = 'fb_front_country';
    var country_choice_data   = sessionStorage.getItem(fb_country_choice_storage_key);
    var country_choice_cookie = vjs_readCookie(fb_country_choice_cookie);

    // in the case where a previous choice was a non-gendered league
    // we overwrite that here.
	if (country_choice_cookie && !country_choice_cookie.endsWith('-f') && !country_choice_cookie.endsWith('-m')) {
		selected_country = country_choice_cookie + '-m';

		// delete the sessionstorage and the cookie
		vjs_createCookie(fb_country_choice_cookie, null, -1);
		sessionStorage.setItem(fb_country_choice_storage_key, null);

		console.log('   ### fb_front_country_choice   updating country_choice_cookie: ' + country_choice_cookie);
	}

    

    
    if (selected_country) {
	var country_url     =  sr_SITE_CDN + '/inc/front/' + selected_country + '_' + Modernizr.lang + '_index.html_f';
	console.log('   ### fb_front_country_choice:  pre-set url:' + country_url);
	
	// retrieve the html snip, and set into #fb_front_country_large.
	vjs_getAjax(country_url, {},
       		    function(data) {
			// store in session storage.
			vjs_createCookie(fb_country_choice_cookie,selected_country, 3650);
			sessionStorage.setItem(fb_country_choice_storage_key,data);
			// push to #main_nav
			fb_front_countryChoice_insert(data);
			fb_front_countryChoice_update_small(selected_country);
		    },
                    // on failure set a marker, so we don't try again.
		    function() {
			console.log('   ###  fb_front_country_choice: file retrieval failed, url: ' + country_url);
			fb_front_countryChoice_default();
			window.sessionStorage['fb_country_choice_failed'] = true;
                    },
		    true
		   );	
		
    }
    // first see if we have the data for a country in session storage.
    else if (country_choice_data) {
	// check session storage for the item.
        console.log('    ### fb_front_country_choice: we have the data in session storage.');
	sr_record_analytics_event('fbref','front-country-choice','session-storage');
	fb_front_countryChoice_insert(country_choice_data);
	fb_front_countryChoice_update_small(country_choice_cookie);
    }
    else if (country_choice_cookie) {
	// check session storage for the item.
        console.log('    ### fb_front_country_choice: we have a country, but need to load the data.');
	sr_record_analytics_event('fbref','front-cookieset',selected_country);
	fb_front_country_choice(country_choice_cookie);
    }
    // the try for teh file failed, so we just keep failing here.
    else {
	if (window.sessionStorage['fb_country_choice_failed']) {  console.log('   ### fb_front_country_choice: _retrieval previously failed.'); }
	fb_front_countryChoice_default();
    }
}


/* *********************************************************************
# Usage       :   fb_front_countryChoice_update_small(country)
# Purpose     :   
# Returns     :   
# Parameters  :   country like USA-w
# Throws      :   
# See Also    :   This runs through all of the leagues and then
#                  hides the small display div for the country if they
#                  are the big default league.
********************************************************************** */
function fb_front_countryChoice_update_small(country) {
    console.log('    ### fb_front_country_choice_update_small country: ' + country);

    // the toUpper was used previously as a belt and suspenders, but I don't think it's needed now
    // country = country.toUpperCase();

    var divs_small = document.querySelectorAll('#leagues_m > div, #leagues_f > div');
    vjs_forEach.call(divs_small, function(div, i) {
	vjs_removeClass(div,'hidden');
    });

    var div = document.getElementById('mini-' + country);
    if (div) {
	vjs_addClass(div,'hidden');
    }

    // next if they have a women's league selected as their top
    // choice, show the women's leagues first and then after that show
    // the other.
    var is_female_choice = (country && country.endsWith('-f'));

    // check to see that we have the ids we expect in primary and secondary
    if (is_female_choice && (document.querySelector('#leagues_primary > #leagues_m') !== null) && (document.querySelector('#leagues_secondary > #leagues_f') !== null)) {
	console.log('    ### fb_front_country_choice_update_small choice was womens so SWAP.');
	_fb_front_swap_leagues();
    }
    else if (!is_female_choice && (document.querySelector('#leagues_primary > #leagues_f') !== null) && (document.querySelector('#leagues_secondary > #leagues_m') !== null)) {
	console.log('    ### fb_front_country_choice_update_small choice was mens so SWAP.');
	_fb_front_swap_leagues();
    }

    
}

function _fb_front_swap_leagues() {
	// swap leagues_primary and leagues_secondary.
	var div_primary   = document.getElementById('leagues_primary');
	var div_secondary = document.getElementById('leagues_secondary');
	var html_primary = div_primary.innerHTML;
	div_primary.innerHTML = div_secondary.innerHTML;
	div_secondary.innerHTML = html_primary;
	
}

/* *********************************************************************
# Usage       :   
# Purpose     :   
# Returns     :   
# Parameters  :   
# Throws      :   
# See Also    :   
********************************************************************** */
function fb_front_countryChoice_default() {
    var div_fave = document.getElementById('fave');
    var div_fave_default = document.getElementById('fave_default');

    var default_country = Modernizr.lang === 'en'? 'ENG':
	    Modernizr.lang === 'es'? 'ESP':
	    Modernizr.lang === 'pt'? 'BRA':
	    Modernizr.lang === 'de'? 'GER':
	    Modernizr.lang === 'fr'? 'FRA':'ENG';

    fb_front_countryChoice_update_small(default_country);
    
    // make sure sr_goto_json is defined and we have the form needed here.
    if (div_fave_default) {
	div_fave_default.style.display = 'block';
	vjs_removeClass(div_fave_default, 'skeleton');
	if (div_fave) {
	    vjs_removeClass(div_fave, 'skeleton');
	    div_fave.style.display = 'none';
	}
    }
    else {
	return false;
    }
    // put an onchange on the select for the inserted html
    var select = div_fave_default.querySelector('.sr_fb_fave');
    if (select) {
	select.onchange = function (evt) {
	    sr_record_analytics_event('fbref','front-cookiecreate',this.value);
	    fb_front_country_choice(this.value);
	};
    }
}
 

function fb_front_countryChoice_insert(data) {
    var div_fave = document.getElementById('fave');
    var div_fave_default = document.getElementById('fave_default');

    // make sure sr_goto_json is defined and we have the form needed here.
    if (div_fave) {
	div_fave.innerHTML = data;
	div_fave.style.display = 'block';
	vjs_removeClass(div_fave, 'skeleton');
	if (div_fave_default) {
	    vjs_removeClass(div_fave_default, 'skeleton');
	    vjs_removeChild(div_fave_default);
	}
    }
    else {
	return;
    }
    
    // put an onchange on the select for the inserted html
    var select = div_fave.querySelector('.sr_fb_fave');
    if (select) {
	select.onchange = function (evt) {
	    sr_record_analytics_event('fbref','front-cookiecreate',this.value);	    
	    fb_front_country_choice(this.value);
	};
    }
}


/* ### FILE:sr.all.analytics.js    */

/* *********************************************************************
   # Usage       :   sr_record_analytics_event
   # Purpose     :   registers an event with google analytics
   # Returns     :   nothing
   # Parameters  :   category, label, value, tracker (set to 'sr_tracker' to record for all sites)
   # Throws      :
   # See Also    :
   # Comments : http://stackoverflow.com/a/2901298/425449
   # sf(2023-08-16)  https://support.google.com/analytics/answer/11091025?hl=en&ref_topic=11091421&sjid=4802502926485251471-NA#zippy=%2Cin-this-article
   # examples sr_record_analytics_event('note_box_show',document.location.hostname, sr_record_directory(),'sr_tracker');
              sr_record_analytics_event('page tool view',sr_record_directory(),statsTableId);

   # In universal analytics we sent gtag('event',label,    { parameters (category and value) }
   # In GA4 this changes to         gtag('event',category, { parameters (label and value)    }
 ********************************************************************** */
function sr_record_analytics_event(category, label, value, tracker) {
    console.log('   ### sending analytics:' + category + ':' + label + ':' + value);
    try {
	var send = 'send';
	if (tracker) {
	    send = tracker + '.send';
	}
	var eventOptions = {
		'event_value': value,
		'event_label': label || 'none',
	};
	if (tracker) eventOptions['send_to'] = tracker;
	/*            action,          configuration */
	gtag('event', category || 'none', eventOptions);
    } catch (err) {  console.log('analytics-error'); console.log(err); }
}

// http://stackoverflow.com/questions/7483701/grab-immediate-directory-on-url
function sr_record_directory () {
    var paths = document.location.pathname.split("/");
    return paths[1];
}
function sr_record_page () {
    var paths = document.location.pathname.split("/").reverse();
    return paths[0];
}
function sr_record_nearest_parent_id (el) {
    var parent = vjs_closest(el,'[id]');
    if (parent) { return parent.id; }    
    return 'none';
}



/* *********************************************************************
   # Usage       :   sr_record_page_link_clicks
   # Purpose     :   registers an event with google analytics that a link was clicked and where
   # Returns     :   nothing
   # Parameters  :   element (optional), we use document else, this sets a bunch of onclicks for the links on the page, just home for now
   # Throws      :
   # See Also    :
   # Comments : http://stackoverflow.com/a/2901298/425449
   ********************************************************************** */
function sr_record_page_link_clicks(element) {

    
    // Only get the front pages
    if (sr_SITE_ABB !== 'stathead' &&
	document.location.pathname !== '/' &&
	document.location.pathname !== '/cfb/' &&
	document.location.pathname !== '/cbb/' &&
	document.location.pathname !== '/es/' &&
	document.location.pathname !== '/fr/' &&
	document.location.pathname !== '/de/' &&
	document.location.pathname !== '/pt/' &&
	document.location.pathname !== '/ru/' &&
	document.location.pathname !== '/pl/' &&
	document.location.pathname !== '/en/') {
	console.log('   ### skipping sr_record_page_link_clicks');
	return false;
    }
    console.log('   ### setting up sr_record_page_link_clicks');

    // get the document if no element is passed.
    element = element || document;
    // run through all of the links on the page.
	var elements;
	if (sr_SITE_ABB === 'stathead') {
		elements = element.querySelectorAll('a,input,select,button');
	}
	else {
		elements = element.getElementsByTagName('a');
	}
	for (var i = 0, len = elements.length; i < len; i++) {
		// use has_click_track here so we don't double-count click tracking
		if (!elements[i].has_click_track) {
			elements[i].has_click_track = true;
			vjs_addEvent(elements[i],'click',function () {
			var href = this.href || this.tagName;
			href = href.replace(/.*fbref.com./,'sr:');
			href = href.replace(/.*-reference.com./,'sr:');

			var idNear = sr_record_nearest_parent_id(this);
			sr_record_analytics_event('click_from_to',document.location.pathname, href + '||' + idNear);
			// alert('click_from_to:'.concat(document.location.pathname, ',', href.concat('||',idNear)));
			});
		}
	}

	console.log('## added click tracking to elements numbering: ' + elements.length);
}

/* ### FILE:sr.all.perf.js    */
/* NOTE THAT log_peformance is set to false in modernizr and reset to true here. */
log_performance = true;
if (sr_is_production) { log_performance = false; }
/* *********************************************************************
   ********************************************************************** */
/* 
# sr.perf.js
# Sean Forman
# sean-forman@sports-reference.com

# $Date $
# $Author $
# $Rev $
# Copyright 2000-2010, SPORTS REFERENCE, LLC  All rights reserved.

# the performance measurement library for sr's js
*/

/* the following are defined in the header of the page 
 var sr_time_begin = new Date();
 var sr_perf_startTime = new Date();
 var sr_perf_log = "<strong>Performance:</strong>\n";
 var sr_perf_lastTime = new Date();
 sr_perf_logPerformance('starting js');
*/

/* *********************************************************************
# Usage       :   sr_perf_setStartTime()
# Purpose     :   sets the starting time for when the page is first received.
# Returns     :   nothing
# Parameters  :   none
# Throws      :
# See Also    :
# Comments    :
********************************************************************** */
function sr_perf_setStartTime() { 
    sr_perf_startTime = new Date();
}

/* *********************************************************************
# Usage       :   sr_perf_alertLog()
# Purpose     :   alerts performance data to the user
# Returns     :   
# Parameters  :   none
# Throws      :
# See Also    :
# Comments    :
********************************************************************** */
function sr_perf_alertLog() { 
    alert(sr_perf_log);
}

/* *********************************************************************
# Usage       :   sr_perf_appendLog()
# Purpose     :   appends performance data to the bottom of the page.
# Returns     :   adds html to the bottom of the page.
# Parameters  :   none
# Throws      :
# See Also    :
# Comments    :
********************************************************************** */
function sr_perf_appendLog(append) { 
    var warnings = document.getElementById('suppress_warnings');
    if (warnings) return false;


    var el = document.getElementById('wrap');
    if (!el) {
	el = document.querySelector('body>div');
    }
    var node = document.getElementById('perflog');
    if (!node) {
        node = document.createElement('div');
        el.appendChild(node);
    }
    node.id = 'perflog';
    node.className = 'pagelog';
    if (append) {
        node.innerHTML = '<pre>' + sr_perf_log + '</pre>';
    }
    else {
        node.innerHTML = node.innerHTML + '<pre>' + sr_perf_log + '</pre>';
    }
       
}

/* *********************************************************************
# Usage       :   sr_perf_consoleLog()
# Purpose     :   appends performance data to the console.log
# Returns     :   
# Parameters  :   none
# Throws      :
# See Also    :
# Comments    :
********************************************************************** */
function sr_perf_consoleLog() { 
    console.log(sr_perf_log);
}


/* *********************************************************************
# Usage       :   sr_perf_logPerformance()
# Purpose     :   appends performance data to the log for printing later
# Returns     :   adds html to the bottom of the page, and returns the time for this segment
# Parameters  :   text to add in log, nothing added if blank
# Throws      :
# See Also    :
# Comments    :
********************************************************************** */
function sr_perf_logPerformance(text) { 
    var endTime = new Date();
    // calculate the elapsed time between the start and the end. 
    // This is in milliseconds
    var loadTime = endTime.getTime() - sr_perf_startTime.getTime();
    var runTime = endTime.getTime() - sr_perf_lastTime.getTime();
    if (text) {
	sr_perf_log = sr_perf_log + "\n" + text + "\tload\t" + loadTime + "ms\t" + "\trun\t" + runTime + "ms";
    }
    sr_perf_lastTime = endTime;
    return runTime;
}




/* *********************************************************************
# Usage       :   sr_modernizr_appendLog()
# Purpose     :   appends performance data to the bottom of the page.
# Returns     :   adds html to the bottom of the page.
# Parameters  :   none
# Throws      :
# See Also    :
# Comments    :
********************************************************************** */
function sr_modernizr_append() { 
    var warnings = document.getElementById('suppress_warnings');
    if (warnings) return false;

    console.log('   ### setting sr_modernizr_append');
    var node = document.createElement('div');
    node.id = 'modernizr';
    node.className = 'pagelog';
    var innerhtml = '<p>' + 'Modernizr classes: ' + document.documentElement.className + '</p>';
    for (var key in Modernizr) {
	innerhtml = innerhtml + '<br> ' + key + ' : '+ Modernizr[key];
    }
    innerhtml = innerhtml + '<br> Modernizr.viewport_width : ' + Modernizr.viewport_width;
    node.innerHTML = innerhtml;

    var el = document.getElementById('wrap');

    if (!el) {
	el = document.querySelector('body>div');
    }
    if (el) {
	el.appendChild(node);
    }
}

if (!sr_is_production) {
    sr_utilities_js_loader.push(sr_modernizr_append);
}

/* ### FILE:sr.all.auth.js    */


/* *********************************************************************
    # Usage       :   stathead_auth_login
    # Purpose     :   add stathead specific login for the sites and updates the user's login status on every page.
    # Returns     :   nothing
    # Parameters  :   none
    # Throws      :
    # See Also    :

    # Comments :  Originally written by MK, rewritten by SF 2015-07-07 for non jq

  ********************************************************************** */
// give the cookie a name in a var
// This is set to 'stathead_user' within the sr.mod.jsFire.js
const sr_auth_cookie = 'stathead_user';

// with the new stathead stuff, the site-based cookies are only for
// ad-free stuff and showing the user ID in the header. we set the local
// cookie when we receive an auth_token and timestamp in the header
// by calling our local /auth/ directory which then makes a backend call
// to stathead.com to validate the token/check the timestamp and return
// a session ID to be set here
function sr_auth_login() {
    
	console.log("%c**** AUTH LOGIN START","background: red; color: white");
	if(!document.querySelector('.logged_in.user')) {
		return;
	}
    
	let sr_cookie = vjs_readCookie(sr_auth_cookie);
    
	// check to see if we have a stathead_user cookie for this user.
	// if yes, check the cookie.
	// if no, we give them the option to login.
	if (sr_cookie) {
		// the cookie contains   display_name::username::etcetc
		let user_data = sr_cookie.split(/::/);

		if (user_data[1]) {

			// set the html to logged_in.
			document.body.classList.add('user_logged_in');

			// change the appearance of the login and logout buttons.
			let logins = document.querySelectorAll('.logged_in');

			logins.forEach((login) => {
				let elUser = login.querySelector('.username');
				if (elUser) {
					elUser.innerHTML = " " + user_data[0];
				}
			});
			
		}
    }
}




/* **************************************************************************************
 This just cleans up the header and removes the values for username and
 reinstates the logout button. 
 *************************************************************************************/
function sr_auth_logout_page_elements() {   
	console.log('   ### starting sr_auth_logout_page_elements');

	// blank the cookie and removed logged_in elements
	vjs_createCookie(sr_auth_cookie, '');
	vjs_createCookie('stathead_type', '');
	vjs_createCookie('stathead_site', '');

	document.body.classList.remove('user_logged_in');

	let logins = document.querySelectorAll('.logged_in');
	logins.forEach((login) => {
		let elUser = login.querySelector('.username');
		if (elUser) {
			elUser.innerHTML = '';
		}
	});

}


/* ### FILE:sr.all.commentContent.js    */
/* *********************************************************************
# Usage       :   sr_cc_show_commented_content(id)
# Purpose     :   adds commented out html into the dom for responsive purposes
# Returns     :   nothing
# Parameters  :   el is the .table_wrapper div object element
# Throws      :   
# See Also    :   
********************************************************************** */
function sr_cc_show_commented_content(el, elClicked) {
	var content = '';

	// get the commented content.
	for (var i = 0, max = el.childNodes.length; i < max; i++) {
		// node type 8 is comment, concat textContent to content
		if((el.childNodes[i].nodeType) && el.childNodes[i].nodeType === 8) {
			content = content + el.childNodes[i].textContent;
		}
	}

	if (content.length > 0) {
		el.insertAdjacentHTML('beforeend',content); 
	}
	vjs_removeClass(el,'commented');
    

	// Hide the control
	// "elClicked" will exist if we are coming here from an event of clicking the opener button
	//  the clicked element is that button itself
	// (elClicked doesn't exist when we come here to just open the table automatically - such as for tablets - so there's no need to set up the 'closer' functionality)
	if (elClicked) {
		vjs_addClass(elClicked,'hidden');

		// add a closer to the containing div.
		// when clicked you should undo the show.
		el.insertAdjacentHTML('afterbegin','<div class="closer" aria-label="close opened section" role="button"></div>');
		var closer = el.querySelector('.closer');
		if (closer) {
			closer.onclick = function () {
				closer.parentNode.removeChild(closer);

				var button = el.querySelector('button.comment_control');
				vjs_removeClass(button, 'hidden');
				var table = el.querySelector('.table_wrapper > .table_container, .data_grid, .section_content');
				if (table) {
					vjs_removeChild(table);
					// Check for a .footer below the table.
					var footer = el.querySelector('.footer');
					vjs_removeChild(footer);
					vjs_addClass(el,'commented');
					vjs_removeClass(el,'long_note');
				}
				if(vjs_hasClass,'tabbed') {
					var tabbed_table_els = el.querySelectorAll('.section_heading,.switcher,.switcher_content,.footer');
					vjs_forEach.call(tabbed_table_els, function(ttel, idx) {
						vjs_removeChild(ttel);
					});
					vjs_addClass(el,'commented');
					vjs_removeClass(el,'long_note');
				}
				var long_button = el.querySelector('.comment_control.long');
				vjs_removeChild(long_button);
			};
		}

		// for the stats_tables in the section that we are expanding set them up.
		var stats_tables = el.querySelectorAll('.stats_table,.data_grid');
		vjs_forEach.call(stats_tables, function(stats_table, idx) {
			if (vjs_hasClass(stats_table,'stats_table')) {
				if (vjs_hasClass(el,'long')) {
					sr_cc_setup_long_div(el);
				}
				sr_st_construct_stats_table_features(stats_table.id, false);
			}
			else if (vjs_hasClass(stats_table,'data_grid')) {
				sr_st_construct_data_grid_features(stats_table.id, false);
			}
		});
	}

	// set up the goto_forms for this previously commented section.
	var goto_forms = el.querySelectorAll('form.sr_goto');
	vjs_forEach.call(goto_forms, function(goto_form, idx) {
		sr_form_setup_goto_page(goto_form);
	});

	// restore setOpeners to fix bbr #226 (zs)
	// an additional check is implemented in sr.menus.js in order to
	// avoid duplicating event listeners
	sr_menus_setOpeners(el);
	
	sr_chosen_enable_select(el);

	if(el.querySelector('.switcher')) {
		var this_switcher = el.querySelector('.switcher');
		// have to reset to false because there was a previous setup attempt prior to un-commenting
		this_switcher.is_setup = false;
		sr_menus_setSwitchers(this_switcher);
	}

	sr_setup_presets(el);
    
	// for pfr we need to check if there is a chart to add.
	if (typeof google !== 'undefined') {
		var chart = el.querySelector('#chart');
		if (chart) {
			var sr_chart_type = vjs_getAttr(chart,'data-chart-type') || 'LineChart';
			console.log("### sr_chart_type: " + sr_chart_type);
			var chartClickHandler = function () { };
			google.load('visualization', '1.1', {
				packages: ['corechart'],
				callback: function() {
					// needed to prevent a doc.write.
					sr_chart_data =  new google.visualization.DataTable();
					sr_drawChart();
					google.visualization.events.addListener(chart, 'select', chartClickHandler);
					
					var wrapper = new google.visualization.ChartWrapper({
						chartType: sr_chart_type,
						// these two are defined in the page.
						dataTable: sr_chart_data,
						options: sr_chart_options,
						containerId: 'chart',
					});
					wrapper.draw();
					if (sr_chart) {
						sr_chart = wrapper.getChart();
					}
				}
			} );
		}
    }
}


/* *********************************************************************
# Usage       :   sr_cc_setup_commented_divs(id)
# Purpose     :   reads through the page looking for commented content to show or add controls for.
# Returns     :   
# Parameters  :   none
# Throws      :   
# See Also    :   
********************************************************************** */
function sr_cc_setup_commented_divs() {
    console.log('   ### setting sr_cc_setup_commented_divs');

    var divs = document.querySelectorAll('.commented');

    // add a control and set the onclick for the control.
    vjs_forEach.call(divs, function(div, count) {
        sr_cc_setup_commented_div(div, count);
    });
}

// pass either a div or an id.
function sr_cc_setup_commented_div(div, count) {        
	if (!div) {
		return false;
	}
	var hide_always = false;
	if (vjs_hasClass(div, 'hide_always')) {
		hide_always = true;
	}


    vjs_removeClass(div, 'setup_commented');
    // leave tables commented, but add a control.
    // For tablets the commented out code comments out all but the top six tables.
    // but it seems annoying on tablets so we change that to show all tables for tablets.
    // if (Modernizr && (Modernizr.phone || (Modernizr.tablet && count >= 6) || hide_always) && !sr_detect_operaMini) {
    if (Modernizr && (Modernizr.phone || hide_always) && !sr_detect_operaMini) {
		// if there is a comment control we just exit.
		if (div.querySelector('.comment_control')) {
			return;
		}

		// Create the control.
		var elControl = document.createElement("BUTTON");
		var divHeader = div.querySelector('.section_heading h2,.table_heading h2');
		if (divHeader) { __sr_tableHeaderText = divHeader.innerHTML;}
		// If there is a section_anchor with a data-label we use that.
		var divAnchor = div.querySelector('.section_heading .section_anchor, .table_wrapper.tabbed .section_anchor');
		if (divAnchor) { __sr_tableHeaderText = vjs_getAttr(divAnchor,'data-label');	}

		var divHeaderText = __sr_text_show + ' ' + __sr_tableHeaderText;

		elControl.innerHTML = divHeaderText;

		vjs_addClass(elControl,'comment_control');
		vjs_setAttr(elControl,'type','button');

		elControl.onclick = function () {
			sr_cc_show_commented_content(div,elControl);
			sr_record_analytics_event('comment_control',sr_record_directory(), div.id);
		};
		// add an id, so the direct links to these work.
		var control_id = div.id + '_control';
		control_id = control_id.replace(/^all_/,'');
		elControl.id = control_id;
		div.appendChild(elControl);
	}
	// for tablets, just uncomment the tables and show them
	else if (div.id) {
		sr_cc_show_commented_content(div,null);
	}
}




/* *********************************************************************
# Usage       :   sr_cc_show_long_content(id)
# Purpose     :   adds tables rows commented out in the html
                    back into the dom for responsive purposes
# Returns     :   nothing
# Parameters  :   id for the id to add.
# Throws      :   
# Comments    :   Note that these are set up so that the they occur in the
                     <tbody> tags.
********************************************************************** */
function sr_cc_show_long_content(parentObj,elClicked) {
	console.log('   ### sr_cc_show_long_content:' + parentObj.id);
	// Removed the clicked control
	if (elClicked) {
		elClicked.parentNode.removeChild(elClicked);
	}
	parentObj.classList.remove('long');
	var table = parentObj.querySelector('table.long:not(.fixed_cols)');
	if (table) {
		console.log('   ### sr_cc_show_long_content, table.id:' + table.id);
		table.classList.remove('long');    
		var is_modified = sr_st_add_table_headers(table.id);
		console.log('is_modified:' + is_modified);
		if (is_modified && table.classList.contains('sliding_cols')) {
			sr_st_mobilize_stats_table(table.id);
		}
	}

    sr_chosen_enable_select(parentObj);
}



/* *********************************************************************
# Usage       :   sr_cc_setup_long_divs(id)
# Purpose     :   reads through the page looking for long content to show or add controls for.
# Returns     :   
# Parameters  :   none
# Throws      :   
# See Also    :   
********************************************************************** */
function sr_cc_setup_long_divs() {
    console.log('   ### setting sr_cc_setup_long_divs');

    var divs = document.querySelectorAll('.long');

    // add a control and set the onclick for the control.
    vjs_forEach.call(divs, function(div, i) {
        sr_cc_setup_long_div(div);
    });
}

// pass either a div or an id.
function sr_cc_setup_long_div(div, id) {        
	if (!div && id) {
		div = document.getElementById(id);
	}
	else if (!div) {
		return false;
	}

	console.log('   ### setting sr_cc_setup_long_div');

	let hide_always = false;
	let hide_long_always = false;
	let tabbed = div.classList.contains('tabbed');

	// check to see how long the table is
	if (div.classList.contains('hide_always')) {
		hide_always = true;
	}
	if (div.classList.contains('hide_long_always')) {
		hide_always = true;
	}
	

	let placeholder = div.querySelector('.placeholder');

//	phs.forEach(placeholder => {

		let lines_hidden_end = 0;
		let long_enough = true;
		
		if(placeholder.dataset['line-count']) {
			lines_hidden_end = placeholder.dataset['line-count'];
			if (lines_hidden_end <= 35) {
				long_enough = false;
			}
		}
		else {
			// you get here both onload -- and when the user has clicked the placeholder button that was set up
			//   onload - the 'commented' code has already hidden the table - so there is no table here to check
			//   but this code block still works, because "div.querySelectorAll('table tbody tr');" returns an empty set, so trs.length<35 is true (length is 0)
			//   really though, if there's no table here (because it's hidden - on mobile) we probably shouldn't even check this here - only because it's a bit confusing code-wise
			//   but OK for now
			//let trs = table.querySelectorAll('tbody tr'); 
			//let trs_thead = table.querySelectorAll('tbody tr.thead'); 
			let trs = div.querySelectorAll('table tbody tr'); 
			let trs_thead = div.querySelectorAll('table tbody tr.thead'); 
			if (trs.length <= 35) {
				long_enough = false;
			}
			lines_hidden_end = trs.length - trs_thead.length;
		}

   
		// leave tables long, but add a control
		if (long_enough && Modernizr && (Modernizr.phone || Modernizr.tablet || hide_always || hide_long_always)  && !sr_detect_operaMini) {
			
			// we need to get the table we're dealing with
			let table = div.querySelector('table');
			table.classList.add('long');
		
			// Create the control
			let elControl = document.createElement("BUTTON");

			elControl.innerHTML = __sr_text_show_hidden_rows 
				+ ' '
				+ 21
				+ ' '
				+ __sr_text_to_numbers
				+ ' <span>'
				+ (lines_hidden_end ? lines_hidden_end : '....')
				+ '</span>'
			;
		
			elControl.classList.add('comment_control');
			elControl.classList.add('long');

			elControl.addEventListener('click', function(e) {
				sr_cc_show_long_content(div,elControl);
				sr_record_analytics_event('hide_long_click',sr_record_directory(), div.id);
			});
			// add an id, so the direct links to these work
			let control_id = div.id + '_control';
			control_id = control_id.replace(/^all_|^div_stats_/,'');
			elControl.id = control_id;
			
			// set width of control to match the table (useful when on desktop)
			let rect = table.getBoundingClientRect();
			elControl.style.maxWidth = (rect.width) ? rect.width.toString() + 'px' : '500px';
			
			div.appendChild(elControl);

			// if the table has a footer we need to move it after the button
			//  for tabbed tables, it's already set up that way anyway - so no need (this could change)
			if(!tabbed) {
				var footer = div.querySelector('.footer');
				if (footer) {
					footer.parentNode.removeChild(footer);
					div.appendChild(footer);
				}
			}

			// for long tables add a note before the table warning it may be slow
			if (lines_hidden_end >= 250) {
				div.classList.add('long_note');
			}
		}

		// uncomment the tables and show them.
		else if (div.id && !div.classList.contains('commented')) {
			sr_cc_show_long_content(div,null);
			// for long tables add a note before the table warning it may be slow
			if (lines_hidden_end >= 250) {
				div.classList.add('long_note');
			}
		}
//	});

	// remove as setup is over
	div.classList.remove('setup_long');
}
/* ### FILE:sr.all.utilities.js    */

/* **************************************************************************************
// Set our cookies for is_build, is_dev, is_live etc.
 *************************************************************************************/
function sr_utilities_set_server_cookie() {
    console.log('   ## starting sr_utilities_set_server_cookie');
    /* check if the loader exists. */
    if (Modernizr.is_live) {
        vjs_createCookie('is_live', true);
    } else if (Modernizr.is_build) {
        vjs_createCookie('is_build', true);
    } else if (Modernizr.is_dev) {
        vjs_createCookie('is_dev', true);
    }
}


/* **************************************************************************************
// define our lazy load array.
// add it to with sr_utilities_js_loader.push(func-name);
var sr_utilities_js_loader = [];
 *************************************************************************************/
function sr_utilities_js_load() {
    console.log('   ## starting sr_utilities_js_load');
    /* check if the loader exists. */
    if (typeof sr_utilities_js_loader === 'undefined')
        return;

    /* Run through each of the items in loader and pop them off and run them. */
    while (sr_utilities_js_loader.length > 0) {
        var func = sr_utilities_js_loader.pop();
        func();
    }
}

/* *********************************************************************
   # Usage       :   sr_utilities_number_with_commas
   # Purpose     :   converts 100000 to 100,000
   # Returns     :   a string
   # Parameters  :   a number
   # Throws      :
   # See Also    :
   # Comments : http://stackoverflow.com/a/2901298/425449
   ********************************************************************** */
function sr_utilities_number_with_commas(number, add_dollar_sign) {
    return (add_dollar_sign ? '$' : '').concat(number.toString()).replace(/\B(?=(\d{3})+(?!\d))/g, __sr_text_thousands_separator);
}



/* *********************************************************************
# Usage       :   sr_display_local_icon()
# Purpose     :   adds an icon to a player
# Returns     :   adds the needed content to the player page.
# Parameters  :   type: {veteran|valentine}
# Throws      :

# See Also :

********************************************************************** */
function sr_display_local_icon(type) {

    console.log('   ### running sr_local_icon_veteran, type:' + type);
    var local_icon_html = '';
    if (type === 'veteran') {
        local_icon_html = '<a href="http://www.sports-reference.com/blog/professional-athletes-veterans/"><img id="local_icon" src="https://cdn.ssref.net/req/201610281/images/klecko/vet.svg" border="0" data-pin-nopin="true"></a>';
    } else if (type === 'valentine') {
        local_icon_html = '<img id="local_icon" src="https://cdn.ssref.net/req/201610281/images/klecko/valentine.svg" border="0" data-pin-nopin="true">';
    }

    var el = document.querySelector('body');
    el.insertAdjacentHTML('beforeend', local_icon_html);
}

// run the script on Nov. 11 for body.veteran, Feb 14 on Valentine's day
function sr_setup_local_icon() {
    var sr_date = new Date();
    var sr_month = sr_date.getMonth() + 1;
    var sr_dom = sr_date.getDate();
    var sr_hours = sr_date.getHours();
    // traditional is 11-11 and observed is 11-11 in 2020
    if ((sr_month === 11) && ((sr_dom === 11) || (sr_dom === 11)) && vjs_hasClass(document.body, 'veteran')) {
        sr_display_local_icon('veteran');
    } else if ((sr_month === 2) && (sr_dom === 14)) {
        var name = document.querySelector('#meta h1 span');
	if(name) {
	    var text = name.innerHTML;
	    // Some names like Jose Valentín will not match due to unicode.
	    text = text.unidecode();
	    if (text.match(/ hart$/i) ||
		text.match(/ love$/i) ||
		text.match(/ amor$/i) ||
		text.match(/ amador/i) ||
		text.match(/ enamorad/i) ||
		text.match(/ lovejoy$/i) ||
		text.match(/valentin/i) ||
		text.match(/ cupid/i) ||
		text.match(/cupid /i) ||
		text.match(/ heart /i)) {
		sr_display_local_icon('valentine');
	    }
	}
    }
    // for our 2018 pivot to video videos
    //    else if ((sr_month === 4) && (sr_dom === 1)) {
    //	var el = document.querySelector('.april_first');
    //	if (el) {
    //	    console.log('opening the April first joke,'.concat('hours:',sr_hours));
    //	    vjs_removeClass(el,'hide_live');
    //	    vjs_removeClass(el,'hide_dev');
    //	}
    //  }
}
sr_utilities_js_loader.push(sr_setup_local_icon);


/* *********************************************************************
# Usage       :   sr_utilites_check_on_in_mem_band()
# Purpose     :   adds the in_mem band for appropriate pages
# Returns     :   appends some html to the page
# Parameters  :   necro_death an element matching #necro-death
# Throws      :

# See Also : We add the band on the anniversary of someone's death and then
within 31 days of their death.
********************************************************************** */
function sr_utilities_add_in_mem_band() {
    console.log("### sr_utilities_add_in_mem_band()");
    var el = document.querySelector('body');
    vjs_addClass(el, 'in_memoriam');
    el.insertAdjacentHTML('beforeend', sr_in_memoriam_band);
}
function sr_utilites_check_on_in_mem_band(necro_death) {

    var necro_death_data = vjs_getAttr(necro_death, 'data-death');
    var age_since_death = sr_utilities_compute_age(necro_death_data);
    var age_since_death_number = age_since_death.replace('d', '');
    age_since_death_number = age_since_death_number.replace('-', '.');

    // make sure we have all of the elements needed here.
    if (age_since_death_number &&
        age_since_death.match('-') &&
        (sr_utilities_is_honored_person()) &&
        ((parseFloat(age_since_death_number) <= 0.031) || (parseFloat(age_since_death_number) == parseInt(age_since_death_number)))
    ) {
	sr_utilities_add_in_mem_band();
    }
    return;
}



/* *********************************************************************
# Usage       :   sr_utilities_person_age()
# Purpose     :   adds Aged info to the player pages behind the
# Returns     :   appends a string to a span as appropriate
# Parameters  :   none
# Throws      :

# See Also : looks for spans with id of necro-death and necro-birth
and data-death, data-birth attr.  It then reads these and appends
strings onto the end of these spans as appropriate.  Must be called
onready to show up.  This method as the advantage of updating the
players age as appropriate.

Should we add a happy birthday note?


********************************************************************** */
// Note that this html also appears in lib/SR/Defaults
var sr_in_memoriam_band = '<img id="in_mem_band" src="https://cdn.ssref.net/req/201602150/images/in_mem.gif">';

function sr_utilities_person_age() {
    console.log('   ### enter sr_utilities_person_age');
    // Note that Age: for the living goes before birth and for the
    // deceased we add it after the date.
    var necro_birth = document.getElementById('necro-birth');
    var necro_death = document.getElementById('necro-death');
    var necro_death_data = '0000-00-00';


    // Allow us to add the band without having to calculate their birth date.
    if (vjs_hasClass(document.body, 'in_memoriam')) {
        sr_utilities_add_in_mem_band();
    }	
    // Check to see how long ago the death happened and if we
    // should add a band to their page.
    if (necro_death) {
        sr_utilites_check_on_in_mem_band(necro_death);
    }

    // Now compute the ages for the players.
    if (!necro_birth) {
        return;
    }
    var necro_birth_data = vjs_getAttr(necro_birth, 'data-birth');
    var necro_death_data = '0000-00-00';
    if (necro_death)
        necro_death_data = vjs_getAttr(necro_death, 'data-death');

    //console.log(necro_birth);
    //console.log(necro_death);
    // We have a birth and death date, add their age at death as appropriate.
    if (necro_death &&
        (necro_birth_data != '0000-00-00') &&
        (necro_death_data != '0000-00-00')
    ) {
        var age_at_death = sr_utilities_compute_age(necro_birth_data, necro_death_data);
        // check to see that we got an age back.
        //console.log('age_ag_death:'+age_at_death);
        if (age_at_death) {
            necro_death.insertAdjacentHTML('beforeend', ' <nobr>(Aged&nbsp;' + age_at_death + ')</nobr>');
            return;
        }
    }


    // We have a birth and not a death date, add their current age to
    // the their birth line.
    if (!necro_death && (necro_birth_data != '0000-00-00')) {

        // returns a value YY-DDDd,
        var current_age = sr_utilities_compute_age(necro_birth_data);
        var current_age_number = current_age.replace('d', '');
        current_age_number = current_age_number.replace('-', '.');
        // check to see that we got an age back.
        if (current_age_number && (parseFloat(current_age_number) <= 105)) {
            var birthday_note = '';
            if (sr_utilities_is_honored_person() && parseInt(current_age_number) === parseFloat(current_age_number)) {
                birthday_note = ', <strong>' + __sr_text_happy_birthday + '</strong>';
            }
            necro_birth.insertAdjacentHTML('afterend', ' <span><nobr>(' + __sr_text_Age + ':&nbsp;' + current_age + birthday_note + ')</nobr></span>');
            return;
        }
    }

    // Note that if anything was changed above there was an immediate
    // return from the routine.
}



/* *********************************************************************
 # Usage       :   sr_utilities_is_honored_person()
 # Purpose     :   tells us to suppress the in_memoriam_band and birthdays for certain undesirable players
 # Returns     :   an boolean
 # Parameters  :   none
 # comment     :   hard-coding in a check for certain people we don't want ot put the in memoriam band on
 #                  for instance, OJ Simpson, Rae Carruth, Aaron Hernandez, Murderers generally
 # in creating the initial list I listed players who committed what would be considered first or second degree murder
 #  or a serial rapist like Darren Sharper.
 # I realize that drawing a line between Darren Sharper and Lawrence Taylor may seem odd, but given this is a minor
 # notice of the player's death, I don't think that we should draw too strict of a line.  I'm open to arguments that I'm wrong about
 # this however. --sean
 # https://en.wikipedia.org/wiki/List_of_professional_sportspeople_convicted_of_crimes
 ********************************************************************** */
function sr_utilities_is_honored_person() {

    var is_honored = true;

    var url = window.location.href;
    // revert our shortened hosts to the full host name.
    url = url.replace('pfref', 'pro-football-reference.com');
    url = url.replace('hkref', 'hockey-reference.com');
    url = url.replace('bbref', 'baseball-reference.com');
    url = url.replace('cfbref', 'sports-reference.com');
    url = url.replace('cbbref', 'sports-reference.com');
    url = url.replace('bkref', 'basketball-reference.com');

    // we are allowing an easier way to handle this than have to update the js.
    if (document.querySelector('.personanongrata')) {
        is_honored = false;
    }

    if (
        // NFL
        (/pro-football-reference/.test(url) && /HernAa00/.test(url)) ||
        (/pro-football-reference/.test(url) && /CarrRa00/.test(url)) ||
        (/pro-football-reference/.test(url) && /PhilLa00/.test(url)) ||
        (/pro-football-reference/.test(url) && /RoziBo20/.test(url)) ||
        (/pro-football-reference/.test(url) && /SimpO.00/.test(url)) ||
        (/pro-football-reference/.test(url) && /SharDa00/.test(url)) ||
        (/pro-football-reference/.test(url) && /SmitAn20/.test(url)) ||
        (/pro-football-reference/.test(url) && /BelcJo00/.test(url)) ||
        (/pro-football-reference/.test(url) && /NapoEr20/.test(url)) ||
        (/pro-football-reference/.test(url) && /NapoEr20/.test(url)) ||
        (/pro-football-reference/.test(url) && /BrowBr00/.test(url)) ||
        (/pro-football-reference/.test(url) && /AlleKe21/.test(url)) ||
        (/pro-football-reference/.test(url) && /HendTh00/.test(url)) ||
        (/pro-football-reference/.test(url) && /HenlDa20/.test(url)) ||
        (/pro-football-reference/.test(url) && /KaneTo00/.test(url)) ||
        (/pro-football-reference/.test(url) && /RashSa20/.test(url)) ||
        (/pro-football-reference/.test(url) && /SpilCJ99/.test(url)) ||
        (/pro-football-reference/.test(url) && /WebsNa20/.test(url)) ||
        // MLB
        (/baseball-reference/.test(url) && /machaju01/.test(url)) ||
        (/baseball-reference/.test(url) && /urbinug01/.test(url)) ||
        (/baseball-reference/.test(url) && /mooredo01/.test(url)) ||
        (/baseball-reference/.test(url) && /bradlmi01/.test(url)) ||
        (/baseball-reference/.test(url) && /chouibo01/.test(url)) ||
        (/baseball-reference/.test(url) && /hallme01/.test(url)) ||
        (/baseball-reference/.test(url) && /curtich01/.test(url)) ||
        (/baseball-reference/.test(url) && /luekejo01/.test(url)) ||
        (/baseball-reference/.test(url) && /torreru01/.test(url)) ||

        // NBA
        (/basketball-reference/.test(url) && /crittja01/.test(url)) ||
        (/basketball-reference/.test(url) && /payneto01/.test(url)) ||
        (/basketball-reference/.test(url) && /johnsed02/.test(url)) ||
        (/basketball-reference/.test(url) && /patteru01/.test(url)) ||
        (/basketball-reference/.test(url) && /willisl01/.test(url)) ||

        // NHL
        (/hockey-reference/.test(url) && /kanepa01/.test(url)) ||
        (/hockey-reference/.test(url) && /dantomi01/.test(url)) ||
        (/hockey-reference/.test(url) && /voynovi01/.test(url)) ||
        false
    ) {
        is_honored = false;
    }

    console.log('###  is_honored, url:' + url + ' val:' + is_honored);
    return is_honored;
}


/* *********************************************************************
 # Usage       :   sr_utilities_compute_localtime()
 # Purpose     :   updates the times for utc times
 # Returns     :   looks for data-venue-epoch and sets the times based on that.
 # Parameters  :   none
 # Throws      :
 # Hooks       : in the html we look for
    data-venue-epoch   time in milliseconds epoch (utc)
 #  data-venue-time  the time at the venue of the event
 #  data-venue-date  the date at the venue of the event
 #  data-venue-time-only   only show the time in parens if true, else
 #      Time, Datelo(if different) (local_time)
 #
 # MySQL's unix_timestamp command assumes that you are converting the time/date (set to your local time zone to epoch seconds).  If you have the
 #  time and date in utc already you need to first convert to the server's time zone.
 #
 #                   ROUND(UNIX_TIMESTAMP(CONVERT_TZ(CONCAT(date_utc,' ',time_utc), '+00:00', \@\@global.time_zone)),0) AS unix_ts_utc,
 #
 ## the below would give us the html necessary to print the venue's time with the user local time next to it.  Could also set venue time to always be ET if you wanted, so long
 ## as the epoch time is utc.  See the
 #         if ( $tmp->{time_local} ) {
 #                $tmp->{time} = sprintf( qq{<span class="venuetime" data-venue-time-only="1" data-venue-epoch="%s" data-venue-time="%s">%s</span>}, $tmp->{unix_ts_utc}, $tmp->{time}, $tmp->{time} );
 #                $tmp->{time} .= qq{ <span class="localtime"></span>};
 #         }
 ********************************************************************** */
function sr_utilities_compute_localtime(id) {

    var element = document;
    if (id) {
        element = document.getElementById(id);

        if (!element)
            return;
    }

    var times = element.querySelectorAll('[data-venue-epoch]:not([data-venue-epoch=""])');
    vjs_forEach.call(times, function(el_venuetime, i) {

        // only do this once.  It could be called again at a later time for certain table types.
        if (el_venuetime.is_set)
            return;

        el_venuetime.is_set = true;

        // check to see if we have a localtime sibling, if not just exit.
        var el_localtime = vjs_nextMatchingSibling(el_venuetime, '.localtime');

        if (!el_localtime || !vjs_hasClass(el_localtime, 'localtime')) {
            return false;
        }

        // pull in all of the venue info.
        var venue_date = vjs_getAttr(el_venuetime, 'data-venue-date');
        var venue_time = vjs_getAttr(el_venuetime, 'data-venue-time');
        var venue_epoch = vjs_getAttr(el_venuetime, 'data-venue-epoch');
        var venue_time_only = vjs_getAttr(el_venuetime, 'data-venue-time-only');

        var d = new Date(0); // The 0 there is the key, which sets the date to the epoch
        d.setUTCSeconds(venue_epoch);
        console.log(d);
        console.log(d.toString());
        console.log(d.toISOString());
        console.log(d.toJSON());
        console.log(d.toLocaleDateString());
        console.log(d.toLocaleTimeString());

        var local_date = vjs_dateToYMD(d);
        var local_time = d.toString().slice(16, 21);
        console.log('venue_date:' + venue_date);
        console.log('venue_time:' + venue_time);
        console.log('local_date:' + local_date);
        console.log('local_time:' + local_time);

        // See if the date is different.
        var date_string = '';

        if (local_time !== venue_time) {
            date_string = local_time;

            // if venue_time_only we just set the time in parens else we might add the date if different.
            if (!venue_time_only) {
                if (local_date !== venue_date) {
                    date_string = date_string + ', ' + d.toString().slice(0, 10);
                }
                date_string = date_string + ' (' + __sr_text_local_time + ')';
            } else {
                date_string = '(' + date_string + ')';
            }

            el_localtime.innerHTML = date_string;
        }

        // if the date is different.
        return true;
    });

}


/* *********************************************************************
 # Usage       :   sr_utilities_compute_age()
 # Purpose     :   returns an integer with age
 # Returns     :   an integer
 # Parameters  :   a string YYYY-MM-DD or YYYYMMDD
 # Throws      :

 ********************************************************************** */
function sr_utilities_compute_age(startDateStr, endDateStr) {


    if (!startDateStr && endDateStr) {
        return '';
    }
    // remove hyphens if needed.
    startDateStr = startDateStr.replace(/-/g, '');

    // if the date is shorter than 4 chars, meaning no year, just return.
    // if then less than 8 we pad with ending zeros.  This only works with a
    // a string of length 4 or 8 being passed.
    if (startDateStr.length < 4) {
        return '';
    } else if (startDateStr.length === 4) {
        startDateStr = (startDateStr + '0000').substring(0, 8);
    } else if (startDateStr.length !== 8) {
        return '';
    }

    var start_parts = startDateStr.match(/(\d{4})(\d{2})(\d{2})/),
        startDate = new Date(start_parts[1], start_parts[2] - 1, start_parts[3]); // months 0-based!

    var end_year;
    var endDate;
    if (endDateStr) {
        endDateStr = endDateStr.replace(/-/g, '');

        if (endDateStr.length < 4) {
            return '';
        } else if (endDateStr.length === 4) {
            endDateStr = (endDateStr + '0000').substring(0, 8);
        } else if (endDateStr.length !== 8) {
            return '';
        }

        var end_parts = endDateStr.match(/(\d{4})(\d{2})(\d{2})/);
        endDate = new Date(end_parts[1], end_parts[2] - 1, end_parts[3]); // months 0-based!
    }
    // if no endDate is given we use today.
    if (!endDate) {
        var todaysDate = new Date();
        endDate = new Date(todaysDate.getFullYear(), todaysDate.getMonth(), todaysDate.getDate());
    }
    end_year = parseInt(endDate.getFullYear());
    // console.log('   ');
    // console.log('   ');
    // console.log('   startDate: '+startDate);
    // console.log('   endDate: '+endDate);

    // determine if we should show the days or not.
    var showDays = true;
    if ((endDateStr && (endDateStr.slice(-2) === '00')) || (startDateStr.slice(-2) === '00')) {
        showDays = false;
    }

    // If we get a negative or absurdly large number return 0.
    if ((days < 0) || (days >= 110 * 365)) {
        return 0;
    }

    var age = 0;
    // days since the birthdate
    var days = Math.round((endDate.getTime() - startDate.getTime()) / 1000 / 60 / 60 / 24);


    // Step through the years for the player.
    for (var yr = parseInt(start_parts[1]) + 1; yr <= parseInt(end_year); yr++) {
        // console.log('   year : '+ yr);

        // Compute the date of their birthday.
        var next_birthDate = new Date(yr, start_parts[2] - 1, start_parts[3]); // months 0-based!
        // console.log('     next_birthDate: '+next_birthDate+':'+next_birthDate.getTime());
        // console.log('     endDate       : '+endDate+':'+endDate.getTime());

        // if the next_birthdate is <= to the end_date we increment age and reduce days. Else we exit.
        if (next_birthDate.getTime() <= endDate.getTime()) {
            var last_birthDate = new Date(yr - 1, start_parts[2] - 1, start_parts[3]); // months 0-based!

            // console.log('   last_birthDate: '+last_birthDate+':'+last_birthDate.getTime());

            var days_between_birthdays = Math.round((next_birthDate.getTime() - last_birthDate.getTime()) / 1000 / 60 / 60 / 24);

            // console.log('   days_between  : '+days_between_birthdays + ', days: '+days);

            days -= days_between_birthdays;
            // console.log('   days_between b: '+days_between_birthdays + ', days: '+days);
            age++;
        } else {
            // reset yr to kick us out of the loop.
            yr = end_year + 1;
        }
    }
    age = age.toString();
    if (showDays) {
        age = age + '-' + vjs_padStringWithChars(days, 3, '0') + 'd';
    } else {
        age = age + 'yrs.';
        // if they are the same month or one month is unknown, we put approx.
        if ((endDateStr && (endDateStr.substr(4, 2) === startDateStr.substr(4, 2))) ||
            (endDateStr && (endDateStr.substr(4, 2) === '00' || startDateStr.substr(4, 2) === '00'))) {
            age = age + ' approx';
        }
    }
    return age;
}


/*
 utility to change a tag from one thing to another, like an h1 to an h2 for seo reasons.
 taken from:
 https://stackoverflow.com/questions/13860417/can-i-change-an-html-elements-type/65090521#65090521 
*/
function sr_utilities_change_tag(node, tag) {
  var clone = document.createElement(tag);
  for (var attr of node.attributes) {
    clone.setAttributeNS(null, attr.name, attr.value);
  }
  while (node.firstChild) {
    clone.appendChild(node.firstChild);
  }
  node.replaceWith(clone);
  return clone;
}
/** ********************************************************************** 
 * complete.ly 1.0.0
 * MIT Licensing
 * Copyright (c) 2013 Lorenzo Puccetti
 * 
 * Modified by Sports Reference, LLC


   our dropdown engine is based on
   https://github.com/lorenzoongithub/completely
   Thank you Lorenzo if you see this.
    
   SECTIONS OF THIS FILE
   -------------------------------------------------------------------------------
   The default config and the explanation of the overall configuration and build process.
   -------------------------------------------------------------------------------
   -------------------------------------------------------------------------------
   -------------------------------------------------------------------------------
   Near the bottom.
   var CompleteSearchEngine is our definition for the search engine.
     This section
     * initializes the search engine
     * downloads the files from the server
     * builds the json to store in sessionStorage
     * runs queries against the search results.
     * resets the search engine if a new js version is rolled out or if the
        index is stale (currently 8+ hours)
     * returning an array of matches and their metadata from our lookup table.
   -------------------------------------------------------------------------------

     
EXPECTED SEARCH AUTOCOMPLETE BOX BEHAVIORS TO TEST

xx search box is always first tabindex on page, so after load you can tab directly into the search box with one tab
xx type <enter> in blank box takes you to search results.
xx click "Search" always takes you to search results.
xx focus search box (is empty), <tab> takes you to next item on page via tabindex


xx type Aaron, <down arrow> to "Aaron Cook", hit <tab>         goes to "Aaron Cook" page (via ac script)
xx type Aaron, <down arrow> to "Aaron Cook", hit <right arrow> goes to "Aaron Cook" page (via ac script)
xx type Aaron, <down arrow> to "Aaron Cook", hit <enter>       goes to "Aaron Cook" page (via ac script)
xx type Aaron, click on "Aaron Cook",                          goes to "Aaron Cook" page (via ac script)


xx type Aaron<enter>                                           goes to search results, via form submit
xx type Aaron Co<tab>                                          completes "Aaron Cook" in box and goes to Cook page via ac script
xx type Aaron Co<right arrow>                                  completes "Aaron Cook" in box and goes to Cook page via ac script
xx type Aaron Co<enter>                                        goes to "Aaron Cook" page (via search results, only result)
xx type Aaron, <down arrow> to "Aaron Cook", <up arrow> to search box, hit <enter>
                                                               goes to "Aaron" search results via search results.
xx type Aaron, <down arrow> to "Aaron Cook", <up arrow> to search box
                                                               Hint remains first choice.

// there is an issue with AJ when the name is actuall A.J. because the hint
// doesn't match what the start of the search query so make sure we check on these as well.
xx type    AJ, <down arrow> to "AJ Cole", hit <tab>            goes to "AJ Cole"    page (via ac script)
xx type    AJ, <down arrow> to "AJ Cole", hit <right arrow>    goes to "AJ Cole"    page (via ac script)
xx type    AJ, <down arrow> to "AJ Cole", hit <enter>          goes to "AJ Cole"    page (via ac script)
xx type    AJ, click on "AJ Cole",                             goes to "AJ Cole"    page (via ac script)

xx type    AJ<enter>                                           goes to search results, via form submit
xx type    AJ Co<tab>                                          tabs to search button which we can submit
xx type    AJ Co<right arrow>                                  nothing happens
xx type    AJ Co<enter>                                        goes to "AJ Cole" page (via search results, only result)
xx type    AJ, <down arrow> to "AJ Cole", <up arrow> to search box, hit <enter>
                                                               goes to "AJ" search results via search results.
xx type    AJ, <down arrow> to "AJ Cole", <up arrow> to search box
                                                               No hint, but dropdown remains



// make sure that garbage searches work correctly.
xx type    QQ, <down arrow> to 1st choice, hit <tab>           goes to search page page (via ac script)
xx type    QQ, <down arrow> to 1st choice, hit <right arrow>   goes to search page page (via ac script)
xx type    QQ, <down arrow> to 1st choice, hit <enter>         goes to search page page (via ac script)
xx type    QQ, click on 1st choice,                            goes to search page page (via ac script)

xx type    QQ<enter>                                           goes to search results, via form submit
xx type    QQ<tab>                                             tabs to submit button
xx type    QQ<right arrow>                                     nothing happens
xx type    QQ, <down arrow> to "search results for...", <up arrow> to search box, hit <enter>
                                                               goes to "QQ" search results via search results.
xx type    QQ, <down arrow> to "search results for...", <up arrow> to search box
                                                               no hint

// closing the box in common sense cases
xx type Aaron, click outside of search area,                   Dropdown disappears, and hint disappears
xx type Aaron, press <escape>,                                 Dropdown disappears, and search text disappears
xx type Aaron, <down arrow>, press <escape>,                   Dropdown disappears, and search text disappears

Mobile

xx type Aaron, click on "Aaron Cook",                          goes to "Aaron Cook" page
xx type Aaron<enter>                                           goes to search results
xx type Aaron Co<enter>                                        goes to "Aaron Cook" page (only result matching)

xx type AJ, click on "AJ Cole",                                goes to "AJ Cole" page
xx type AJ<enter>                                              goes to search results
xx type AJ Co<enter>                                           goes to "AJ Cole" page (only result matching)

 
     
   ** **********************************************************************/

/** *********************************************************************
    DEFAULT CONFIG
     
 The search indices are defined in lib/SR/SiteData.pm and built using ~/build/copyit/build_search_engine.pl
  To build a new search index you would add the definition information to SiteData.pm for the site in question.

  You would then need to make sure that code is committed to deploy@puig and then a
  full js package is built and pushed out to all of the sites.

  You would also need to run build/copyit/build_search_engine.pl and then make sure the .csv files are in
    on the live server at ~/www/inc/


    WHAT IS IN SiteData.pm for cfb
    ###############################################################################
    cfb => [f
        {   name   => 'players',
            header => '<a href="/cfb/players/">See all CFB Players</a>',
            query  => <<"END_SQL",
  SELECT * from popular_players order by id
END_SQL
        },
        {   name   => 'teams',
            header => '<a href="/cfb/schools/">All CFB Schools</a>',    #
            query  => <<"END_SQL",
select school_name as name,concat('school:',school_id) as id, '' as years, 1 AS is_active from schools where year_id=(select max(year_id) from schools) and is_major_school=1
END_SQL
        },
        $direct_links,
    ],

   # there is also the option url_match => 'string'; this allows us to
   # only load some autocomplete files when in particular scripts or
   # directories and not force everyone on the site to load them all
   # of the time.
 
    ###############################################################################
    What shows up in the site_id/sr.js file.
    ###############################################################################
 var completely_config = [{
    name: 'players',
    url:  'http://d.hkref.com/inc/players_search_list.csv',
    limit: 10,
    header: [
        '<div class="ac-results-header">',
        '<a href="/players/">',
        'NHL Players</a>',
        '</div>'
    ].join(''),
    template: ['<div><p class="search-results-years">',
               '{{#a}}<strong>{{/a}}',
               '{{y}}',
               '{{#a}}</strong>{{/a}}',
               '</p><p class="search-results-item">',
               '{{#a}}<strong>{{/a}}',
               '{{n}}',
               '{{#a}}</strong>{{/a}}',
               '</p></div>'].join('')
    
}]
    
   ********************************************************************** */
var sr_autocomplete_default_config = {
    name: 'players',
    header: '',
    template: ['<div><p class="search-results-years">',
        'GER ',
        '<span class="f-i f-de"></span>',
        '</p>',
        '<p class="search-results-item">',
        '{{#a}}<strong>{{/a}}',
        '{{v}}',
        '{{#a}}</strong>{{/a}}',
        '</p>',
        '<div class="subhead">',
        '<span class="yrs">2007-2012,</span>',
        ' Manchester City, Roma</div>',
        '</div>'
    ].join(''),
    // original
    //    template: ['<div><p class="search-results-years">',
    //                   '{{d}}',
    //                   '</p>',
    //		   '<p class="search-results-item">',
    //                   '{{#a}}<strong>{{/a}}',
    //                   '{{v}}',
    //                   '{{#a}}</strong>{{/a}}',
    //                   '</p>',
    //		   '</div>'].join(''),
    limit: 10
};
var sr_csEngine;

/** *********************************************************************
   # Usage       :   sr_setup_autocomplete_configs(autocompleteConfig)
   # Purpose     :   sets up the array of autocomplete config defns
   # Returns     :   an array of objects
   # Parameters  :   autocomplete_config - an array of objects 
   # See Also    :  called by sr_setup_autocomplete_instances,
                  the configs passed are setup in SiteJS.tt2 and SiteData.pm
		  and then built into the vars completely_config
   # Comments :   
 
   ********************************************************************** */
function sr_setup_autocomplete_configs(autocompleteConfig, site_use) {

    var autocompleteConfigs = [];

    /* Check to see if the configs are an array, which means we may
     * have more than one typeahead object for this inputSelector. If we
     * don't have an array, just stick the single object in an array
     * so it's easier to process consistently.
     */
    if (!Array.isArray(autocompleteConfig)) { autocompleteConfig = [autocompleteConfig]; }

    // Merge the autocompleteConfigs with our defaults before instantiating typeahead
    autocompleteConfig.forEach(function(config, idx) {
        var result = vjs_mergeObjects(sr_autocomplete_default_config, config);
        autocompleteConfigs.push(result);
    });

    var configs = {};
    var configNames = [];
    var regex = RegExp('^' + (site_use || ''));
    // store the configs in a hash keyed to the name of the config object

    autocompleteConfigs.forEach(function(autocompleteIndex) {
        console.log('#### checking on autocomplete ####, site_use:' + site_use + ', autocompleteIndex.name:' + autocompleteIndex.name);

        // if we are passed a use site and our index has a site attached, skip if they don't match.
        if (site_use && !regex.test(autocompleteIndex.name)) { return false; }
	console.log("## Testing url_match of ".concat(autocompleteIndex.name,' with match ',autocompleteIndex.url_match));

	// if we have a url_match for this index and the url doesn't match skip setting this index up.
	if (autocompleteIndex.url_match) {
	    // if the url does not match the string return false and
	    // exit this loop.  Otherwise keep going.
	    var regex_match = new RegExp(autocompleteIndex.url_match);
	    if (!regex_match.test(document.URL)) {
		console.log("## Testing failed skipping. Details below.");
		console.log("## url_match: ".concat(autocompleteIndex.url_match));
		console.log("## url      : ".concat(document.URL));
		console.log("## regex    : ".concat(regex_match));
		console.log("## test     : ".concat(regex_match.test(document.URL)));
		return false;
	    }
        }

        // add the name of config the array of names.
        configNames.push(autocompleteIndex.name);

        // build the various session storage keys and compile the template for later use.	
        autocompleteIndex.csvStorageKey     = sr_SITE_ABB + '__' + autocompleteIndex.name + '__csv';
        autocompleteIndex.adjacencyListKey  = sr_SITE_ABB + '__' + autocompleteIndex.name + '__adjacencyList';
        autocompleteIndex._compiledTemplate = Hogan.compile(autocompleteIndex.template);
        // we still compute this one, but we just remove any items by
        // this name because they aren't needed anymore.
        autocompleteIndex.lookupTableKey = sr_SITE_ABB + '__' + autocompleteIndex.name + '__lookupTable';

        configs[autocompleteIndex.name] = autocompleteIndex;
    });

    configs.configNames = configNames;
    var engine = CompleteSearchEngine; // see below for definition
    sr_csEngine = vjs_cloneObject(engine);
    sr_csEngine.cse_init(configs);

    return configs;
}

/** *********************************************************************
   # Usage       :   sr_completely(inputSelector,configuration)
   # Purpose     :   sets up all of the listeners and added stuff to handle
                      site autocomplete search box needs.
   # Returns     :   
   # Parameters  :   inputSelector is a dom selector that applies to the input for entering text,
                     configuration object, see sr_setup_autocomplete_configs doc for more info
   # Comments :
      FROM sr.mod.jsFire.js
	    c = sr_setup_autocomplete_instances('.completely', {}, completely_config);

   ********************************************************************** */
function sr_setup_autocomplete_instances(inputSelector, autocompleteConfig) {
    "use strict";

    console.log('   ### sr_setup_autocomplete_instances');

    // Run through some cases where we don't bother building the autocomplete.
    // don't support ie < 9, or cors or sessionstorage.
    if (!Modernizr.sessionstorage || !Modernizr.cors || (!!sr_detect_ie && (sr_detect_ie < 9))) {
        console.log('****sr_setup_autocomplete_instances: no cors or sessionstorage');
        return false;
    }
    // see if we've been here before and failed.
    else if (window.sessionStorage['sr_autocomplete_failed']) {
        console.log('****sr_setup_autocomplete_instances: previous failure');
        return false;
    }

    let site_use = null;

    if (sr_SITE_ABB === 'stathead') {
		const main_div = document.querySelector('#content');
		let sport = main_div.className;  // this will break down if we ever add another class on this div ... but at the moment, it's only ever 1 - the sport id
		site_use = (sport || 'none') + '__';

        // See if we need to clear out our autocomplete.
        let lookup_site_used = window.sessionStorage.getItem('sr_autocomplete_site_use') || false;

        // check if we need to clear out the sesssionstorage
        if ((site_use !== 'none__') && lookup_site_used && (lookup_site_used !== site_use)) {
            Object.keys(window.sessionStorage).forEach(function(key_val, i) {
                if (key_val.startsWith('stathead')) {
                    window.sessionStorage.removeItem(key_val);
                }
            });
        }
        // update the site we are using on stathead.
        if (site_use !== 'none__') {
            window.sessionStorage.setItem('sr_autocomplete_site_use', site_use);
        }
    }

    // generate our config file merged with the defaults and properly in an array.
    var autocompleteConfigs = sr_setup_autocomplete_configs(autocompleteConfig, site_use);


    // Find all of the elements matching inputSelector
    var inputsAutocomplete = document.querySelectorAll(inputSelector);
    var acRenderEngines = [];

    // run through each matching element in the page.
    vjs_forEach.call(inputsAutocomplete, function(inputAutocomplete, idx) {

        // note that each instance of the autocomplete engine uses all
        // of the configs to answer the queries from users.
        var acRenderEngine = sr_setup_autocomplete_instance(inputAutocomplete, autocompleteConfigs, vjs_hasClass(inputAutocomplete, 'ac-select'));
        // store all the completelys in this array
        acRenderEngines.push(acRenderEngine);

    });
    return acRenderEngines;
} // endend of sr_setup_autocomplete_instances

/** *********************************************************************
   # Usage       :   
   # Purpose     :
   # Returns     :   
   # Parameters  :   
   # Throws      :
   # See Also    :


   # Comments :   

Below are the form elements and the corresponding hook we use in acInstance.PROPERTY
   
.formfield    <form itemprop="potentialAction" itemscope="" itemtype="https://schema.org/SearchAction" name="f_big" action="/search/search.fcgi">
.container      <div class="ac-outline">
.wrapper          <div class="ac-wrapper">
.inputhint          <input name="hint"   class="ac-hint"             type="search" tabindex="-1"  placeholder=""    autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" dir="auto">
.inputbox           <input name="search" class="ac-input completely" type="search"  tabindex="1"  placeholder="..." autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" dir="auto"
                                          aria-label="Enter a player, team or section name" itemprop="query-input">
.dropdown           <div class="ac-dropdown"></div>
                 </div>
               </div>
.submitbutton  <input type="submit" value="Search" tabindex="2">
.resultId      <input type="hidden" name="pid" value="" data-search-id="">
.resultIndex   <input type="hidden" name="idx" value="" data-search-idx="">
             </form>


for the select box options

.formfield       <div class="formfield">
.selectWrapper     <div class="js select_wrapper search">
                     <label for="player_id2_select">....</label>
.container           <div class="ac-outline">
.wrapper             <div class="ac-wrapper">
.inputhint             <input type="search" 
                              class="ac-hint" 
							  name="player_id2_hint" 
							  tabindex="-1"
                              placeholder=""
							  autocomplete="off"
							  autocorrect="off"
							  autocapitalize="off"
							  spellcheck="false"
							  dir="auto"
							  data-endpoint="get_player_years.cgi?html=1&amp;form_id=xxx&amp;dummy=2&amp;player="
							  data-additional-params="" />
.inputbox              <input type="search" 
                              class="ac-input ac-select completely" 
							  id="player_id2_select" 
							  name="player_id2_select" 
							  value=""
                              placeholder="Enter Player" 
							  autocomplete="off" 
							  autocorrect="off" 
							  autocapitalize="off" 
							  spellcheck="false" 
							  dir="auto" />
.dropdown              <div class="ac-dropdown"></div>
                     </div>
                   </div>
                 </div>
.selectName      <div class="ac-select-output"></div>
.resultID        <input type="hidden" name="player_id2" value="" data-search-id="">
.resultIndex     <input type="hidden" name="idx"        value="" data-search-zidx="">
               </div>

   ********************************************************************** */
function sr_setup_autocomplete_instance(inputAutocomplete, autocompleteConfigs, isSelectFormEl) {
    "use strict";
    console.log('      ### sr_setup_autocomplete_instance, isselect:' + isSelectFormEl);

    // attach all of the needed elements to dropdown rather than make
    // them all separate items. 
    var acInstance = {};
    acInstance.isSelect = isSelectFormEl;
    acInstance.inputbox = inputAutocomplete;
    acInstance.wrapper = vjs_closest(acInstance.inputbox, '.ac-wrapper');
    acInstance.dropdown = acInstance.wrapper.querySelector('.ac-dropdown');
    acInstance.dataInputToggle = acInstance.wrapper.querySelector('input[data-input-toggle]')
    acInstance.dataInputReset = acInstance.wrapper.querySelector('input[data-input-reset]')

    // copy the existing engine.
    if (typeof sr_csEngine === 'object') {
        // note that originally this was a clone of the csEngine
        // object, but now we just point to it because I think that
        // eveyr search engine can use these no problem and this
        // prevents it from being run over and over.

        //acInstance.dropdown.engine = vjs_cloneObject(sr_csEngine);
        acInstance.dropdown.engine = sr_csEngine;
    } else {
        return false;
    }

    // find more elements that control the autocompleteBox.
    acInstance.container = vjs_closest(acInstance.inputbox, '.ac-outline');
    acInstance.form = vjs_closest(acInstance.inputbox, 'form');
    acInstance.inputhint = acInstance.wrapper.querySelector('.ac-hint');
    // ###################################################
    // find the closest form looking for a .formfield and then <form>
    // acInstance.formfield = vjs_closest(acInstance.inputbox, '.formfield'); // not currently used - was going to use it as solution to autoplayers within subfields, but then added a new class to help instead
    acInstance.fieldset  = vjs_closest(acInstance.inputbox, '.autoplayer_fieldset');
    if (!acInstance.fieldset) {
		acInstance.fieldset  = vjs_closest(acInstance.inputbox, '.fieldset');
    }
    if (!acInstance.fieldset) {
        acInstance.fieldset = vjs_closest(acInstance.inputbox, 'form');
    }
    acInstance.submitbutton = acInstance.fieldset.querySelector('input[type="submit"]');

    // 
    acInstance.resultId = acInstance.fieldset.querySelector('input[data-search-id]');
    acInstance.resultIndex = acInstance.fieldset.querySelector('input[data-search-idx]');

    // since we are adding this on after the fact there may be some cases where we are missing the hidden element,
    // if so we should add one.
    if (!acInstance.resultIndex) {
        acInstance.resultIndex = acInstance.fieldset.querySelector('input[name="idx"]');
        if (!acInstance.resultIndex && acInstance.resultId) {
            acInstance.resultId.insertAdjacentHTML('afterend', '<input type="hidden" name="idx" value="" data-search-idx>');
            acInstance.resultIndex = acInstance.fieldset.querySelector('input[data-search-idx]');
        }
    }

    // do a full copy of the overall config to the one we will use.
    // then also check to see if any are generally suppressed.
    var indexesToUse = [];
    autocompleteConfigs.configNames.forEach(function(indexKey) {
        if (autocompleteConfigs[indexKey].suppress) {} else {
            indexesToUse.push(indexKey);
        }
    });
    acInstance.configNames = indexesToUse;

    // for the select option we build up the option for acInstance.selectName
    if (acInstance.isSelect) {
		acInstance.selectWrapper = acInstance.fieldset.querySelector('.select_wrapper');
        // in some cases we will have a select div which is where we
        // pass the name we are given from the select box.
        if (acInstance.fieldset.querySelector('.ac-select-output')) {
            acInstance.selectName = acInstance.fieldset.querySelector('.ac-select-output');

            // handle the buttons to reset the form, they are included in the template
            let selection_closer = acInstance.selectName.querySelector('button');
            // set up the closer.
            if (selection_closer) {
                selection_closer.onclick = function() {
                    sr_reset_playerSelect(selection_closer, acInstance);
                };
            }
        }

        // set up only a specific index to use, this can be passed in the search call, or we can use players
        var useIndex = vjs_getAttr(acInstance.selectWrapper, 'data-use-index') || 'players';
        acInstance.configNames = [useIndex];

    }

    if (acInstance.inputbox.value) {
        acInstance.inputhint.value = acInstance.inputbox.value;
    }
    acInstance.defaultPlaceholder = acInstance.inputbox.placeholder;

    console.log("Going to CompleteCreateDropDownController");
    console.log(acInstance);
    console.log(autocompleteConfigs);

    var dropDownController = CompleteCreateDropDownController(acInstance, autocompleteConfigs);

    /** *********************************************************************
    # Usage       :  defines a bunch of different options for how to handle input.   
    # Comments    :  I'm a little out of my depth on how to handle these, but I think
                     a lot of this is really just for customization.
    ********************************************************************** */
    var RenderSearchEngine = {
        wrapper: acInstance.wrapper,
        input: acInstance.inputbox,
        hint: acInstance.inputhint,
        dropDown: acInstance.dropdown,
        engine: acInstance.dropdown.engine,

        /** *********************************************************************
         # RenderSearchEngine : something changed, so just repaint everything        
         ********************************************************************** */
        onChange: function() {
            RenderSearchEngine.repaint();
        },

        /** *********************************************************************
         # RenderSearchEngine :  user selected something, so this is where we fire everything
         #   off to send them to the selected page.
         #   this is reached by typing enter, tab, right arrow or clicking on an
         #   option.  The data comes in all cases from dropDownController.getSelectedData()
         #   which looks for the selected item.
         ********************************************************************** */
        onSelected: function(data) {
            var event = new Event('autocomplete:selected');
            acInstance.container.dispatchEvent(event);

            // set the values in the form corresponding to the item that we selected.
            // this passes the index used and the result's id chosen when we sumbit the form.
            if (data && data.i) {
                acInstance.resultId.value = data.i;
                acInstance.resultIndex.value = data.x;
            } else {
                acInstance.resultId.value = '';
                acInstance.resultIndex.value = '';
            }

            // in case this is a in-place selector we call that code.
            if (acInstance.isSelect) {
                dropDownController.hide();
                sr_autocomplete_select_item(data, acInstance);
            }
            // a search box form, so submit the form.
            else {
                // mark the search box yellow, delete the hint and hide the dropdown
                acInstance.inputhint.value = '';
                if (data && data.n) {
                    acInstance.inputbox.value = data.n;
                }
                sr_cleanup_dropdown_after_select(acInstance, dropDownController, this);

                // focus the submit button to let the user know we are doing something.
                if (acInstance.submitbutton) {
                    acInstance.submitbutton.focus();
                }
                acInstance.fieldset.submit();
            }
        },

        /** *********************************************************************
         # RenderSearchEngine : we are somewhere else, so we just hide the controller
         ********************************************************************** */
        onFocusOut: function(event) {
            console.log('    ### focus lost by inputBox');

            // ignore ie < 8, just return.
            if (sr_detect_ie && (sr_detect_ie < 8)) {
                return;
            }

            // check and see if wrapper has hover, if not we close the dropdown. and remove the hint.
            if (!vjs_isHovered(acInstance.wrapper)) {
                dropDownController.hide();

                // swap the placeholder text back into the placeholder
                acInstance.inputhint.value = '';
                acInstance.inputbox.placeholder = acInstance.defaultPlaceholder;
                console.log('c:');
                console.log(acInstance);

            }

        },

        /** *********************************************************************
         # RenderSearchEngine.onFocusIn, this is only relevant if we
         are showing a default set of values when the user first
         enters the search box on the site.

         Currently we are not using this.  See
         # https://sr.manuscript.com/f/cases/301975/sr-Search-default-drop-down-show-5-most-popular-players

         A couple of issues below. This is redundant and rebuilds the
         top list every time we focus into the box and no value is
         given.  I think when we do this, we'll just create another
         index called "default" and if default exists we show it here
         and if not we just move on, so much of this code will be
         changing.

         we also need to uncomment this line later on.
         // vjs_addEvent(acInstance.inputbox, "focusin",  RenderSearchEngine.onFocusIn, false);
        */

        onFocusIn: function(event) {
            acInstance.inputbox.placeholder = '';
        },


        /** *********************************************************************
         # RenderSearchEngine : rebuild the whole structure of the dropdown
         #  based on the data entered by the user.
         ********************************************************************** */
        repaint: function(defaultResults) {
            var inputboxText = acInstance.inputbox.value;

            // Execute the search query to see if we have matches.
            var matches = [];
            var noHint = false;

            // if there is no inputboxText and we have defaultResults,
            // then we want to show the defaultResults.  This would be
            // the case when a user enters text and then backspaces
            // it.  we have to finagle the placeholder text here a bit
            // as may want the placeholder text to disappear if the
            // user is arrowing down to pick a default entry.
            // Otherwise we'll try to write both of this.  This works
            // by taking the placeholder text, removing it and instead
            // printing it as the hint.  They are styled the same so
            // it works.
            // if we were passed default results. This is when the
            // user first enters the search box
            if (defaultResults) {
                // store the results for later and also remove the placeholder text and replacde it as a hint later.
                matches = defaultResults;
                noHint = true;
                acInstance.defaultResults = defaultResults;
                acInstance.inputbox.placeholder = '';
                acInstance.isDefault = true;
            }
            // The search box is empty and we have previously used
            // defaultResults, then just print those again.
            else if (!inputboxText && acInstance.defaultResults) {
                matches = acInstance.defaultResults;
                noHint = true;
                acInstance.isDefault = true;
            }
            // the user is entering text and we are presenting the
            // results.
            else {
                matches = acInstance.dropdown.engine.cse_queryExecute(inputboxText, acInstance.configNames); // do the search
                acInstance.isDefault = false;
            }
            var matchesLength = 0;

            // make sure that we get actual data back.
            if (matches) {
                matches.forEach(function(match) {
                    matchesLength += match.data.length;
                });
            }

            // updating the hint value. the hint is always the first
            // result unless we have a blank text in which case we
            // want to replace the hint with the placeholder text.
            // Tack on end of hint to current search text.
            if (!noHint) {
                acInstance.inputhint.value = (matchesLength === 0) ? '' : _sr_ac_build_hint(inputboxText, matches[0].data[0].d.n);
                console.log('a:');
                console.log(acInstance);
            } else {
                acInstance.inputhint.value = acInstance.defaultPlaceholder;
                console.log('b:');
                console.log(acInstance);
            }

            // moving the dropDown and refreshing it, if it is selectName type box we suppress the header.
            dropDownController.refresh(matches, inputboxText, acInstance.isSelect);
        }
    }; // endend of RenderSearchEngine


    /** *********************************************************************
	# See Also :  Called at the end of this subroutine and applied to the input box.
	              vjs_addEvent(acInstance.inputbox, 'keydown', CompleteKeyDownHandler, false);
	# Comments :  This parses what is entered in the inputbox 


	# keyDown vs keyPress, keyDown sends two commands when you have shiftKey + A,
	#    keyPress occurs after keyDown
	#   https://stackoverflow.com/questions/1367700/whats-the-difference-between-keydown-and-keypress-in-net
	# All Key Codes
	#  https://css-tricks.com/snippets/javascript/javascript-keycodes/
	********************************************************************** */
    var CompleteKeyDownHandler = function(e) {
        e = e || window.event;
        var keyCode = e.keyCode;

        // page up (33) or down (34), enter (13) do nothing and
        // return, just submit in the case of return
        if ((keyCode === 33) || (keyCode === 34)) { return; }

        // escape key (27), removes the dropdown.
        else if (keyCode == 27) {
            dropDownController.hide();
            acInstance.inputbox.value = '';
            acInstance.inputhint.value = '';
            acInstance.inputbox.focus();
            return;
        }

        // RightArrow(39), Tab (9),  these have us go to the page indicated in the hint
        else if (keyCode == 39 || keyCode == 9) {

            // for tabs we need to ensure that we override the default
            // behaviour: move to the next focusable HTML-element if
            // there is no hint in our input AND we are on in the
            // dropdown, we just return here and allow the change in
            // focus to occur

            // see if we have an active dropdown selection.
            var dropdownSelection = dropDownController.getSelectedData(false);

            // check to see if there is not a dropdown selection and
            // also the hint is either zero or equals the placeholdertext
            if (!dropdownSelection && ((acInstance.inputhint.value.length === 0) || (acInstance.inputhint.value === acInstance.defaultPlaceholder))) {
                return;
            } else {
                e.preventDefault();
                e.stopPropagation();
            }

            // hide the controller, match the inputbox to the hint.
            acInstance.inputbox.value = acInstance.inputhint.value;

            // determine if we need to repaint the search box.
            //	    var hasTextChanged = registerOnTextChangeOldValue != acInstance.inputbox.value;
            //	    registerOnTextChangeOldValue = acInstance.inputbox.value;	   
            //	    if (hasTextChanged) {
            //                RenderSearchEngine.onChange();
            //	    }


            // Submit the search engine and off we go. We for
            // getSelected data to return the zero index if none is
            // selected otherwise.
            RenderSearchEngine.onSelected(dropDownController.getSelectedData(true));
            return;
        }

        // 13 - enter - if in dropdown execute the autocomplete, else just submit the form
        else if (keyCode == 13) {

            // if we are entering after a up or down keystroke
            if (prevKeyWasUpOrDownArrow) {
                e.preventDefault();
                acInstance.inputbox.value = e.target.value.trim();
                RenderSearchEngine.onSelected(dropDownController.getSelectedData());
            }
            return;
        }

        // downArrow (40), move the highlight down.
        else if (keyCode == 40) {
            var value = dropDownController.move(+1);
            // build the hint to include the search term and the remainder of our selection
            // as the hint.
            acInstance.inputhint.value = _sr_ac_build_hint(acInstance.inputbox.value, value);
            prevKeyWasUpOrDownArrow = true;
            return;
        }

        // upArrow (38), move the highlight up
        else if (keyCode == 38) {
            // we prevent the default here because it moves the
            // focus to the front of the search box when we up arrow.
            e.preventDefault();
            e.stopPropagation();
            var value = dropDownController.move(-1);
            console.log('value:' + value);
            // This tells the scripts that we are down in the dropdown
            // moving around.
            prevKeyWasUpOrDownArrow = true;

            // returns -1 if we are at the top of the search.
            if (value !== -1) {
                acInstance.inputhint.value = _sr_ac_build_hint(acInstance.inputbox.value, value);

            } else {
                // remove cursor.
                var cursored = document.querySelectorAll('.ac-is-under-cursor');
                vjs_forEach.call(cursored, function(cur, idx) {
                    vjs_removeClass(cur, 'ac-is-under-cursor');
                });

                // if the search box is empty also remove the hint.
                if (!acInstance.inputbox.value) {
                    acInstance.inputhint.value = '';
                }

                // we set this as false here because we are now back
                // into the search box and want to act as if the last
                // key was the keystroke that completed the search
                // stirng should we hit enter after bringing us back
                // into the search box.
                prevKeyWasUpOrDownArrow = false;
            }

            return;
        }

        // it's important to reset the acInstance.inputhint on key down.
        // think: user presses a letter (e.g. 'x') and never releases... you get (xxxxxxxxxxxxxxxxx)
        // and you would see still the hint
        acInstance.inputhint.value = ''; // resets the acInstance.inputhint. (it might be updated onKeyUp)
        prevKeyWasUpOrDownArrow = false;
        dropDownController.reset();
    };


    /** *********************************************************************
	# Comments :        
     * Register a callback function to detect changes to the content of the input-type-text.
     * Those changes are typically followed by user's action: a key-stroke event but sometimes it might be a mouse click.
     ********************************************************************** */
    var registerOnTextChangeOldValue;
    var registerOnTextChange = function(inputbox, callback) {
        registerOnTextChangeOldValue = inputbox.value;
        var handler = function() {
            var value = inputbox.value;
            if (registerOnTextChangeOldValue !== value) {
                registerOnTextChangeOldValue = value;
                callback(value);
            }
        };
        vjs_addEvent(inputbox, "input", handler, false);
        vjs_addEvent(inputbox, "change", handler, false);
    };

    /** *********************************************************************
    // note the function needs to be wrapped as API-users will define their onChange
     # Comments :        
     ********************************************************************** */
    var prevKeyWasUpOrDownArrow = false;
    registerOnTextChange(acInstance.inputbox,
        function(text) {
            if (!prevKeyWasUpOrDownArrow) {
                RenderSearchEngine.onChange();
            }
            prevKeyWasUpOrDownArrow = false;
        }
    );

    // Attach the focus out and and the key handler to the search box.
    vjs_addEvent(acInstance.inputbox, "focusout", RenderSearchEngine.onFocusOut, false);
    vjs_addEvent(acInstance.inputbox, "focusin", RenderSearchEngine.onFocusIn, false);
    vjs_addEvent(acInstance.inputbox, 'keydown', CompleteKeyDownHandler, false);
    return RenderSearchEngine;
}
// endend of completely.



/** *********************************************************************
 # Usage       :   _sr_ac_build_hint
 # Purpose     :   takes the hint we want to build and
                      appends to what is actually entered by the user.
 # Returns     :   a string
 # Parameters  :   user text and the full hint.
 # Comments    :   example
 #                 search is 'aa' and hint is 'Aaron Altherr'
 #                  returns   aaron Altherr
 ********************************************************************** */
function _sr_ac_build_hint(search, hint) {
    var returnString = '';
    if (hint && hint.toLowerCase().substring(0, search.length) === search.toLowerCase()) {
        returnString = search;
        returnString += hint.substring(search.length);
    }
    return returnString;
}

/** *********************************************************************
 # Usage       :   sr_cleanup_dropdown_after_select
 # Purpose     :   sets up the search box and gracefully closes the dropdown
 # Returns     :   nothing
 # Parameters  :   an autocompleteInstance and dropdown controller
 ********************************************************************** */
function sr_cleanup_dropdown_after_select(acInstance, dropdown, chosenElement) {
    vjs_addClass(acInstance.inputbox, 'prefilled');

    // remove cursor elsewhere.
    var cursored = document.querySelectorAll('.ac-is-under-cursor');
    vjs_forEach.call(cursored, function(cur, idx) {
        vjs_removeClass(cur, 'ac-is-under-cursor');
    });
    vjs_addClass(chosenElement, 'ac-is-under-cursor');

    // hide the dropdown.  We put a timeout on this to give the click
    // a bit more weight as without the timeout the dropdown
    // disappears so quickly that it appears the dropdown disappears
    // before the click has actually happened.
    window.setTimeout(dropdown.hide, 250);
}

/** *********************************************************************
 # Usage       :   CompleteCreateDropdownController
 # Purpose     :   handles the setup, rendering and selecting of choices in the dropdown
 # Returns     :   a set of dropdown properties
 # Parameters  :   an autocompleteInstance
 # Throws      :
 # See Also    :   called from sr_setup_autocomplete_instance
 # Comments :        
 ********************************************************************** */
var CompleteCreateDropDownController = function(acInstance, acConfigs) {
    var dropdownRows = [];
    var activeIndex = -1;
    var oldIndex = -1;
    var vph = vjs_viewportGetHeight();
    var screenKeyboard = 0;
    if (vph > 500 && (Modernizr.phone || Modernizr.tablet)) {
        screenKeyboard = 315;
    } else if (Modernizr.phone || Modernizr.tablet) {
        screenKeyboard = 80;
    }



    // pre-build the divCloser for use when we need it.
    if (Modernizr.touchevents) {
        var divCloser = document.createElement('div');
        divCloser.className = 'closer';
        vjs_setAttr(divCloser, 'aria-label', 'Close the search options');
        vjs_setAttr(divCloser, 'role', 'button');
        divCloser.onclick = function(event) {
            event.preventDefault();
            event.stopPropagation();
            dropdownProperties.hide();
            acInstance.inputhint.value = "";
            acInstance.inputbox.value = "";
        };
    }

    /** *********************************************************************
	# Comments : Highlight the row we are over.
     ********************************************************************** */
    var onMouseOver = function(event) {
        activeIndex = this.__index;
        dropdownProperties.highlight(this.__index);
    };

    var dropdownProperties = {

        /** *********************************************************************
         # CompleteCreateDropDownController / dropdownProperties :
              Turn off the entire dropdown       
         ********************************************************************** */
        hide: function() {
            acInstance.dropdown.style.visibility = 'hidden';
        },

        /** *********************************************************************
         # Usage       :   refresh(token, matches,search_string)
         # Purpose     :   updates the appearance of the dropdown
         # Returns     :   nothing
         # Parameters  :   token, matches and search_string
         # CompleteCreateDropDownController / dropdownProperties :
         #    takes the search string and the matches and outputs
              the dropdown.
         ********************************************************************** */
        refresh: function(matches, search_string, suppressHeader) {

            // hide the dropdown and clear it's values
            acInstance.dropdown.style.visibility = 'hidden';
            acInstance.dropdown.innerHTML = '';

            // if we have no search term, due to backspacing or select & remove,
            // or we haven't gotten any adjacency lists we don't want a dropdown here.
            // so we just don't do anything and return, dropdown will stay hidden.
            if (!Object.keys(acInstance.dropdown.engine.adjacencyLists).length) {
                return;
            }

            // get the location to put our values into.  We want to
            // restrict the length of the dropdown in cases where
            // there is a screen keyboard covering the screen.
            // heuristic give 6px
            var rect = acInstance.dropdown.parentNode.getBoundingClientRect();
            var distanceToTop = rect.top - 6;
            // distance from the browser border.
            var distanceToBottom = vph - rect.bottom - 6 - screenKeyboard;
            if (distanceToBottom < 215) { distanceToBottom = 215; }
            acInstance.dropdown.style.maxHeight = distanceToBottom + 'px';

            // for mobile users we add a closer div so that they can
            // remove the dropdown easily.
            if (Modernizr.touchevents) {
                // put the closer in the dropdown.  It's ok it's
                // absolutely positioned.
                acInstance.dropdown.appendChild(divCloser);
            }

            // set up the rows for the dropdowns.
            dropdownRows = [];

            // counter for the suggestions from the dropdown
            var suggestionIndex = 0;

            // handle all of the matches, matches are setup in the
            // repaint routine
            vjs_forEach.call(matches, function(indivMatch) {
                // get the config for this index so we can generate the html
                var conf = acConfigs[indivMatch.name];

                var datasetDiv = document.createElement('div');
                datasetDiv.className = 'ac-dataset-' + indivMatch.name;
                if (!suppressHeader) {
                    datasetDiv.innerHTML = conf.header;
                }

                var suggestionsDiv = document.createElement('div');
                suggestionsDiv.className = 'ac-suggestions';

                // to handle the underlining of the search strings in the results
                // precompute the regex's and search string parts needed.
                var search_strings = search_string.split(/ +/);
                // from vanilla.js, this removes strings that
                // are substrings of others in the array.
                //  ['joh','jo'] =>  ['joh']
                search_strings = search_strings.getSuperset();
                var search_regexs = [];
                vjs_forEach.call(search_strings, function(_string, idx) {
                    var escapedSearchText = _string.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
                    escapedSearchText = escapedSearchText.unidecode();
                    search_regexs.push(RegExp(escapedSearchText, 'i'));
                });




                for (var i = 0, len = indivMatch.data.length; i < len; i++) {
                    var match = indivMatch.data[i];
                    var divRow = document.createElement('div');
                    divRow.className = 'ac-suggestion';
                    divRow.__index = suggestionIndex++;
                    divRow.__value = match.v;
                    divRow.__data = match.d; // the data for the match		
                    divRow.innerHTML = conf._compiledTemplate.render(match.d);

                    // add an em around the part of the text that matches our search string.
                    // this highlights for the user what was matched.
                    // The was cribbed from what was generating this for
                    // the chosen dropdown, though that did not allow spaces which this will.
                    if (search_string) {
                        var item_span = divRow.querySelector('.search-results-item');
                        var item_text = item_span.innerHTML;

                        // we have to remove the html in here, so that we dont end up
                        // replacing text within the html tag.
                        item_text = item_text.replace('<strong>', '__');
                        item_text = item_text.replace('</strong>', '_/_');

                        // run through the search terms and match the strings as appropriate
                        vjs_forEach.call(search_strings, function(_string, idx) {
                            var ud_item_text = item_text.unidecode();
                            var startpos = ud_item_text.search(search_regexs[idx]);
                            if (startpos > -1) {
                                var new_text = item_text.substr(0, startpos + _string.length) + '</>' + item_text.substr(startpos + _string.length);
                                item_text = new_text.substr(0, startpos) + '<>' + new_text.substr(startpos);
                            }
                        });

                        // Replace our tag proxies with actual tags.
                        item_text = item_text.replace(/<>/g, '<em>');
                        item_text = item_text.replace(/<\/>/g, '</em>');
                        item_text = item_text.replace(/__/g, '<strong>');
                        item_text = item_text.replace(/_\/_/g, '</strong>');
                        item_text = item_text.replace(/>amp;/g, '>');
                        item_span.innerHTML = item_text;
                    }


                    // For the dropdown we add for each of these a
                    // click handler using the mouse to click on a row
                    // for selection.
                    divRow.onclick = function(event) {
                        event.preventDefault();
                        event.stopPropagation();

                        // set our values in the box.
                        acInstance.inputbox.value = this.__data.n;
                        acInstance.inputhint.value = this.__data.n;

                        // mark the search box yellow and hide the dropdown
                        sr_cleanup_dropdown_after_select(acInstance, dropdownProperties, this);

                        // determine if we update the form or submit the result.
                        if (acInstance.isSelect) {

                            // this is when the user uses the mouse to
                            // select an option.  when they use the
                            // arrow or enter key we set resultID and
                            // resultIndex via the use of
                            // RSE.onSelected which handles that (line
                            // 472 at time of writing), this is a bit
                            // redundant, but necessary.
                            acInstance.resultId.value = this.__data.i;
                            acInstance.resultIndex.value = this.__data.x;
                            dropdownProperties.hide();
                            sr_autocomplete_select_item(this.__data, acInstance);
                        }
                        // onclick we send a request to the search engine
                        else {
                            // get the form's action.
                            var search_script_url = acInstance.form.action;
                            var url = search_script_url + '?search=' + this.__data.n + '&pid=' + this.__data.i + '&idx=' + this.__data.x;
                            window.location.assign(url);
                        }
                    };

                    dropdownRows.push(divRow);
                    suggestionsDiv.appendChild(divRow);
                }

                datasetDiv.appendChild(suggestionsDiv);
                acInstance.dropdown.appendChild(datasetDiv);
            });



            // Add "Search for 'xxx'" to bottom of dropdown
            // Add a row to tell how to select a player.
            if (!acInstance.isSelect) {
                var datasetDiv = dropdownProperties.addOtherResults(suggestionIndex);
                acInstance.dropdown.appendChild(datasetDiv);
            }

            if (dropdownRows.length === 0) {
                return; // nothing to show.                    
            }


            acInstance.dropdown.style.top = '100%';
            acInstance.dropdown.style.bottom = '';
            acInstance.dropdown.style.visibility = 'visible';
        },

        /** *********************************************************************
         # CompleteCreateDropDownController / dropdownProperties :
         move highlisght to the next row	 
         ********************************************************************** */
        highlight: function(index) {

            // remove the old highlight
            if (oldIndex !== -1 && dropdownRows[oldIndex]) {
                vjs_removeClass(dropdownRows[oldIndex], 'ac-is-under-cursor');
            }

            // Add the new highlight
            activeIndex = index;
            vjs_addClass(dropdownRows[index], 'ac-is-under-cursor');
            oldIndex = index;
        },

        /** *********************************************************************
         # CompleteCreateDropDownController / dropdownProperties :
         move the highlights up or down, and returns the index of the
         active elmement.	 
         ********************************************************************** */
        move: function(step) {

            // moves the selection either up or down (unless it's not possible) step is either +1 or -1.
            if (acInstance.dropdown.style.visibility === 'hidden') return '';

            // we are at the top of teh dropdown.
            if (activeIndex + step <= -1) {
                // Do we need to return the search box to original value?
                activeIndex = -1;
                return -1;
            }
            // we are the bottom fo the drop down
            else if (activeIndex + step === dropdownRows.length) {
                return dropdownRows[activeIndex] ? dropdownRows[activeIndex].__value : null;
            }

            // update the activeIndex and the highlight and return the __value.
            activeIndex += step;
            dropdownProperties.highlight(activeIndex);

            return dropdownRows[activeIndex] ? dropdownRows[activeIndex].__value : null;
        },

        /** *********************************************************************
         # CompleteCreateDropDownController / dropdownProperties :  return the data value for the selected items
         # defaultToFirstChoice true causes us to select the first item in dropdown if none is selected.
         ********************************************************************** */
        getSelectedData: function(defaultToFirstChoice) {

            // select the first one by default.
            if (defaultToFirstChoice && activeIndex < 0) { activeIndex = 0; }

            if ((activeIndex > -1) && dropdownRows[activeIndex]) return dropdownRows[activeIndex].__data;
            return null;
        },

        /** *********************************************************************
         # CompleteCreateDropDownController / dropdownProperties :  return the data value for the selected items
         ********************************************************************** */
        addOtherResults: function(suggestionIndex) {

            // just build a div and tack it onto the end of the
            // results for cases where the result they want is not in
            // the autocomplete. Don't want them to think this is all
            // we have.
            var datasetDiv = document.createElement('div');
            datasetDiv.className = 'ac-dataset-other';
            datasetDiv.innerHTML = '<div class="ac-results-header"></div>';

            var suggestionsDiv = document.createElement('div');
            suggestionsDiv.className = 'ac-suggestions';

            var divRow = document.createElement('div');
            divRow.className = 'ac-suggestion ac-suggestion-other-search';
            var inputboxValue = vjs_escapeHtml(acInstance.inputbox.value);
            divRow.__value = inputboxValue;
            divRow.__index = suggestionIndex++;
            divRow.__data = {};
            divRow.innerHTML = __sr_text_all_matches_for + ' ' + __sr_text_quote_open + inputboxValue + __sr_text_quote_closed + ' (' + __sr_text_press_enter_to_search_for + ')';
            divRow.__data.n = inputboxValue;

            // if clicking on other results send them to the search results page.
            divRow.onclick = function(event) {
                event.preventDefault();
                event.stopPropagation();

                // set up values, so we are ready to submit.
                acInstance.resultId.value = '';
                acInstance.resultIndex.value = '';
                acInstance.inputhint.value = this.__data.n;
                acInstance.inputbox.value = this.__data.n;

                // mark the search box yellow and hide the dropdown
                sr_cleanup_dropdown_after_select(acInstance, dropdownProperties, this);

                window.location.assign(sr_SITE_PREFIX + '/search/search.fcgi?search=' + acInstance.inputbox.value);
            };
            dropdownRows.push(divRow);
            suggestionsDiv.appendChild(divRow);
            datasetDiv.appendChild(suggestionsDiv);
            return datasetDiv;
        },

        /** *********************************************************************
         # CompleteCreateDropDownController / dropdownProperties :   reseset teh inddex values.       
         ********************************************************************** */
        reset: function() {
            oldIndex = -1;
            activeIndex = -1;
            return null;
        }
    };
    return dropdownProperties;
}; // endend of createDropDownController


var CompleteSearchEngine = {
    lookupTables: {},
    adjacencyLists: {},
    objIndexes: {},
    arrIndexKeys: [],

    /** *********************************************************************
     # Usage       :   engine.cse_init(objIndexes)
     # Purpose     :    initializes the search indexes from objIndexes
     # Returns     :   
     # Parameters  :   objIndexes is an object of objects storing all of the info for the
                          search indexes, the names of the indexes is in
		       objIndexes.configNames  an array
     # Comments :    This constructs the structure for CompleteSearchEngine, `this' refers to the
                     CompleteSearchEngine var.
     ********************************************************************** */
    cse_init: function(objIndexes) {

        console.log('      ### cse_init');
        // this special var refers to the var CompleteSearchEngine
        var _CSEng = this;

        // Set the engines object definitions to match what we were sent.
        _CSEng.objIndexes = objIndexes;
        _CSEng.arrIndexKeys = objIndexes.configNames;

        // Check to see if our data is stale and if so clear it.
        // age in minutes.
        var lookupTableCreateTime = window.sessionStorage['sr_autocomplete_insert_time'] || 0;
        var lookupTableAge = (Date.now() - lookupTableCreateTime) / (1000 * 60);

        // if more than 8 hours old we want to refresh the data.
        var clearLookupTables = false;
        if ((lookupTableAge > (60 * 8)) || is_new_jscss_version) {
            clearLookupTables = true;
            // reset the autocomplete insert time.
            window.sessionStorage['sr_autocomplete_insert_time'] = Date.now();
        }

        // for each of the index names we set up the initial lookup
        // table to be stored in session storage.

        _CSEng.arrIndexKeys.forEach(function(indexKey) {
            _CSEng.cse_initAutocompleteDataStructure(indexKey, clearLookupTables);
        });

    },

    /** *********************************************************************
     # Usage       :   cse_initAutocompleteDataStructure(indexKey, clearLookupTables)
     # Purpose     :   fetches the index csv files via ajax if needed
     # Returns     :   nothing, but returns with content loaded and ready to go
     # Parameters  :   indexKey - name of the index we are loading,
                       clearLookupTables  - force us to redownload the data.
     # See Also    :  cse_init calls this routine     
     # Comments :        
     ********************************************************************** */
    cse_initAutocompleteDataStructure: function(indexKey, clearLookupTables) {

        // get the CompleteSearchEngine var again
        var _CSEng = this;
        var hasLookupTable = _CSEng.lookupTables[indexKey];

        // Has the lookup table been populated?
        if (!hasLookupTable) {
            // no lookup table is defined for this index, so we have
            // to either build it from the session storage or we have
            // to load it via ajax and build.


            // grab the configuration defn of this index
            var indexDefn = _CSEng.objIndexes[indexKey];

            // Check local storage for the lookupTable and adjacencyList for this index,
            // clean out our old lookuptable value which was json
            window.sessionStorage.removeItem(indexDefn.lookupTableKey);
            var adjacencyList = window.sessionStorage[indexDefn.adjacencyListKey];
            var csvStorage = window.sessionStorage[indexDefn.csvStorageKey];

            // these will be undefined only in cases where session
            // storage is not supported, and we check for that
            // earlier, so we never should actually see this if-then
            // match
            if (csvStorage === 'undefined' || adjacencyList === 'undefined') {
                // do nothing.
            }
            // use this lookup only if we are inside of 16 hours since last updating
            else if (csvStorage && adjacencyList && !clearLookupTables) {

                // load the data from session storage, note that I have tested this a couple
                // different ways and it is faster to reparse the lookup table from csv stored
                // in sessionStorage than it is to store the json and then use JSON.parse.
                // The adjacencyList though is faster stored as json, maybe since there are so few keys?
                _CSEng.lookupTables[indexKey] = _CSEng.cse_generateLookupTable(indexKey, csvStorage, _CSEng);
                _CSEng.adjacencyLists[indexKey] = JSON.parse(adjacencyList);

            } else {

                var url = indexDefn.url;
                if (sr_debugging()) {
                    url = url.replace('/short/', '/nocdn/');
                }

                // Fetch lookup data from server 
                console.log('      ### cse_initAutocompleteDataStructure fetching:' + indexDefn.url);
                vjs_Ajax('GET',
                    url, {},
                    // success
                    function(data) {
                        // We have to parse the data to construct the lookup tables from csv
                        // this also fills _CSEng.lookupTables[indexKey] and _CSEng.adjacencyLists[indexKey]
                        _CSEng.cse_generateAutocompleteDataStructures(indexDefn, data);

                        // store the two lists in session storage.
                        // note that I have tested this a couple
                        // different ways and it is faster to reparse the lookup table from csv stored
                        // in sessionStorage than it is to store the json and then use JSON.parse.
                        // The adjacencyList though is faster stored as json, maybe since there are so few keys?				
                        window.sessionStorage[indexDefn.csvStorageKey] = data;
                        window.sessionStorage[indexDefn.adjacencyListKey] = JSON.stringify(_CSEng.adjacencyLists[indexKey]);
                    },
                    // failed, we store the followingin sessionStorage, so that we don't keep trying.
                    function() {
                        window.sessionStorage['sr_autocomplete_failed'] = true;
                    },
                    true,
                    false);
            }
        }
    }, // endend of cse_initAutocompleteDataStructure

    /** *********************************************************************
     # Usage       :   cse_generateAutocompleteDataStructures(indexDefn, data)
     # Purpose     :   parses the csv files and builds the adjacencyList and lookupTable
     # Returns     :   nothing, but fills  this.lookupTables[indexDefn.name]  &
                                           this.adjacencyLists[indexDefn.name] 
     # Parameters  :   indexDefn - an object defining the index and csvData a big block of csv data
     # Throws      :
     # See Also    :   called by cse_initAutocompleteDataStructure
     # Comments :      we are passed csv files and htis builds the needed structures for those files.
    ********************************************************************** */
    cse_generateAutocompleteDataStructures: function(indexDefn, csvData) {
        console.log('      ### cse_generateAutocompleteDataStructures');
        if (!csvData) { return false; }
        /* 
        /* split the file into an array of lines:
         * http://stackoverflow.com/questions/5034781/js-regex-to-split-by-line */
        var _CSEng = this;
        _CSEng.lookupTables[indexDefn.name] = _CSEng.cse_generateLookupTable(indexDefn.name, csvData, _CSEng);
        _CSEng.adjacencyLists[indexDefn.name] = _CSEng.cse_generateAdjacencyList(csvData, _CSEng);
        return true;
    },

    /** *********************************************************************
     # Usage       :   cse_generateLookupTable(indexDefn, data, _CSEng)
     # Purpose     :   parses the csv files and builds the lookupTable
     # Returns     :   nothing, but returns the lookup table 
     # Parameters  :   indexName - a string with our indexDefn.name, csvData a big block of csv data
                             _CSEng what we attach this to 
     # Throws      :
     # See Also    :   called by cse_generateAutocompleteDataStructures, cse_generateAdjacencyList
     # Comments :      there was a version that used json, but this is much more compact
                       we assume that the csvData comes in as csv in the form of
                       * id, name, years, active 
    ********************************************************************** */
    cse_generateLookupTable: function(indexName, csvData, _CSEng) {
        /* 
        /* split the file into an array of lines:
         * http://stackoverflow.com/questions/5034781/js-regex-to-split-by-line */
        var rowsOfData = csvData.match(/[^\r\n]+/g);
        var lookupTable = {};
        var currSearchValue, currLookupObj;


        /* loop through the search data. */
        for (var rowIdx = 0, len = rowsOfData.length; rowIdx < len; rowIdx++) {

            /*
	     we simplify these to one-letter as we are storing the
	    json in session storage and we want to minimize that
	    data.
	     
	     DEFN OF WHAT WE ARE STORING
	     // removed: currLookupObj.v = value
	     currLookupObj.t = tokenized data
	     currLookupObj.d = data
	     currLookupObj.d.i = id         csv value 0
	     currLookupObj.d.n = name       csv value 1
	     currLookupObj.d.y = years      csv value 2
	     currLookupObj.d.a = is_active  csv value 3
	     currLookupObj.d.x = indexName  

	     fbref
	     currLookupObj.d.c = country 3la                      csv value 4
	     currLookupObj.d.f = flag of the country gb-eng, de   csv value 5
	     currLookupObj.d.b = clubs                            csv value 6
	     currLookupObj.d.g = gender of competition            csv value 7
	     currLookupObj.d.p = page popularity                  csv value 8

	     We choose short names like this to make the amount of
	     data stored in sessionStorage smaller.  I suppose we
	     could just store csv and then parse it every time, but
	     this way is faster on subsequent calls.

	     We split the currSearchValue (or line of data) on commas
	     and trim whitespace we assume that the data comes in as
	     csv in the form of id, name, years, active
	     */
            currSearchValue = rowsOfData[rowIdx].split(',');
            currLookupObj = {};
            currLookupObj.v = currSearchValue[1]; // redundant with .d.n being the exact same value
            currLookupObj.t = _CSEng.cse_tokenize(currSearchValue[1]);
            currLookupObj.d = new Object();
            currLookupObj.d.i = currSearchValue[0];
            currLookupObj.d.n = currSearchValue[1];
            currLookupObj.d.y = currSearchValue[2];
            currLookupObj.d.a = parseInt(currSearchValue[3]);
            currLookupObj.d.c = currSearchValue[4];
            if (currSearchValue[5]) {
                var val = currSearchValue[5].toLowerCase();
                currLookupObj.d.f = val;
            }
            // for the csv we separate by '-' and we need to replace back with ', '
            if (currSearchValue[6]) {
                currLookupObj.d.b = currSearchValue[6].replace(/!/g, ', ');
            }
            // for the csv we separate by '-' and we need to replace back with ', '
            if (currSearchValue[7]) {
                currLookupObj.d.g =
                    currSearchValue[7] === 'M' ? __sr_text_mens_comp :
                    currSearchValue[7] === 'F' ? __sr_text_womens_comp :
                    '';
            }
            // get the number indicating the page popularity.
            if (currSearchValue[8]) {
                var num = parseInt(currSearchValue[8]);
                if (isNaN(num)) {
                    num = 0;
                }
                // we set this to a negative so we can sort the
                // popularity and the names in the same subroutine.
                currLookupObj.d.p = (10000000 - num).toString().padStart(9, '0');
            } else {
                currLookupObj.d.p = currLookupObj.d.n;

                /*
                if (currLookupObj.d.n.includes('Alex')) {
                    console.log('no hit');
                    console.log(rowsOfData[rowIdx]);
                    console.log(currSearchValue);
                    console.log(currLookupObj);
                }
                */

            }

            currLookupObj.d.x = indexName;

            /*
	    if (currLookupObj.d.n.includes('Alex')) {
		console.log(currLookupObj.d.n.concat(', sorter:',currLookupObj.d.p));
		console.log(currLookupObj.d.n.concat(', sorter:',currLookupObj.d.p));
	    }
	    */

            // Store in lookup table
            lookupTable[rowIdx] = currLookupObj;

        } // finish iterating through the list.
        return lookupTable;
    },

    /** *********************************************************************
     # Usage       :   cse_generateAdjacencyList(indexDefn, data)
     # Purpose     :   parses the csv files and builds the adjacencyList
     # Returns     :   nothing, but fills this.adjacencyLists[indexDefn.name] 
     # Parameters  :   indexName - a string with our indexDefn.name, csvData a big block of csv data
                             _CSEng what we attach this to 
     # Parameters  :   
     # Throws      :
     # See Also    :   called by cse_initAutocompleteDataStructure, cse_generateLookupTable
     # Comments :      This just builds the adjancency table from a csv file.
    ********************************************************************** */
    cse_generateAdjacencyList: function(csvData, _CSEng) {
        var rowsOfData = csvData.match(/[^\r\n]+/g);
        var adjacencyList = {};
        var currSearchValue;

        /* save this function for use in the loop below to stock
         * adjacency list. It adds the rowIdx to a list corresponding
         * to the first letter of each token to speed up the search.
         */
        var __addToAdjacencyList = function(adjList, idx, token) {
            var firstChar = token.substring(0, 1);
            // create a new list for this firstChar if doesn't exist.
            if (!adjList.hasOwnProperty(firstChar)) {
                adjList[firstChar] = [];
            }
            adjList[firstChar].push(idx);
        };

        /* loop through the search data. */
        for (var rowIdx = 0, len = rowsOfData.length; rowIdx < len; rowIdx++) {

            // split the csv and 
            currSearchValue = rowsOfData[rowIdx].split(',');
            var tokens = _CSEng.cse_tokenize(currSearchValue[1]);

            // add this object to the adjacency list for quick lookup based on tokens
            if (tokens) {
                // run through each token for this item.
                tokens.forEach(function(token) {
                    if (token && token.length > 0) {
                        __addToAdjacencyList(adjacencyList, rowIdx, token);
                    }
                });
            }
        } // finish iterating through the list.
        return adjacencyList;
    },

    /** *********************************************************************
     # Usage       :     dropDown.engine.cse_queryExecute(text); 
     # Purpose     :     provide a list of all elements that match
     # Returns     :     an array of objects
     # Parameters  :     query text
     # Comments :        
     ********************************************************************** */
    cse_queryExecute: function(queryText, indexesUse) {
        // get the individual query parts
        var _CSEng = this;
        var queryTokens = _CSEng.cse_tokenize(queryText);
        var arrResults = [];
        if (queryTokens.length > 0) {
            var indexKeys = _CSEng.arrIndexKeys;
            if (indexesUse) {
                indexKeys = indexesUse;
            }

            // iterate through the various indexes and generate results.
            indexKeys.forEach(function(indexKey) {
                // todo: remove this for executives only
                // if (indexKey !== 'executives') return false;
                var indexDefn = _CSEng.objIndexes[indexKey];
                var ltable = _CSEng.lookupTables[indexKey];
                var adjlist = _CSEng.adjacencyLists[indexKey];
                var matches = _CSEng.cse_getMatches(queryTokens, ltable, adjlist, indexDefn.limit);

                if (matches && (matches.length > 0)) {
                    arrResults.push({ name: indexKey, data: matches });
                }
            });

        }

        return arrResults;
    },

    /** *********************************************************************
     # Usage       :   cse_tokenize
     # Purpose     :   just standardize the entry for this value.
     # Returns     :   an array of words or tokens to search on   
     # Parameters  :   a string
     # Comments :      one subtle thing here is that we strip out '.-() etc
     #                   before exiting here.
     ********************************************************************** */
    cse_tokenize: function(str) {
        if (!str) { return str; }

        // unidecode the values for the string.
        str = str.unidecode();

        // Fix the J.T. Snow, De'Aaron Fox, Cameron Carter-Vickers, (ACC) search issues.
        // strip out: . ' , - ( )
        str = str.replace(/[\-.'\(\)]/g, '');
        return str.trim().toLowerCase().split(' ');
    },


    /** *********************************************************************
     # Usage       :  _CSEng.cse_getMatches(queryTokens, lookupTable, adjacencyList, limit)
     # Purpose     :  provides the  matching of our query to the values we have 
     # Returns     :  an array of value that match
     # Parameters  :  queryTokens - the sanitized search strings,
                      lookupTable - the big set of values we are storing
                      adjacencyList - a very simple index setup
                      limit - how many to return for each index
     # See Also    :  called by cse_queryExecute
     
     # Comments :     see note below about this routine being a bit redundant.
     ********************************************************************** */
    cse_getMatches: function(queryTokens, lookupTable, adjacencyList, limit) {
        if (!adjacencyList) { return []; }
        var matchHash = {};
        var matchesToReturn = [];
        var _CSEng = this;

        //	console.log('cse_getMatches,queryTokens');
        //	console.log(queryTokens);


        // get all matches w/ the first char of these
        // tokens. REDUNDANCY NOTE: Note that I think this will match
        // multi-word matches more than once.  Once on the first word
        // and once on the second word.  This is probably fine and we
        // get around this by storing matches in a hash first and then
        // getting the array of matches from that.  So storing it in
        // the hash 2x or more is not an issue as only the one copy of
        // the item will be included in the array.
        // todo: handle cases where a queryToken[i] is substring of queryToken[j]
        var firstChar = queryTokens[0].substring(0, 1);
        //console.log('firstChar:'.concat(firstChar));
        // Lookup the list of target values (identified with an
        // integer) that matches this first character.  Targets
        // will contain an array of integers that correspond to target phrases in lookupTable.
        var targets = adjacencyList[firstChar];

        // check all matches or "target" phrases that start with
        // this character
        if (targets) {
            targets.forEach(function(target) {

                // get the target's tokens.
                var targetObj = lookupTable[target];
                var targetTokens = targetObj.t;

                // make sure this is a complete match and if so we
                // add the target's obj to the hash of all
                // matches.
                var completeMatch = _CSEng.cse_allTokensMatch(queryTokens, targetTokens);
                if (completeMatch) {
                    matchHash[target] = targetObj;
                }
            });
        }

        //  END OF TWEAK


        // put matches in an array
        for (var target in matchHash) {
            if (matchHash.hasOwnProperty(target)) {
                matchesToReturn.push(matchHash[target]);
            }
        }

        // Sort the array alphabetically and move on.
        matchesToReturn.sort(function(a, b) {
            // note that we deleted a block that showed exact matches
            // to the query first here.  I decided that it was
            // unneeded and slowed things down unnecessarily.
            // 
            // sort by the popularity of the pages, and then alpha.
            //
            // this sorts by popularity, try n for name otherwise
            return a.d.p.localeCompare(b.d.p);


        });

        return matchesToReturn.slice(0, limit);
    },

    /** *********************************************************************
     # Usage       :   cse_allTokensMatch
     # Purpose     :   checks to see if they have the same tokens.
     # Returns     :   a boolean
     # Parameters  :   tokensA (the query) and tokensB (the target)
     # Comments    :   Note that the query is a subset of the target, ie
                        we want Mic Man  to return true for Mickey Mantle
     ********************************************************************** */
    cse_allTokensMatch: function(as, bs) {
        var allMatch = true;
        // this is an array used to check on all of the b_idxs, we are
        // assuming 6 words is the most any name will have, so we
        // preset them to false as we've used none of them.
        var b_idxs_used = [false, false, false, false, false, false, false];

        // console.log('### into cse_allTokensMatch');
        // run through A's tokens
        as.forEach(function(a, a_idx) {
            var oneMatch = false;
            var a_length = a.length;
            // Run through b's tokens and see if a is a substring of
            // any of the b's.
            bs.forEach(function(b, b_idx) {

                // no need to do this again if we already have a match of if we've already used this idx before.
                if (oneMatch || b_idxs_used[b_idx]) return true;
                if (a === b.substring(0, a_length)) {
                    oneMatch = true;
                    b_idxs_used[b_idx] = true;
                }
            });

            if (!oneMatch) {
                allMatch = false;
            }
        });

        return allMatch;
    }

};
// endend of CompleteSearchEngine '


/** *********************************************************************
    # Usage       : sr_autocomplete_select_item
    # Purpose     :
    # Returns     :   
    # Parameters  :   
    # Throws      :
    # See Also    :
    # Comments    : the user has made a selection - 
	                so hide the selection box and populate the hidden fields, 
					plus the endpoint div where additional data will go, if any
    ********************************************************************** */
function sr_autocomplete_select_item(data, acInstance) {

	acInstance.resultId.dispatchEvent(new Event('change'));

    // we have data and an id in data.i
    if (data && data.i) {

        // shut down the search box and show text.
        vjs_addClass(acInstance.selectWrapper, 'hidden');
        acInstance.selectName.querySelector('span.ac-prefill-name').innerHTML = data.n;

        // set the proper name to the inputbox value, this will get used after submit.
        acInstance.inputbox.value = data.n;

        var selection_closer = acInstance.selectName.querySelector('button');

        // Run the ajax stuff here for the versus finder and other scripts where the
        // selection of a player flies in other content
        var endpoint = acInstance.wrapper.querySelector('[data-endpoint]');
        if (endpoint) {
            var endpoint_url = vjs_getAttr(endpoint, 'data-endpoint');
            endpoint_url = endpoint_url + data.i;
			
			var extra_config = vjs_getAttr(endpoint, 'data-config');
			if(extra_config) {
				extra_config = extra_config.replace(/'/g, '"');
				extra_config = JSON.parse(extra_config);
			}

            // Check to see if we have additional params. If so we have to read the form values
			//  the value of those params will get tacked onto the url in the ajax call
            var additional_params = vjs_getAttr(endpoint, 'data-additional-params');
            if (additional_params) {
                // get the form
                var theForm = vjs_closest(endpoint, 'form');
                console.log('### getting additional params');
                console.log(theForm);
                additional_params.split(',').forEach(function(item, i) {
                    // get the form element.
                    var els = theForm.querySelectorAll('[name=' + item + ']');
                    console.log(els);
                    // for radios we have to run through each thing.
                    vjs_forEach.call(els, function(el, idx) {
                        var el_value = vjs_getFormElement(el);
                        console.log('form_element name=' + item + ' => ' + el_value);
                        console.log(el);
                        if (el && (el_value !== '')) {
                            endpoint_url = endpoint_url + '&' + item + '=' + el_value;
                        }
                    });

                });
            }

			if(acInstance.selectName.querySelector('.endpoint')) {
				var endpoint_div = acInstance.selectName.querySelector('.endpoint');
				endpoint_div.classList.add('hidden');
			}
			// STATHEAD NEW: this is the old part that can be removed once every tool with an endpoint no longer returns HTML
			else {
				var endpoint_div = document.createElement('DIV');
				endpoint_div.classList.add('endpoint');
				endpoint_div.classList.add('hidden');
				acInstance.selectName.appendChild(endpoint_div);
			}

            vjs_Ajax('GET', endpoint_url, {},
                function(data) {
					try {
						// populate the dropdowns with the JSON data we got from the script
						data = JSON.parse(data);
						for (var key in data) {
							var selectObj = document.querySelector('[name="'+key+'"]');
							data[key].forEach(function(opt) {
								var newopt = document.createElement('option');
                                newopt.setAttribute('value',opt.val);
                                if ( opt.disabled ) {
                                    newopt.disabled = true;
                                }
								newopt.innerText = opt.label;
								selectObj.appendChild(newopt);
							});
						}
						// check if we should show the results right away - or not, based upon some other value
						if(extra_config && extra_config.show) {
							let f = document.querySelector('[name="'+extra_config.show.param+'"]:checked');
							if(f && f.value == extra_config.show.val) {
								endpoint_div.classList.remove('hidden');
							}
						}
						else {
							endpoint_div.classList.remove('hidden');
						}
					}
					// STATHEAD NEW: this is the old part that can be removed once every tool with an endpoint no longer returns HTML
					catch (e) {
						endpoint_div.innerHTML = data;
						endpoint_div.classList.remove('hidden');
					}
	            },
                function() { alert(__sr_text_autocomplete_error); },
                true,
                false  // STATHEAD NEW: change this to true once we know we're always getting JSON
			);
        }

		// STATHEAD NEW: this is new
		acInstance.selectName.classList.remove('hidden');

        var dataInputToggle = vjs_getAttr(acInstance.dataInputToggle, 'data-input-toggle')
        if (dataInputToggle) {
            var parsedData = JSON.parse(dataInputToggle)
            var toggleField = document.querySelector('.' + parsedData.name)
            toggleField.classList.add('open')
        }
    }
}

/** *********************************************************************
   # Usage       :  sr_reset_playerSelect
   # Purpose     :
   # Returns     :   
   # Parameters  :   
   # Throws      :
   # See Also    :
   # Comments    :  removes the previously selected auto-complete value and
                    re-activates the search form.
   ********************************************************************** */
function sr_reset_playerSelect(button, acInstance) {
    // if we are given an el, we don't have to search for it,
    // otherwise we go up through the tree until we find an element
    // with a div.player_select_wrapper as a child.
    if (!acInstance) {
        acInstance = button;
        while (acInstance.parentNode && !acInstance.parentNode.querySelector('.select_wrapper,.player_select_wrapper')) {
            acInstance = acInstance.parentNode;
        }
        // now select the player_select item.
        acInstance = acInstance.parentNode.querySelector('.player_select');
    }
    // Changing this 2020-01-02 for http://b0.bbr.srdevel.com/friv/teammates_and_opponents.fcgi?srdev=sf
    // when the result is x'ed we want this reset.
    vjs_removeClass(acInstance.selectWrapper, 'hidden');


    //acInstance.selectName.innerHTML = '';
    // we don't want the entire thing removed - we want ...
    // 1. remove all <options> that aren't 'Any'
	var sels = acInstance.selectName.querySelectorAll('select');
	vjs_forEach.call(sels, function(sel, i) {
		var options = sel.querySelectorAll('option');
		vjs_forEach.call(options, function(o, i) {
			if(i >= 1 || o.value) {
				o.remove();
			}
		});
	});
	// 2. remove the player name
    acInstance.selectName.querySelector('span.ac-prefill-name').innerHTML = '';
	// 3. hide the wrapper
	acInstance.selectName.classList.add('hidden');

    acInstance.resultId.value = '';
    acInstance.resultIndex.value = '';
    acInstance.inputbox.value = '';
    acInstance.inputhint.value = '';


	// new: 11/16/2023 -- trigger a change to this element, so that other change events that may be attached, execute
	acInstance.resultId.dispatchEvent(new Event('change'));

}

/* ### FILE:sr.mod.display.js    */
2

/* *********************************************************************
   # Usage       :   sr_display_tooltipShow()
   # Purpose     :   present all of the tooltips that exist on the page.
   # Returns     :   nothing
   # Parameters  :   optional id. if none it runs on all found
   # Throws      :
   # See Also    :
   # Comments    :  To make the setup much faster this only matches img, th and span elements with a class of tooltip
   #                The value of the tooltip is set by an attribute tip="mouseover"
   #                this uses tipsy to generate these tooltips
   #                currently only tips on spans, <img> and <th> are supported, 
   #                   but we can easily add more.
   #                    http://onehackoranother.com/projects/jquery/tipsy/#download
   #
   #                tip="" uses the autoWE callback to offset the tip to the top and
   #                           to the left or right as needed
   #                tip_down="" uses the autoNS callback to offset the tip to the top or bottom
   #                tip_left="" places the tip to the left of the entry
   #                tip_right="" places the tip to the right of the entry
   #
   # I commented out the use of fixTitle from the jquery.tipsy.js file
   #   since we are not using title as attribute of choice and the speed
   #   improvement was phenomenal.
   ********************************************************************** */
function sr_display_tooltipShow(id) {

    console.log('   ### sr_display_tooltipShow');
    if (Modernizr && Modernizr.touch && !(Modernizr.laptop || Modernizr.desktop)) {
	return true;
    }
    console.log('   ## sr_display_tooltipShow: run');

    var tips = document.querySelectorAll('html');
    if (id) {
	var elCheck = document.getElementById(id);
        tips = elCheck.querySelectorAll('.tooltip,.poptip');
    }
    else {
	tips = document.querySelectorAll('.tooltip,.poptip');
    }

    
    // set up the tips
    vjs_forEach.call(tips, function(el, i){
	if (vjs_getAttr(el, 'data-tip') || vjs_getAttr(el, 'tip')) {
	    tipsy_setTip(el);
	}
    });

    
    
    return true;
}



/* **************************************************************************************
 *************************************************************************************/
/* *********************************************************************
   # Usage       :   sr_display_modalSetup()
   # Purpose     :   setup any button modals on the page.
   # Returns     :   nothing
   # Parameters  :   optional id. if none it runs on all found
   # Throws      :
   # See Also    :
   # Comments    :  looks for .modal and takes the material in data-text
   #    possible options for data-text
   #    /^yt:(.*)/  causes the youtube video in $1 to be viewed
   #    /^(http.*)/ causes the content at that url to be loaded.
   #    /^(\/.*)/  matches as a url and causes an ajax load.
   #   else it's loaded as html into the modal, note that you'll need ot
   #     escape the double-quotes in your code.

   #   <button class="modal" data-text="yt:https://www.youtube.com/watch?v=dQw4w9WgXcQ">Enjoy this content</button>
   #   <button class="modal" data-text="/about/faq_frament.html_f">What our FAQ says about this</button>
   #   <button class="modal" data-text="http://www.baseball-reference.com/about/faq_frament.html_f">What our FAQ says about this</button>
   #   <button class="modal" data-text="The minimums are as follows:<br>QBs, 100cmp<br>RBs, 200rushes..">See our Minimums</button>
 ********************************************************************** */
function sr_display_modalShow(root) {
    console.log('   ### sr_display_modalSetup');
    var modals;
    if (root) {
	modals = root.querySelectorAll('.modal');
    }
    else {
	modals = document.querySelectorAll('.modal');
    }
    
    
    // set up the modals
    vjs_forEach.call(modals, function(modal, i){

	// if we don't have any text we just skip it.
	if (vjs_hasAttr(modal, 'data-text')) {
	    // get the text.
	    var text = vjs_getAttr(modal, 'data-text');

	    // set up the click handler.
	    modal.onclick = function (event) {
		sr_display_showPopup(event, event.target, text);
                sr_record_analytics_event('modal_click',sr_record_directory(), modal.innerText.substr(0,50));
	    };
	}
    });
}

/* *********************************************************************
   # Usage       :   sr_display_showPopup()
   # Purpose     :   show the popup that we want to display
   # Returns     :   true if the popup is open, false if closed   
   # Parameters  :   the event, the element clicked, the text to appear,
                      parameters are those to pass to jsModal
	               hug, closeCallback function etc.
   # Throws      :
   # See Also    :
   # Comments    :  This uses the dialog command in the, any offset passed is 
   #                 assumed to be relative for top and absolute for left.

   #  If there is a data value set earlier with clicktoclose we disable clicking to closing.
   #  note that we used to have a desiredTop here, but found no need for it.
   #  the popups will be centered on the page now
   ********************************************************************** */
var sr_display_modalOpen = false;
var sr_display_showPopup_last_clicked = null;
function sr_display_showPopup(event, elementClicked, text, parameters) {

    parameters = parameters || {};
    
    // if the last clicked item equals elementClicked and the modal is
    // open we close the modal.
    var modal_handle = document.getElementById('modal-container');
    if (elementClicked &&
	(sr_display_showPopup_last_clicked === elementClicked) &&
	(modal_handle.style.visibility !== 'hidden')) {
	sr_display_modalOpen = false;
	var modal_closer = document.getElementById('modal-close');
	vjs_triggerEvent(modal_closer,'click');
	return false;
    }
    else {
    }
	
    // Set this to the element clicked.
    if (elementClicked) {
	sr_display_showPopup_last_clicked = elementClicked;
    }
    
    console.log('   ## sr_display_showPopup');
    if (text.match(/^\//) || text.match(/^http/)) {
	sr_display_modalOpen = true;
	Modal.open({
	    ajaxContent: text,
	    draggable: true,
            event: event,
	    params: parameters,
	    loadCallback: function(){ sr_st_mobilize_modal_table();  }
	});
    }
    else if (text.match(/^yt:/)) {
	sr_display_modalOpen = true;

	var ytId = text.replace('yt:','');
	text = '<div class="margin"><iframe width="640" height="480" src="https://www.youtube.com/embed/' + ytId + '" frameborder="0" allowfullscreen></iframe></div>';

	// YouTube Video
	Modal.open({
	    content: text,
	    draggable: true,
	    showOverlay: true,
	    params: parameters,
            event: event
	});
    }
    else {	
	sr_display_modalOpen = true;
	Modal.open({
	    content: text,
	    draggable: true,
	    params: parameters,
            event: event
	});
    }
    
    if (event || window.event) {
	vjs_stopPropagation(event);
    }

    return true;
}

/* *********************************************************************
   # Usage       :   sr_display_vertical_align_divs(div_id_1, div_id_2, [false|null])
   # Purpose     :   vertically aligns two divs via js and css
   # Returns     :   nothing
   # Parameters  :   div id's 
   # Throws      :
   # See Also    :   sr_display_horizontal_align_divs(div_id_1, div_id_2, [false|null])

   # Comments :  Yes this is a kludge.  ---slf
                 Adds a margin to the top of one div to vertically align it with
                 another.  It assumes that the two divs are siblings.
                 this seems to work best when run two times, so times_thru checks that.
                 Should be set to false when initially run.


    // to run with loader use this
    //    sr_utilities_js_loader.push(function() {
    //       sr_display_vertical_align_divs('shot-chart-1','shot-chart-2',false); });
 
   ********************************************************************** */
function sr_display_vertical_align_divs(div_id_1, div_id_2,times_thru)
{
    console.log("  ### running sr_display_vertical_align_divs");

    var div1 = document.getElementById(div_id_1);
    var div2 = document.getElementById(div_id_2);
    
    var top_1 = div1.offsetTop;
    var top_2 = div2.offsetTop;
    
    if (top_1 > top_2) {
	var diff = parseInt(top_1-top_2);
	div2.style.marginTop =  diff+'px';
    }
    else {
	var diff = parseInt(top_2-top_1);
	div1.style.marginTop =  diff+'px';
    }
    if (!times_thru) {
	sr_display_vertical_align_divs(div_id_1,div_id_2,true);
    }
}

/* *********************************************************************
   # Usage       :   sr_display_horizontal_align_divs(div_id_1, div_id_2, [false|null])
   # Purpose     :   horizontally aligns two divs via js and css
   # Returns     :   nothing
   # Parameters  :   div id's 
   # Throws      :
   # See Also    :   sr_display_vertical_align_divs(div_id_1, div_id_2, [false|null])

   # Comments :  Yes this is a kludge.  ---slf
                 subtracts a margin to the left of one div to horizontally align it with
                 another.  It assumes that the two divs are siblings.
                 this seems to work best when run two times, so times_thru checks that.
                 Should be set to false when initially run.


    // to run with loader use this
    //    sr_utilities_js_loader.push(function() {
    //       sr_display_horizontal_align_divs('shot-chart-1','shot-chart-2',false); });
 
   ********************************************************************** */
function sr_display_horizontal_align_divs(div_id_1, div_id_2,times_thru)
{
    console.log("  ### running sr_horizonal_align_divs");
    var div1 = document.getElementById(div_id_1);
    var div2 = document.getElementById(div_id_2);
    
    var left_1 = div1.offsetLeft;
    var left_2 = div2.offsetLeft;
    
    if (left_1 > left_2) {
	var diff = parseInt(left_1-left_2);
	div2.style.marginLeft =  diff+'px';
    }
    else {
	var diff = parseInt(left_2-left_1);
	div1.style.marginLeft =  diff+'px';
    }
    if (!times_thru) {
	sr_display_horizontal_align_divs(div_id_1,div_id_2,true);
    }
}

/* *********************************************************************
   # Usage       :   sr_display_selectorSetClass
   # Purpose     :   adds and removes a class based on the selector sent.
   # Returns     :   nothing
   # Parameters  :   class_to_set, selector_to_give, selector_to_clear
   # Throws      :
   # See Also    :

   # Comments : First we clear the class_to_set from all selector_to_clear
         and then set the class on all 

here is a sample call for this from b-r:/leagues/team_compare.cgi
<select class="no_chosen"
         onchange="sr_display_selectorSetClass('selected',
                                               '#team_output td, #team_output th',
		    	 	               '#team_output td.' + this.value + ', #team_output th.' + this.value)">	
   ********************************************************************** */
function sr_display_selectorSetClass(class_to_set, selector_to_clear, selector_to_give) {
    console.log('###  sr_display_selectorSetClass');
    
    // Clear class_to_set from the selector_to_clear elements
    var els = document.querySelectorAll(selector_to_clear);
    if (els) {
        for (i = 0; i < els.length; i++) {
            vjs_removeClass(els[i], class_to_set);
        }
    }

    // add class_to_set to selector_to_give
    els = document.querySelectorAll(selector_to_give);
    if (els) {
        for (i = 0; i < els.length; i++) {
            vjs_addClass(els[i], class_to_set);
        }
    }
    // track our event
    sr_record_analytics_event('display_selector', sr_record_directory(), sr_record_page());
}


/* *********************************************************************
   # Usage       :    sr_display_showHideElement(element,classToToggle,toggleAction) {
   # Purpose     :   takes an element and toggles the element based on whether it's already togggled and the sense of the button click
   # Returns     :   nothing
   # Parameters  :   , classToToggle,
                      toggleAction (this one is complicated, we have cases where there are multiple togglers
		       acting on a table, this is the case for the milb register.  We can toggle various types of
		       levels (mlb, foreign, winter) and also partial table rows.  If we get a toggleAction (a value
		       which is attached to the toggle button, and stores the state of the toggler,
		       clickhide (display goes to not), clickshow (display goes to on).  The default value is noclick, but
		       anything that sends us here should be clickshow, clickhide or null
   # Throws      :
   # See Also    :
   # Comments     : NOTE: that for this to work we assume that any classToToggle's used on a particular element,
                    CAN NOT be a proper subset of each other.  So using mlb and mlb_other would cause great headaches
		            and can't be used.

   ********************************************************************** */
function sr_display_showHideElement(element,classToToggle,toggleAction) {
    
	var hide = false;
	var show = false;
		
	// store a state on this element for later.
	if (toggleAction === 'clickhide') {
		if (!element.hider) {
			element.hider = classToToggle;
		}
		else if (!element.hider.match(classToToggle)) {
			element.hider = element.hider + classToToggle;
		}
		// the value is already hidden and noted in .hider
		hide = true;
		show = false;
	}
	// store a state on this element for later.
	else if (toggleAction === 'clickshow') {
		if (element.hider && element.hider.match(classToToggle)) {
			element.hider = element.hider.replace(classToToggle,'');
		}
		// the value is not hidden by this class, so we see if anything else is hiding it.
		hide = false;
		show = (!element.hider || element.hider.length === 0);
	}

	// if no toggleAction is given, we then have to discern on our own.
	if ((!toggleAction) && (vjs_hasClass(element, 'hidden') || (element.style.display === 'none')) ) {
		show = true; hide = false;
	}
	else if (!toggleAction) {
		hide = true; show = false;
	}
	 
	if (show) {
		vjs_removeClass(element, 'hidden');
		element.style.display = '';
	}
	else if (hide) {
		vjs_addClass(element, 'hidden');
		element.style.display = '';
	}
}

/* *********************************************************************
   # Usage       :   sr_display_toggleClass
   # Purpose     :   takes an element and toggles all elements with matching class within this element.
   # Returns     :   nothing
   # Parameters  :   element, classToToggle,
                      toggleAction (this one is complicated, we have cases where there are multiple togglers
		       acting on a table, this is the case for the milb register.  We can toggle various types of
		       levels (mlb, foreign, winter) and also partial table rows.  If we get a toggleAction (a value
		       which is attached to the toggle button, and stores the state of the toggler,
		       clickhide (display goes to not), clickshow (display goes to on).  The default value is noclick, but
		       anything that sends us here should be clickshow, clickhide or null
   # Throws      :
   # See Also    :

   # Comments :   NOTE: that for this to work we assume that any classToToggle's used on a particular element,
                      CAN NOT be a proper subset of each other.  So using mlb and mlb_other would cause great headaches
		      and can't be used.

   ********************************************************************** */
function sr_display_toggleClass(elID, classToToggle, toggleNumber, toggleAction ) {


    console.log('   ### running sr_display_toggleClass:' + elID + '   classToToggle:' + classToToggle + '   toggleAction:' + toggleAction);
    if (!toggleNumber) {
        toggleNumber = '';
    }

    // get the element we are working on here
    var el = document.getElementById(elID);
    if (!el || !el.outerHTML.length) return;

    // We use toggleClass here because it is WAY WAY WAY faster than
    // just toggle when toggling a large number of row.  I think this
    // is because there is a reflow after every element is toggled and
    // not when the toggleClass is used.  We also have to change the
    // css here for cases where we are sorting tables with minors
    // included.


    
    var els = el.querySelectorAll('.' + classToToggle);
    vjs_forEach.call(els, function(elSub, i){
	sr_display_showHideElement(elSub,classToToggle,toggleAction);
    });


    // 
    var toggleTooltip = document.getElementById(elID + '_toggle_' + classToToggle);

    // We have changed the class's display style, now change what our link shows.    
    // class not displayed we want the option to show.  class displayed option to hide.
    if (toggleTooltip && toggleTooltip.innerHTML.match('Show')) {
        toggleTooltip.innerHTML = toggleTooltip.innerHTML.replace('Show','Hide');
        toggleTooltip.style.backgroundColor = '#FFF655';
    }
    else if (toggleTooltip) {
        toggleTooltip.innerHTML = toggleTooltip.innerHTML.replace('Hide','Show');
        toggleTooltip.style.backgroundColor = '#FFF655';
    }
}



/* *********************************************************************
   # Usage       :   sr_display_browserPopupWindow()
   # Purpose     :   creates an actual new browser popup window
   # Returns     :   nothing
   # Parameters  :   selectDest is the select box being used
   strBaseUrl any value prepended to the selected result
   form       the form element containing this box
   finalCgiParam  any string to append to the location.
   # Throws      :
   # See Also    :
   # Comments    :   formerly oI, used just in similar scores
   ********************************************************************** */
function sr_display_browserPopupWindow(url, width, height){
    window.name = 'mainWindow';
    window.open(url,'surf','width=' + width + ',height=' + height + ',scrollbars=yes,resizable=yes,noopener,noreferrer');
}



/* *********************************************************************
   # Usage       :   sr_display_flyInSVGsprite()
   # Purpose     :   creates an actual new browser popup window
   # Returns     :   nothing
   # Parameters  :   selectDest is the select box being used
   strBaseUrl any value prepended to the selected result
   form       the form element containing this box
   finalCgiParam  any string to append to the location.
   # Throws      :
   # See Also    :
   # Comments    :   formerly oI, used just in similar scores
   ********************************************************************** */
function sr_display_flyInSVGsprite(){
    console.log('   ### run sr_display_flyInSVGsprite');
    vjs_Ajax('GET',
	     sr_svg_sprite_url,
	     {},
	     function(data) {		    
		 var div = document.createElement("div");
		 div.className = 'hidden';
		 div.innerHTML = data;
		 document.body.insertBefore(div, document.body.childNodes[0]);
		 var __social = document.getElementById('social');
		 if (__social) {
		     // with css removes the labels we show when the loading fails
		     vjs_removeClass(__social,'noload');
		 }			  
	     },  // success
	     function () {    return true; },  // failure
	     true,
	     false
	    );

}

/* *********************************************************************
   # Usage       :   sr_display_fill_search_placeholder
   # Purpose     :   adds a custom message based on the viewport window size
   # Returns     :   nothing
   # Parameters  :   none
   # Throws      :
   # See Also    :
   # Comments    :   
   ********************************************************************** */
function sr_display_fill_search_placeholder () {
    console.log('   ### sr_display_fill_search_placeholder.');
    var text = Modernizr.viewport_width < 359?
	__sr_text_search_placeholder_short:
        Modernizr.viewport_width < 450?
        __sr_text_search_placeholder_medium:
        __sr_text_search_placeholder_long;

    if (sr_detect_operaMini) {
	text = '';
    }
    var search_boxes = document.querySelectorAll('#header .search input[name="hint"]');
    vjs_forEach.call(search_boxes, function(search_box, idx) {
        vjs_setAttr(search_box,'placeholder','');
    });
    var search_boxes = document.querySelectorAll('#header .search input[name="search"]');
    vjs_forEach.call(search_boxes, function(search_box, idx) {
        vjs_setAttr(search_box,'placeholder',text);
    });
}



/* *********************************************************************
   # Usage       :   sr_display_add_random_page_link
   # Purpose     :   adds a bottom of hte page link for devs and testers
   # Returns     :   
   # Parameters  :   
   # Throws      :
   # See Also    :
   # Comments    :   
   ********************************************************************** */
function sr_display_add_random_page_link () {
    console.log("   ### adding a random page link");
    var div = document.createElement('div');
    
    div.id = 'random_page';
    div.innerHTML = '<a href="/admin/get_random_dev.cgi">Go to a random page</a>' +
	"<style> #random_page { \
    display: block; \
    font-size: 11px; \
    bottom: 0; \
    position: fixed; \
    right: 0; \
    border: #ff0; \
    background: #ff0; \
    padding: 10px; \
    color: black; \
    font-weight: bold; \
    width: 200px; }</style>";
    document.body.appendChild(div);    
}
if (Modernizr.cookies && document.cookie.match('dev_warning')) {
    sr_utilities_js_loader.push(sr_display_add_random_page_link);
}


/* *********************************************************************
   # Usage       :   sr_display_setup_endpoint_onclick
   # Purpose     :   enables the endpoint onclicks for things like cumulative stats
   # Returns     :   nothing
   # Parameters  :   table_id
   # Throws      :
   # See Also    :

   # Comments : 
   ********************************************************************** */
function sr_display_setup_endpoint_onclick(id) { 
    var table;
    if (id) { table = document.getElementById(id); }
    else    { return false; }

    if (!table) { return false; }
    
    var tds = table.querySelectorAll('.endpoint');
    
    vjs_forEach.call(tds, function(td, idx) {        
        var endpoint_url = vjs_getAttr(td, 'data-endpoint');
        td.onclick = function(event) {
            sr_display_showPopup(event, td, endpoint_url);            
        };

        // add a tooltip class.
        vjs_addClass(td,'tooltip');
    });
    
    return true;
}

/* *********************************************************************
   # Usage       :   sr_setup_endpoint_onclick
   # Purpose     :   enables the endpoint onclicks for things like cumulate stats
   # Returns     :   nothing
   # Parameters  :   table_id
   # Throws      :
   # See Also    :

   # Comments : 
   ********************************************************************** */
function sr_display_run_endpoint(_this,endpoint) { 
    
}

/* *********************************************************************
   # Usage       :   sr_img_logo_load_check
   # Purpose     :   checks to see if the logo loaded for the page
   # Returns     :   nothing
   # Parameters  :   
   # Throws      :
   # See Also    :

   # Comments : It checks the area = height x width of the loaded img, and if > 1 it
   #            unhides the sportslogos note, etc it destroys that element
   ********************************************************************** */
function sr_img_logo_load_check() { 
    console.log('   ### sr_img_logo_load_check');
    var logo_div_img = document.querySelector('.media-item.logo > img');
    if (!logo_div_img) { return false; }
    console.log(logo_div_img);

    
    var newImg = new Image();
    newImg.onload = function() {
	var height = newImg.height;
	var width = newImg.width;
	var logo_div = document.querySelector('.media-item.logo');
	if (height * width <= 1) {
	    //console.log('   area <= 1');
	}
	else {
	    //console.log('area  > 1');
	    vjs_removeClass(logo_div, 'loader');
	}
    };
    newImg.src = logo_div_img.src; // this must be done AFTER setting onload
}
sr_utilities_js_loader.push(sr_img_logo_load_check);





/* *********************************************************************
   # Usage       :   sr_ads_rails_position
   # Purpose     :   determine the left and right positions for the rails ads
   # Returns     :   nothing
   # Parameters  :   
   # Throws      :
   # See Also    :

   # Comments : 
   ********************************************************************** */
var sr_has_ad_rails = true;
function sr_ads_rails_position() { 
    console.log('   ### sr_ads_rails_position');
    if (Modernizr.viewport_width < 1810  || sr_detect_ie || sr_detect_edge || Modernizr.adfree || document.getElementById('sr_suppress_ads')) {
	sr_ads_kill_rails();
	return false;
    }
    var wrap = document.getElementById('content');
    var wrap_offset = vjs_offset(wrap);
    var gap_width = vjs_viewportGetWidth() - vjs_outerWidth(wrap); 
    
    // return with nothing if the rails aren't to show.
    if (gap_width < 330) {
	sr_ads_kill_rails();
	return false;
    }
    
    // calculate where to position the two elements.
    var spacer = parseInt((gap_width - 320)/4);

    // Make the left one.
    var div_left  = document.getElementById('div-gpt-ad-160x600-1');
    var div_right = document.getElementById('div-gpt-ad-160x600-2');    
    if (!div_left || !div_right) { return false; }

    div_left = div_left.parentNode;
    div_right = div_right.parentNode;
    
    // Add the left and right spacers
    div_left.style.left   = spacer + 'px';
    div_right.style.right = spacer + 'px';
    
    // add an onresize that destroys these ads when resized.
    vjs_addEvent(window, 'resize', sr_ads_kill_rails);
}

function sr_ads_kill_rails() {
    if (sr_has_ad_rails) {
	var div_l  = document.getElementById('div-gpt-ad-160x600-1');
	var div_r = document.getElementById('div-gpt-ad-160x600-2');
	if (div_l && div_r) {
	    vjs_removeChild(div_l.parentNode);
	    vjs_removeChild(div_r.parentNode);
	}
	sr_has_ad_rails = false;
    }
}

sr_utilities_js_loader.push(sr_ads_rails_position);

/* Ad code from andy forwark: to be used above, can be removed when you come by it next.
<!-- Tag ID: SportsReference_160x600_2 -->
<div align="center" id="">
    <script data-cfasync="false" type='text/javascript'>
        freestar.queue.push(function () { googletag.display('SportsReference_160x600_2'); });
    </script>
</div>
*/

/* ### FILE:sr.mod.form.js    */
/* *********************************************************************
   # Usage       :   sr_form_presetFromQueryString()
   # Purpose     :   when a form has a class of deserialize,
   this will update it to match query string
   # Returns     :   nothing
   # Parameters  :   none
   # Throws      :
   # See Also    :
   # Comments : To use, just set a class of deserialize to the form.  This
   will run throgh the parameters in the query string and update the
   form to match those values automatically on doc.ready.

Note that when we deserialize the form there is an issue with unset checkboxes, they have no
value on submit, so this subroutine doesn't know to disable them, we get around this by adding
a class to those checkboxes and a hidden form element 

 <input type="hidden" name="force:pos_is" value="1" data-force=".pos_is" data-value="">  in the form

 and then add class pos_is to the elments to force, in this case checkboxes.
 Once this is done then the rest of the query string will be parsed and the form updated as before.

For tiny.cgi we call the pi forms and then pass them without forwarding to the proper
url.  This causes an issue because the window.location.search does not contain
the long string of parameters.  We add an option where we can embed the string
of parameters in an element #deserialize_string

Then the #deserialize_string data="" attribute has the string.
We check for that first and then pass that string if that is given.

This is applied to the following selectors
form.deserialize,form.pi_forms,form.srbasic

But it can be disabled by setting the class no-deserialize,  this overrides
all of the above selectors.
TODO: Stathead has "no-deserialize" - so this never matters there - and in fact, the whole tinyurl explanation above may be irrelevant

 ********************************************************************** */
function sr_form_presetFromQueryString() {
    console.log('   ### sr_form_presetFromQueryString');

    // see if we want to use one of our embedded strings for pre-setting the form.
    var embedded_query_string = document.getElementById('deserialize_string');
    var params = {};
    if (embedded_query_string) {
        var query_string = vjs_getAttr(embedded_query_string, 'data');
        // preset the string with the leading ? if not there.
        if (!query_string.match(/^\?/)) {
            query_string = '?'+ query_string;
        }
        console.log('   ### sr_form_presetFromQueryString, embedded_string:' + query_string);
        params = sr_form_queryString_to_JSON(query_string);
        sr_form_checkDeserialize(params, false, true, null);

    } else if (window.location.search.length > 7) {
        params = sr_form_queryString_to_JSON(window.location.search);
        sr_form_checkDeserialize(params, false, true, null);
    }

    return true;
}

function sr_form_queryString_to_JSON(queryString) {

    console.log('   ### running sr_form_queryString_to_JSON:' + queryString);
    var urlParams = {};
    var match,
        pl = /\+/g, // Regex for replacing addition symbol with a space
        search = /([^&=]+)=?([^&]*)/g,
        decode = function(s) { return decodeURIComponent(s.replace(pl, " ")); },
        // check to see if we are leading here with a '?'
        query = queryString.charAt(0) == '?' ?
        queryString.substring(1) :
        queryString;

    while (match = search.exec(query)) {
        var param = decode(match[1]);
        var value = decode(match[2]);

        if (param in urlParams) {
            if (typeof urlParams[param] === 'string') {
                var hold = urlParams[param];
                urlParams[param] = [];
                urlParams[param].push(hold);
            }
            urlParams[param].push(value);
        } else {
            urlParams[param] = value;
        }
    }
    return urlParams || {};
}

// params can either be an object in json form or be a string of valid
// json.  runs through the entire page finding forms matching:
// form.deserialize and then setting them to match the query string
// is_initial_load is a boolean telling us if this is the load of the
// page.  the deserialize may work slightly differently in the case
// where one param's value equals another param's name.  location:
// 'pob', pob: 'United_States', is_initial_load true, then location
// === 'pob' if !is_initial_load then location === 'United_States'
//
// to shut this off use form.no-deserialize to the form

function sr_form_checkDeserialize(params, formToSet, is_initial_load, firedPreset) {
    console.log('   ### sr_form_checkDeserialize: is_initial_load:'+ is_initial_load);
    console.log(params);
    console.log(formToSet);
    console.log(firedPreset);
    let forms = [];
    if (formToSet) {
        forms[0] = formToSet;
    } else {
        forms = document.querySelectorAll('form.deserialize,form.pi_forms,form.srbasic');
    }
    vjs_forEach.call(forms, function(form, i) {
		
		if (!firedPreset && (form.classList.contains('no-deserialize') || form.classList.contains('sr_goto'))) {
			return;
		}
		
        params = params || vjs_getAttr(form, 'data-default');
        params = (typeof(params) === 'object') ? params : JSON.parse(params);

        // before deserializing make sure we have params and just skip if we don't.
        if (params) {
            // the true here marks this as an initial load.
            vjs_deserializeForm(form, params, is_initial_load, firedPreset);
        }
    });
}


// *****************************************************************************************************************************
// *****************************************************************************************************************************


/* *********************************************************************
 # Usage       :   sr_setup_presets
 # Purpose     :   sets up onclick handlers for our site and makes elements visible.
 # Returns     :   runs through .sr_preset and adds click-handlers to set  up form presets purely in js.
 # Parameters  :   none
 # Throws      :   
 # See Also    :   
 SR form presets

********************************************************************** */
// passing a div restricts this call.
function sr_setup_presets(div) {
	console.log("   ### running sr_setup_presets");
	var presets;
	if (div) {
		presets = div.querySelectorAll('.sr_preset');
		console.log(presets);
	} else {
		presets = document.querySelectorAll('.sr_preset');
	}


	// all sr_presets now are clicks for "show/hide/toggle" 
	//  - OR - have "data-preset" attached to it - with JSON as the value, which sets form fields to whatever value
	//         very few places are using this, and it's possible it could be eliminated - 
	//             1. gamechanger in BR
	//             2. PFR play-finder

	presets.forEach(preset => {

		// various functions may try to set up presets again -
		//  - primary example of that is when tables are un-commented out, closed/commented again, then re-un-commented
		// so, this checks to see if this particular one is already setup, and skip if so
		if (preset.is_set) { return false; }
		preset.is_set = true;

		// if preset is a button, add type=button, so we don't submit the form inadvertently
		if (preset.tagName === 'BUTTON') {
			preset.setAttribute('type','button');
		}

		preset.addEventListener('click', function() {

			// record an event in Analytics
			if (preset.innerHTML.match('[A-z]')) {
				sr_record_analytics_event('preset', sr_record_directory(), sr_record_page() + ':' + preset.innerHTML);
			}

			// run through the hiding and showing of elements.
			// note that HIDE has to happen first as we can hide
			// a group of things and then show the one we want.
			["hide", "show", "toggle"].forEach(function(option) {
				// See if we have a data-option attribute.
				if (preset.dataset[option]) {
					sr_form_runShowHidePreset(option, preset.dataset[option]);
				}
			});

			// form presets -- i.e. buttons that when clicked, set a value on some form field
			// this takes the form of a JSON expression, so you can set values for multiple selectors at once (though you could also use it for a single selector)
			// i.e. data-preset="{ 'year_min': 2010, 'year_max': 2020 }"
			if (preset.dataset.preset) {
				sr_form_runPreset(preset);
			}

		});

	});

}

/* *********************************************************************
 # Usage       :   sr_form_runShowHidePreset
 # Purpose     :   changes the display of the entry
 # Returns     :   nothing
 # Parameters  :  option (hide|show|toggle)
                  a selector string (comma-delimited if needed for multiple)a
 ********************************************************************** */
function sr_form_runShowHidePreset(option, selector_text) {
	// we allow multiple selectors, so cycle through each.
	let selectors = selector_text.split(',');
	selectors.forEach((selector) => {
		// then for each element of this selector,
		// we set the proper display value.
		const els = document.querySelectorAll(selector);
		els.forEach((el) => {
			if(el.classList.contains('toggleable')) {
				if      (option === 'toggle') { el.classList.toggle('open'); }
				else if (option === 'show')   { el.classList.add('open'); }
				else if (option == 'hide')    { el.classList.remove('open'); }
				if(el.classList.contains('open')) { sr_chosen_enable_select(el) }
			}
			else {
				if      (option === 'toggle') { el.classList.toggle('hidden'); }
				else if (option === 'show')   { el.classList.remove('hidden'); }
				else if (option == 'hide')    { el.classList.add('hidden'); }
			}
		});
	});
}

/* *********************************************************************
 # Usage       :   sr_form_runPreset
 # Purpose     :   sets up onclick handlers for our site and makes elements visible.
 # Returns     :   runs through .sr_preset and adds click-handlers to set up form presets purely in js.
 # Parameters  :   clicked_el: node that is firing the preset
 # Throws      :   
 # See Also    :   
 ********************************************************************** */
function sr_form_runPreset(clicked_el) {
	sr_preset_block_update = true;

	let params = vjs_getAttr(clicked_el, 'data-preset');
	params = params.replace(/'/g, '"');
	console.log("   ### running sr_form_runPreset:" + params);
	//console.log(params);    
	if (params.lastIndexOf('=') > 0) {
		// This is a query string
		params = sr_form_queryString_to_JSON(params);
	} else if (params.lastIndexOf(':') > 0) {
		// This is JSON
		params = JSON.parse(params);
	}
	if (!params) {
		return false;
	}
	let formObj = clicked_el.closest('form');

	console.log(params);
	console.log(clicked_el);
	console.log(formObj);

	// cycle through 'params' - if that field being changed is a radio - then trigger a click event on the individual selection, and a change event overall
	for (const [fieldname, v] of Object.entries(params)) {
		let form_el = document.querySelector('.fieldset.'+fieldname+' input[value="'+v+'"]');
		if(form_el && form_el.type==='radio') {
			form_el.dispatchEvent(new Event('click'));
			form_el.dispatchEvent(new Event('change'));
		}
	}

	sr_form_checkDeserialize(params, formObj, false, clicked_el);
	sr_form_changeDesc(formObj, 'runpreset');

	sr_preset_block_update = false;
	return true;
}




// *****************************************************************************************************************************
// *****************************************************************************************************************************

var sr_form_params_old;  // this holds a query string
var sr_preset_block_update = false; // boolean to prevent function from running while it's already in progress - not sure why that's a problem though

/* *********************************************************************
 # Usage       :   sr_form_populateDesc
 # Purpose     :   updates the text of our description via ajax.
 # Returns     :   nothing, but updates #form_id_desc
 # Parameters  :   none
 # Throws      :   
 # See Also    :   we're breaking this into words, then re-assembling,
 #                 so that differences can be tracked
 #                 for purposes of fading in
 ********************************************************************** */
function sr_form_populateDesc(form, word_array, desc_content_box) {
    console.log('   ### enter sr_form_populateDesc');

    if (!form) {
        return false;
    }

    let array_render    = [];  // this will be joined into a string, and may hold some "fade_in" spans
    let array_new_words = [];  // this just holds the word phrases in a string, without the "fade_in" stuff

    // run through each word and see if it's new and wrap in a fade if need be
    let sr_form_old_desc = form.data_old_desc;
    if (!word_array || !sr_form_old_desc) {
        return false;
    }
    word_array.forEach(function(word, index) {
        word = word.trim();

		// allow a <br> to go through
        word = word.replace(/</g, '&lt;');
        word = word.replace(/&lt;br/g, '<br');
		
        // if using a saved_query we are passed a value with link: url.
        // we want to capture the url and turn it into a link in the desc
        let link = word.match(/link: .*/);
        if (link && link[0]) {
            word = word.replace(/link:.*/, '');
            let link_val = link[0].replace('link: ', '');
            if (link_val) {
                word = '<a target="_blank" href="' + link_val + '">' + word + '</a>';
            }
        }

        if (sr_form_old_desc.indexOf(word) < 0) {
            array_render.push('<span class="fade_in">' + word + '</span>');
        } else {
            array_render.push(word);
        }
        array_new_words.push(word);
    });

    // join 'array_render' into a string and set the innerHTML
    desc_content_box.innerHTML = array_render.join(", ");
    // the form description grays out while we are trying to update it, so this sets it back
    desc_content_box.style.color = 'initial';

	// set this value to the array of new word phrases - so it can be used on the next iteration
    form.data_old_desc = array_new_words;

	// remove the blocking, so other operations can update the description text again
	sr_preset_block_update = false;

    // after updating the form, check if it needs it again.
	// TODO: I don't understand the need for this part
    let params = vjs_serializeForm(form) + '&describe_only=1';
    if (sr_form_params_old != params) {
        sr_form_changeDesc_caller(form, 'tweaker');
    }

    return true;
}


/* *********************************************************************
 # Usage       :   sr_form_changeDesc_caller
 #    this pause is to block against people using a keyboard 
 #            to go through select options, 
 #            and triggering a bunch of changes in rapid succession
 ********************************************************************** */
function sr_form_changeDesc_caller(form, caller) {
	if(sr_preset_block_update) {
		return;
	}
	sr_preset_block_update = true;
    setTimeout(function() { // After a period of time
        sr_form_changeDesc(form, caller);
    }, 333);
}

/* *********************************************************************
 # Usage       :   sr_form_changeDesc
 # Purpose     :   updates the text of our description via ajax.
 # Returns     :   nothing, but updates #form_id_desc
 # Throws      :   
 # See Also    :   this is called after running a preset, which isn't often now, since it's been 
 #                 largely superseded by new JS stuff ... and this function is called from there as well
 #  run_preset calls this directly - without using the 'caller' above
 #    things that call the 'caller' version - are the setup function - and the tweaker that's run after the description is changed (which I'm not sure why is necessary either)
 ********************************************************************** */
function sr_form_changeDesc(form, caller) {
    console.log('   ### enter sr_form_changeDesc:' + caller);

    let desc_content_box = document.getElementById('form_description');
    if (!desc_content_box) {
        return;
    }
    // cause the form description to gray out while we are trying to update it.
    desc_content_box.style.color = '#999';

    let url = form.action;
    let params = vjs_serializeForm(form) + '&describe_only=1';
    sr_form_params_old = params;

	fetch(url + '?' + params, {
			method: 'GET',
			headers: {
				'Accept': 'application/json',
			}
	})
		.then((response) => response.json())		
		.then((data) => sr_form_populateDesc(form, data, desc_content_box))
		.catch(() => {
			// appendTo.innerHTML = '<p class="oops">Something went wrong.</p>';
		});
}



// *****************************************************************************************************************************
// *****************************************************************************************************************************


/* *********************************************************************
 # Usage       :   sr_form_setupFormScrub
 # Purpose     :   disables empty params to shorten the get requests
 # Returns     :   nothing, but updates the form.
 # Parameters  :   form element
 # Throws      :   
 # See Also    :   http://stackoverflow.com/a/2418039/425494
 # Comments    :   you can disable this by adding form.sr_do_not_scrub
                   or for any form with attr onsubmit
 ********************************************************************** */
function sr_form_setupFormScrub() {
	console.log("   ### sr_form_setupFormScrub");
	const forms = document.querySelectorAll('form:not([itemprop])');
	forms.forEach((form) => {
		if (form.classList.contains('sr_do_not_scrub') || form.getAttribute('onsubmit')) {
			return false;
		}
		form.addEventListener('submit', sr_form_scrubEmptyParams);
		return true;
	});
}


/* *********************************************************************
 # Usage       :   sr_form_scrubEmptyParams
 ********************************************************************** */
function sr_form_scrubEmptyParams(e) { 
    console.log("   ### sr_form_scrubEmptyParams");
	let form = e.target;

	// ideally, each form element would be wrapped in a fieldset class and 'data' attributes for default and type
	// then, we wouldn't need to worry about subfield sets that have a 'fieldset' wrapper, beacuse that wrapper wouldn't have type/defaults and could be ignored
	// however, we didn't set the HTML up that way, and would be a lot of work to change that now
	// so ... instead, for fieldsets with subfields, we'll look for data-defaults (note the plural) which pertains to each of the children elements
	//    and then from there - querySelector for form elements and figure out the type from the html

	// - skip fieldsets that are .template (which should be hidden in the DOM anyway)
	// - skip fieldsets that are hidden in the DOM (do not skip type='hidden' though)
	// - skip the dropdowns in the criteria section that handle showing the widgets
	//	    these will be skipped automatically because a) they're not in a fieldset anyway, and b) also because they don't have 'name' attributes in the first place
	// - skip some useless fields - hardcoded in below
	// - fieldsets that are stat criteria, we can figure out by whether their class contains 'criteria' in it - and make certain assumptions about their defaults
	
	const fieldsets = form.querySelectorAll('.fieldset:not(.endpoint .fieldset'); // not inside 'endpoint' just prevents double grabbing in player_comp stuff
	
	fieldsets.forEach((fs) => {

		let defaults = get_defaults(form, fs);

		// get the hidden state of this fieldset
		let fs_hidden = isHidden(fs);

		const formfields = fs.querySelectorAll('.formfield');

		formfields.forEach((ff) => {
			
			let ff_hidden = isHidden(ff);
			let hidden = (ff_hidden || fs_hidden);

			if(!hidden && ff.classList.contains('radio')) {
				// what is the name of the field we're dealing with
				let name = ff.querySelector('input').name;
				let val  = ff.querySelector('input[name="'+name+'"]:checked').value;
				if((typeof defaults[name]!=='undefined' && val === defaults[name]) || (typeof defaults[name]==='undefined' && val === '')) {
					let check_options = ff.querySelectorAll('input');
					check_options.forEach(ch => ch.disabled = true);
				}
			}
			
			else if (!hidden && ff.classList.contains('check')) {
				// now let's forget checkbox groups where all are selected
				// In Stathead, the scripts all treat "none selected" and "all selected" the same way - they ignore it
				//    So no need to put it in the querystring

				// get the checkboxes
				let cbs = ff.querySelectorAll('input');
				// count the checkboxes
				let cbs_tot = cbs.length;
				// count the checked checkboxes
				let cbs_checked = ff.querySelectorAll('input:checked').length;
				// if they're all checked - disable all of them
				if(cbs_tot === cbs_checked) {
					cbs.forEach((i) => i.disabled = true);
				}
			}

			else if (!hidden && ff.classList.contains('boolean')) {
				return; // singular checkbox so doesn't matter - if unchecked, it's not going to go through anyway
			}
			
			else {
				// in the case of 'pair' for example, there may be more than one input - so make sure you check them all
				check_inputs_for_scrubbing(ff,defaults,hidden);
			}
			
		});
		
		
		// criteria does not have formfield class wrappers
		//   so they need their own thing
		if(!formfields.length) {
			check_inputs_for_scrubbing(fs,defaults,fs_hidden);
		}

		
	});
	
}

/* *********************************************************************
 # Usage       :   check_inputs_for_scrubbing
 ********************************************************************** */
function check_inputs_for_scrubbing(wrapper,defaults,fs_hidden) {
	const inputs = wrapper.querySelectorAll('input, select, textarea');

	inputs.forEach((el) => {
		// parent fieldset has a class of template ... everything inside it is not needed
		//if (fs.classList.contains('template') {
		//	el.disabled = true;
		//}
		
		// parent fieldset is hidden - which includes 'template' - so above block would be redundant
		//  if hidden - everything inside it is not needed
		// (this doesn't include actual hidden input type fields)
		// Stathead is OK skipping hidden fields in the query string, because the Stathead code just reads that in as the param value anyway
		//if (fs_hidden && el.type!=='hidden') {
		if (fs_hidden && (el.type!=='hidden' || (el.closest('.pi_forms.sh3') && el.closest('.fieldset.hidden')))) {
			el.disabled = true;
		}

		// useless params
		else if (el.name.match(/player_id([0-9]?)_select/) || el.name.match(/player_id([0-9]?)_hint/) || el.name.match(/ac_team_id([0-9]?)_hint/) || el.name.match(/ac_team_id([0-9]?)_hint/) || el.name == 'idx') {
			el.disabled = true;
		}

		// empty params
		else if (el.value==='') {
			el.disabled = true;
//		if (select_name.match(/ccomp\[[0-9]\]/)) {
//			let entry = inputs[i].selectedIndex;
//			inputs[i].disabled = (entry===-1 || inputs[i].options[entry].value == '' ? true : false);

		}
		
		else if (defaults[el.name] && defaults[el.name]==el.value) {
			el.disabled = true;
		}
		
	});
}

/* *********************************************************************
 # Usage       :   isHidden
 ********************************************************************** */
function isHidden(el) {
	let hidden = false;
	let style = window.getComputedStyle(el);
	if(style.display === 'none' || style.visibility === 'hidden' || el.clientHeight === 0) {  // first two won't catch when the parent display=none
		hidden = true;
	}
	return hidden;
}


// *****************************************************************************************************************************
// *****************************************************************************************************************************


/* *********************************************************************
 # Usage       :   sr_form_setupForms
 # Purpose     :   puts all of the things we do for forms in one place
 # Returns     :   nothing
 #  this is called from sr.jsFire.js on any page load
 ********************************************************************** */
function sr_form_setupForms() {

	// sets up, and executes, form event handlers the new way, in Stathead 
	//  -- if we're not in stathead, this will just get returned without doing anything
	let F = new FormEvents();

	// setup the preset tooltips -- this is not really a form thing anymore, since that's handled above. 
	// This only now handles show/hide/toggle dataset stuff attached to elements with 'sr_preset' class, which could be anywhere
	sr_setup_presets();
	log_performance && sr_perf_logPerformance('sr_setup_presets');

	// if our page with a GET request has a form, preset the form to match those values
	//	-- this is skipped in Stathead by setting the no-deserialize class in Form_Stathead
	sr_form_presetFromQueryString();
	log_performance && sr_perf_logPerformance('deserialize');
	sr_form_initial_setup = false;

    // don't submit empty params
    sr_form_setupFormScrub();

    // use <select class="chosen_select"> to implement
    sr_chosen_enable_select();
    log_performance && sr_perf_logPerformance('enableChosenSeLect');
}



// *****************************************************************************************************************************
// *****************************************************************************************************************************



/* *********************************************************************
   # Usage       :   sr_form_setup_goto_page()
   # Purpose     :   forwards us from a select box to a new page automatically
   # Returns     :   nothing
   # Parameters  :   looks for all forms with class goto, can pass just one as well
   #                   which is needed if we are flying in a form via ajax
   # See Also    :   Templates/Partials/Forms/Goto.tt2
   # Comments    :   the values in the select box are the links we forward the user to
   #                 we have a couple options here. If there are multiple selects
   #   the form as .sr_goto.concat and we concat the select values into a url
   #   when the button is pushed.
   #   if not it is class  sr_goto.single and we just fwd on a select onchonge.
   #   there is also a way to use an embedded json file to update a select
   #   based on the value of another select.
   # on fbref we have some forms that we fly in the data via json since it's so big
   ## in that case we add an ajax to the sr_goto.

   ********************************************************************** */
function sr_form_setup_goto_page(goto) {
    let gotos;
    // allow us to send a single form if needed
    if (goto) {
        gotos = [goto];
    } else {
        gotos = document.querySelectorAll('form.sr_goto:not(.ajax)');
    }
    // Get the index selected.
    vjs_forEach.call(gotos, function(gotoForm, i) {


        // make sure we only run through this one-time per form.
        if (gotoForm.is_setup) { return; }
        gotoForm.is_setup = true;

        // set up the sr_form_json controls
        sr_form_setup_goto_json(gotoForm);

        if (vjs_hasClass(gotoForm, 'concat')) {

            var go_button = gotoForm.querySelector('input[type="submit"]');
            /////////////////////////////////////////////////////////////////
            // in this case we paste the select options together and forward the user there.
            /////////////////////////////////////////////////////////////////
            go_button.onclick = function(evt) {
                evt.preventDefault();
                var i = 1;
                var url = '';
                var el;
                var disabled_used = false;

                el = gotoForm.querySelector('select[name="' + i + '"]');
                if (!el) { el = gotoForm.querySelector('input[name="' + i + '"]:checked'); }
                if (!el) { el = gotoForm.querySelector('input[name="' + i + '"]'); }
                while (el) {
                    // check to see if the selected element is disabled. If so we
                    // barf and don't want to forward them on.
                    if (el && (el.selectedIndex != null) && el.options[el.selectedIndex].disabled) {
                        disabled_used = true;
                    }

                    // concat to our url.
                    url = url + el.value;

                    // move onto the next element if there is one.
                    i++;
                    el = gotoForm.querySelector('select[name="' + i + '"]');
                    if (!el) { el = gotoForm.querySelector('input[name="' + i + '"]:checked'); }
                    if (!el) { el = gotoForm.querySelector('input[name="' + i + '"]'); }
                }
                // check to see that they selected an option
                if (disabled_used) {
                    sr_form_append_warning(gotoForm);
                } else {
                    sr_record_analytics_event('goto', sr_record_directory(), sr_record_nearest_parent_id(gotoForm));
                    location = url;
                }
            };
        } else {
            /////////////////////////////////////////////////////////////////
            // do we have a select for the form that is a nav type select.
            /////////////////////////////////////////////////////////////////
            var select = gotoForm.querySelector('select');
            if (select) {
                select.onchange = function(evt) {
                    evt.preventDefault();

                    // Get the index selected.
                    var index = this.selectedIndex;

                    // get the value from the selected index
                    if (this.options[index].value !== "0") {
                        sr_record_analytics_event('goto', sr_record_directory(), sr_record_nearest_parent_id(gotoForm));
                        var url = this.options[index].value;
                        if (url) {
                            location = url;
                        } else {
                            sr_form_append_warning(gotoForm);
                        }
                    }
                };
                // remove the button
                vjs_removeChild(gotoForm.querySelector('input[type="submit"]'));
            }
        }
        vjs_removeClass(gotoForm, 'js-select');
    });
}

/* *********************************************************************
   # Usage       :   sr_form_append_warning()
   # Purpose     :   shows the user they need to make a selection
   # Returns     :   nothing
   # Parameters  :   a form element gotoFrom
   # See Also    :    Templates/Partials/Forms/Goto.tt2, sr_form_setup_goto_page
   # Comments    :   add a warning to the form that they need to select something
   ********************************************************************** */
function sr_form_append_warning(gotoForm) {

	let alert_div;

    if(document.getElementById('sr_alert_div')) {
		alert_div = document.getElementById('sr_alert_div');
		alert_div.innerHTML = '';
	}
	else {
		alert_div = document.createElement('div');
		alert_div.id = 'sr_alert_div';
	}

	alert_div.innerHTML = __sr_text_please_select_an_option_for_each;
	alert_div.classList.add('fieldset');
	alert_div.classList.add('fade_in');
	alert_div.style.color = '#900';
	alert_div.style.fontWeight = 'bold';

	gotoForm.appendChild(alert_div);
}

/* *********************************************************************
   # Usage       :   sr_form_setup_goto_json()
   # Purpose     :   allows us to create an auto-feed table that updates another select dynamically
   # Returns     :   nothing
   # Parameters  :    looks for all select.sr_load_json and attaches an onchange for those
   # See Also    :    Templates/Partials/Forms/Goto.tt2
   # Comments    :   requires a variable sr_goto_json to be set up.
   #                 to allow for multiple sr_load_json's on a page use
   #                  var sr_goto_json = (typeof sr_goto_json === 'undefined')?{}:sr_goto_json;
   #                  sr_goto_json["regular_or_playoffs_json"] = { ..... };
   ********************************************************************** */
function sr_form_setup_goto_json(gotoForm) {
    console.log('   ### sr_form_setup_goto_json.');


    /////////////////////////////////////////////////////////////////
    // do we have a select for the form that is a nav type select.
    // this requires a json of sr_goto_json and a key matching
    // the key in data-json.
    /////////////////////////////////////////////////////////////////
    var select_jsons = gotoForm.querySelectorAll('select.sr_load_json');
    vjs_forEach.call(select_jsons, function(select_json, idx) {

        var target = document.querySelector(vjs_getAttr(select_json, 'data-fill'));
        var json_key = vjs_getAttr(select_json, 'data-json-key');
        if (!target || !json_key) { return; }

        // now we need to set up the onchange.
        select_json.onchange = function(evt) {
            if (evt) {
                evt.preventDefault();
            }
            // Get the index selected.
            var index = this.selectedIndex;
            // get the value from the selected index
            var select_key = this.options[index].value;
            var list = sr_goto_json[json_key][select_key];
            if (list) {
                var html = '';
                vjs_forEach.call(list, function(option, idx) {
                    var disabled_option = '';
                    for (name in option) {
                        if ((idx === 0) && (name === "")) {
                            disabled_option = 'disabled selected ';
                        }
                        html = html + '<option ' + disabled_option + 'value="' + name + '">' + option[name] + "</option>\n";
                    }
                });
                target.innerHTML = html;

                // see if we have chosen on this element to set up on the target.
                if (chosen_events) {
                    chosen_events.fire(target, "chosen:updated");
                }
            }
        };

        // when we set this up, fire this to stock the other item.
        select_json.onchange();
    });

}


/* *********************************************************************
   # Usage       :   sr_form_cpi_convert
   # Purpose     :   enables the cpi conversion for currency data
   # Returns     :   nothing, alters the table in place.
   # Parameters  :   year to convert to,
                     (optional) the id of a wrapping element in case of multiple tables
		     else it just looks for anything with class sr_cpi as a wrapping element.
   # Throws      :
   # See Also    :

   # Comments :


 The table has class sr_cpi and the cells to convert have   <table class="sr_cpi">  
   #            data-year and data-amount set.
   #            The total entry has data-amount="total"

   # How to use: add sr_form_cpi_init to the doc.ready call in site.js,
     this shows cpi_control which is hidden by default.

   # In the page you need to add the following parameters to the table
   #  cells with the data to convert.  data-amount="NNNNNN.NN"
   #  data-year="YYYY|total" and optionally data-future="1" for future
   #  payments, since we don't have cpi numbers into the future. This
   #  also prevents these from being used in the total amount.

   # data-year="total" cell will be replaced by the sum of all of the
     non-future entries previous seen.

   # an example of the widget form for the page.  actual returns you
     to the values in data-amount for each entry.  Here wrap_elem_id = all_salaries_other.
     If there are multiple tables on a page you may also need to change cpi_year to cpi_year_1, etc.

<span class="sr_cpi_control"><form class="inline">
<select name="cpi_year" onchange="sr_form_cpi_convert(document.querySelector('.sr_cpi_control select').value,'all_salaries_other')" size=1>
<option selected disabled>Convert to YYYY $$'s
<option value="actual">Back to Actual
<option value=1871>1871
<option value=1880>1880
.....
 <option value=1990>1990
<option value=2000>2000
<option value=2010>2010
<option value=2012>2012
</select></form></span>

after the table you can add something like.

<span class="sr_cpi_control"><br>Salaries converted to alternate years using Consumer Price Index (CPI) data courtesy of the <a href="http://www.minneapolisfed.org/community_education/teacher/calc/hist1800.cfm">Minneapolis Federal Reserve Board</a>.</span>


 todo: need to test this.
************************************************************************ */
function sr_form_cpi_init() {
	console.log('   ### enter sr_form_cpi_init');
	// show the cpi controls
	const el = document.querySelector('.sr_cpi_control');

	if (!el) {
		return false;
	}

	// display the control.
	el.style.display = 'inline';

	let control = el.querySelector('select');

	// set an onchange for this element.
	control.addEventListener('change', function(event) {
		sr_form_cpi_convert(control.value);
		vjs_stopPropagation(event);
	});
    return true;
}

function sr_form_cpi_convert(year_convert_to) {

	let total_amount = 0;

	let el_cpi = document.querySelector('.sr_cpi_control');
	if (!el_cpi) { return false; }
	let el_wrap = el_cpi.closest('.table_wrapper');
	if (!el_wrap) { return false; }

	// iterate through the rows of financial data.
	let els = el_wrap.querySelectorAll('[data-amount]'); 

	els.forEach(el => {
		if (el.dataset.amount == 'total') {
			el.innerHTML = sr_utilities_number_with_commas(total_amount, true);
		} else {
			// get the data in the row.
			let data_year   = el.dataset.year;
			let data_amount = el.dataset.amount;

			// set the new amount.
			let new_amount = Math.round(data_amount);
			if (year_convert_to != 'actual') {
				new_amount = Math.round(sr_year_cpi[year_convert_to] / sr_year_cpi[data_year] * data_amount);
			}

			// Add in the amount if not a future amount.
			if (!el.dataset.future) {
				total_amount += new_amount;
			}
			el.innerHTML = sr_utilities_number_with_commas(new_amount, true);
		}
	});
	// track our event
	sr_record_analytics_event('cpi_calculator', sr_record_directory(), sr_record_page());
}



// combination of old numbers at
// Found at https://www.minneapolisfed.org/community/teaching-aids/cpi-calculator-information/consumer-price-index-1800
// and https://fred.stlouisfed.org/series/SUUR0000SA0
// Jan 2018 = 140.239 vs 752.9 = 5.368  = multiplier of STL Fed numbers in second link.
const sr_year_cpi = {
    "1871": 36,
    "1872": 36,
    "1873": 36,
    "1874": 34,
    "1875": 33,
    "1876": 32,
    "1877": 32,
    "1878": 29,
    "1879": 28,
    "1880": 29,
    "1881": 29,
    "1882": 29,
    "1883": 28,
    "1884": 27,
    "1885": 27,
    "1886": 27,
    "1887": 27,
    "1888": 27,
    "1889": 27,
    "1890": 27,
    "1891": 27,
    "1892": 27,
    "1893": 27,
    "1894": 26,
    "1895": 25,
    "1896": 25,
    "1897": 25,
    "1898": 25,
    "1899": 25,
    "1900": 25,
    "1901": 25,
    "1902": 26,
    "1903": 27,
    "1904": 27,
    "1905": 27,
    "1906": 27,
    "1907": 28,
    "1908": 27,
    "1909": 27,
    "1910": 28,
    "1911": 28,
    "1912": 29,
    "1913": 29.7,
    "1914": 30.1,
    "1915": 30.4,
    "1916": 32.7,
    "1917": 38.5,
    "1918": 45.2,
    "1919": 52.1,
    "1920": 60.2,
    "1921": 53.6,
    "1922": 50.3,
    "1923": 51.2,
    "1924": 51.5,
    "1925": 52.7,
    "1926": 53.2,
    "1927": 52.2,
    "1928": 51.6,
    "1929": 51.6,
    "1930": 50.2,
    "1931": 45.7,
    "1932": 41,
    "1933": 38.9,
    "1934": 40.2,
    "1935": 41.2,
    "1936": 41.7,
    "1937": 43.2,
    "1938": 42.3,
    "1939": 41.8,
    "1940": 42.1,
    "1941": 44.2,
    "1942": 49.1,
    "1943": 52,
    "1944": 52.9,
    "1945": 54.1,
    "1946": 58.6,
    "1947": 67.1,
    "1948": 72.2,
    "1949": 71.5,
    "1950": 72.3,
    "1951": 78,
    "1952": 79.8,
    "1953": 80.4,
    "1954": 80.7,
    "1955": 80.5,
    "1956": 81.7,
    "1957": 84.4,
    "1958": 86.7,
    "1959": 87.6,
    "1960": 88.9,
    "1961": 89.8,
    "1962": 90.9,
    "1963": 92,
    "1964": 93.2,
    "1965": 94.7,
    "1966": 97.5,
    "1967": 100.2,
    "1968": 104.5,
    "1969": 110.2,
    "1970": 116.7,
    "1971": 121.7,
    "1972": 125.7,
    "1973": 133.4,
    "1974": 148.2,
    "1975": 161.7,
    "1976": 171,
    "1977": 182.1,
    "1978": 196,
    "1979": 218.1,
    "1980": 247.6,
    "1981": 273.2,
    "1982": 290,
    "1983": 299.3,
    "1984": 312.2,
    "1985": 323.2,
    "1986": 329.4,
    "1987": 341.4,
    "1988": 355.4,
    "1989": 372.5,
    "1990": 392.6,
    "1991": 409.3,
    "1992": 421.7,
    "1993": 434.1,
    "1994": 445.4,
    "1995": 457.9,
    "1996": 471.3,
    "1997": 482.4,
    "1998": 489.8,
    "1999": 500.6,
    "2000": 517.5,
    "2001": 532.1,
    "2002": 540.5,
    "2003": 552.8,
    "2004": 567.6,
    "2005": 586.9,
    "2006": 605.8,
    "2007": 623.1,
    "2008": 647,
    "2009": 644.7,
    "2010": 655.3,
    "2011": 676,
    "2012": 689.9,
    "2013": 700,
    "2014": 711.4,
    "2015": 712.3,
    "2016": 721.2,
    "2017": 736.6,
    "2018": 752.9,
    "2019": 762.3,
    "2020": 779.4,
    "2021": 779.4,
    "2022": 779.4,
    "2023": 779.4,
    "2024": 779.4,
    "2025": 779.4,
    "2026": 779.4,
    "2027": 779.4
};

/* ### FILE:sr.mod.menus.js    */
/* *********************************************************************
 Notes on menus:

 The site has a set of menus called drop menus.  These are vanilla js,
 but are based on the superfish method.  We use these instead of
 :hover menus because they allow for imprecise mouse movement.  They
 have a delay set, so if you leave the element and then come back into
 it the menu won't disappear on you.  I've decided that the ux payoff
 is sufficient to make us want to do things in this way.  

 the way this works is that it looks for any element with class .hasmore

 If you have a .hasmore, we add a listener that then looks for
 onmouseover and then adds a .drophover class on the element when we
 are hovering and removes it (after a delay onmouseout).  Note that we
 have contingencies, so you don't get two mouseovers showing at once.
 Generally this is set up as.

 <ul>
   <li class="hasmore"><a href="">Visible element</a>
                       <div>element to show on hover</div> </li>
   <li class="hasmore"><a href="">Visible element</a>
                       <div>element to show on hover</div> </li>
   <li class="hasmore"><a href="">Visible element</a>
                       <div>element to show on hover</div> </li>
   <li class="hasmore"><a href="">Visible element</a>
                       <div>element to show on hover</div> </li>
</ul>   


  One other thing that we want to do here is turn off :hover styles on
 <ul>'s that use this method because the hover is jumpy while drophover isn't, so if we see a

 <ul class="smooth_hover"> we disable the :hover's on those elements
  and add listeners to those scripts too, but delete their children
  divs.

  for 
 
 Sean Forman, Jan. 28, 2016
 ********************************************************************* */

/* *********************************************************************
   # Usage       :   sr_menus_setupMenu
   # Purpose     :   build all of the menu items on the pages.
   # Returns     :   nothing
   # Parameters  :   none
   # Throws      :
   # See Also    :

   # Comments :
      1. meta area of the page
      2. overall site nav  #main_nav
      3. #inner_nav for the page-related nav.
      4. inpage nav related to the inner nav
      5. bottom of page ancillary navigation
   ********************************************************************** */
function sr_menus_setupMenus() {
    console.log('   ### running sr_menus_setupMenus');

    // get #nav element, this contains elements for both mobile and
    // desktop we only need to set up one or the other based on size
    // of the screen and whether it is touch or not.
    if (Modernizr.site_menu === 'button') {
        // set up the main_nav button for mobile.
        sr_menus_setupMainNav_button();
    } else {
        // set up the main_nav dropdowns for the site.
        if (Modernizr.sessionstorage) {
            sr_menus_setupMainNav_navbar();
        }
    }

    // set up the inpage navigation with additional
    sr_menus_setup_inpageNavMenu();
    log_performance && sr_perf_logPerformance('setupInpageNavMenu:full');

    // handle the menus for the header and inner nav and other drop downs.
    // note this also gets called for individual tables.
    var els = document.querySelectorAll('.hasmore,.hoversmooth>li');
    vjs_forEach.call(els, function(el, i) {
        sr_menus_setupDropMenu(el);
    });
    log_performance && sr_perf_logPerformance('setupDropMenus:full');

    // Set this up to track use of the inner_nav. This sets a
    // analytics event that tells you what the containers class is, so
    // we can see if the team links get used at all here as they have
    // groupstuff class on them.
    if (1) {
        var inner_nav = document.getElementById('inner_nav');
        if (inner_nav) {
        // get all of the links in the inner nav.
            var el_a = document.querySelectorAll('#inner_nav>ul>li a');        
            vjs_forEach.call(el_a, function(a, i) {
                // we first get the nearest li and then see if there
                // is another with hasmore. This way we get more info
                // about the container as we have nested li's in the
                // inner_nav div.
                var container_li = vjs_closest(a,'li');
                container_li = vjs_closest(a,'li.hasmore') || container_li;

                if (container_li) {
                    a.addEventListener('click', function (event) {
                        sr_record_analytics_event('inner-nav-click' + (Modernizr.phone?':phone':':not-phone'), container_li.className, sr_record_directory());
                    });
                }
            });
       }
    }
    
    // set up the inpage_nav from the sections listed on the page.
    //sr_menus_setup_bottomPageNavMenu();
    //log_performance && sr_perf_logPerformance('setupBottomPageNavMenu:full');
}


/* *********************************************************************
   # Usage       :   sr_menus_add_games_counter
   # Purpose     :   adds the counter for games to the front page.
   # Returns     :   nothing
   # Parameters  :   none
   # Throws      :
   # See Also    :   <span class="counter hidden">12</span>
   # Comments :     
   ********************************************************************** */
function sr_menus_add_games_counter() {
    var games = document.querySelectorAll('#header_scores .game_summary');
    var span = document.createElement('span');
    span.className = 'counter';
    var overrideNumGames;
    if(document.getElementById('override_counter')){
        overrideNumGames = document.getElementById('override_counter').getAttribute('data-counter-value');
    }
    span.innerHTML = (overrideNumGames ? overrideNumGames : games.length);
    var ahref = document.querySelector('#header_scores > a');
    ahref.appendChild(span);
}

/* *********************************************************************
   # Usage       :   sr_menus_setupMainNav_button
   # Purpose     :   converts the Menu link/button into a dropdown
   # Returns     :   nothing
   # Parameters  :   none
   # Throws      :
   # See Also    :

   # Comments :     we progressively add this option in in-case the js
                         load fails and then it's just a link to the
                           site bottom

 This function is inlined in the code, so that our js load doesn't
 make this button not work as fast as needed, in Templates/Generate/HeaderSiteNav.tt2
   ********************************************************************** */
function sr_menus_setupMainNav_button() {
    console.log('   ### running sr_menus_setupMainNav_button');

    if (sr_detect_operaMini) {
        return false;
    }
    var nav_trigger = document.getElementById('nav_trigger');

    if (!nav_trigger || nav_trigger.triggered) {
        return false;
    }
    nav_trigger.triggered = true;
    var nav = document.getElementById('nav');
    var nav_trigger_a = nav_trigger.querySelector('a');
    if (nav_trigger_a) {

        // remove the link.
        vjs_setAttr(nav_trigger_a, 'href', 'javascript:void(0)');

        // remove the smooth scroll attribute and prevent it from
        // being a link.
        nav_trigger.addEventListener('click', function(event) {
            var is_open = vjs_toggleClass(nav, 'open');
            if (is_open) {
                vjs_addClass(nav_trigger, 'open');
            } else {
                vjs_removeClass(nav_trigger, 'open');
            }
            event.preventDefault();
            sr_record_analytics_event('MainNavButtonClick', sr_record_directory(), sr_record_page());
        });
    }

    sr_record_page_link_clicks(nav);
    return true;
}
/* *********************************************************************
   # Usage       :   sr_menus_setupMainNav_navbar
   # Purpose     :   set up the drop menus if needed for the site.
   # Returns     :   nothing
   # Parameters  :   none
   # Throws      :
   # See Also    :

   # Comments    :   note that we only add the dropdowns with localstorage is
                 :    available and we are on a desktop setting.
                 :
                    pre-Klecko, this would require a div to appear in the, <li></li> and then
                     we'd enter the html into that div.
                     this has been tweaked, so that we 
   ********************************************************************** */
function sr_menus_setupMainNav_navbar() {
    console.log('   ### running sr_display_setupMainNav_bar');

    // Stock the data into the main_nav set of li's.  This used to use
    // onbeforeshow, but that caused some stuttering when users tried
    // to use it, so I'm now getting this data ASAP and storing it in
    // sessionStorage, so we can use it later.  This is set using ajax
    // because it changes hourly and this way it is updated for each
    // session for the user.  Check to make sure we have a main_nav and
    // sessionstorage, don't bother if not.
    if (!document.getElementById('main_nav') || !Modernizr.sessionstorage) {
        return false;
    }

    // Check to see if we are storing a lang here
    var session_storage_key = sr_SITE_ABB + '_main_nav_menu' + (Modernizr.lang !== 'en' ? '-' + Modernizr.lang : '');
    console.log('   ### running sr_display_setupMainNav_bar  key:' + session_storage_key);

    // this is for debugging to force a reload.
    if ((typeof sr_is_production !== "boolean") || !sr_is_production) {
        console.log('   ### purging main_nav_menu from localStorage');
        sessionStorage.removeItem(session_storage_key);
    }

    // check session storage for the item.
    var main_nav_data = sessionStorage.getItem(session_storage_key);
    if (main_nav_data) {
        console.log('    ### key in session_storage');
        sr_menus_setupMainNav_dropdowns(JSON.parse(main_nav_data));
    }
    // the try for teh file failed, so we just keep failing here.
    else if (window.sessionStorage['sr_main_nav_failed']) {
        console.log('   ### main_nav_retrieval previously failed.');
        return false;
    } else {
        console.log('   ### key retrieval in session_storage');
        // retrieve the data via ajax
        // Set the location of the json file sr_JSON_URL is if we
        // set it in a non-standard location like for oly and cbb.
        var json_url = '/inc/main_nav_menu' + ((Modernizr.lang !== 'en') ? '_'+Modernizr.lang : '') + '.json';
        console.log('   ### running sr_display_setupMainNav_bar  pre-set url:'+json_url);
        if (typeof sr_dropmenu_url === "string") {
            json_url = sr_dropmenu_url;
        }
        console.log('   ### running sr_display_setupMainNav_bar   in-use url:'+json_url);

        // retrieve the json, and set into main_nav.  note that this
        // is via AJAX, so we need to split off the
        // sr_menus_setupMainNav_dropdowns as it's own function and
        // can't just run that code at the end of this one.  Took me a
        // while to figure that out.    
        vjs_Ajax('GET',
            json_url, {},
            function(data) {
                // store in session storage.
                sessionStorage.setItem(session_storage_key, JSON.stringify(data));

                // push to #main_nav
                sr_menus_setupMainNav_dropdowns(data);
            },
            // on failure set a marker, so we don't try again.
            function() {
                console.log('   ##[main_nav_dropdown] file retrieval failed, url: '+json_url);
                window.sessionStorage['sr_main_nav_failed'] = true;
            },
            true,
            true
        );
    }
    return true;
}


function sr_menus_setupMainNav_dropdowns(data_json) {
    // Set the json array we got either from sessionStorage or ajax. {link:foo, text:bar}
    // Parse the json and then stock the divs with the relevant data.
    for (d in data_json) {

        // Get the li we want to fill.
        var li = document.getElementById(data_json[d].target);
        if (li) {

            // We have a matching element to stuff the dropdown into
            // so we build a div and add to the <li></li>        
            var div = document.createElement('div');
            div.innerHTML = data_json[d].html;
            li.appendChild(div);
            vjs_addClass(li, 'hasmore');
            sr_menus_setupDropMenu(li);
            sr_record_page_link_clicks(li);
        }
    }
    // only go through here if we know we need to.
    if (document.querySelector('#header_scores > a')) {
        sr_menus_add_games_counter();
    }

}


/* *********************************************************************
   # Usage       :   sr_menus_setupDropMenu()
   # Purpose     :   setup the show and hide of the drop menus
   # Returns     :   
   # Parameters  :   none
   # Throws      :
   # See Also    :
   # Comments    :   relies on the a <ul class="hovermenu[_ajax]"> in the page
   #  Then it does the typical superfish hovermenu things to get set up.
   ********************************************************************** */
function sr_menus_setupDropMenu(el) {
    if (!el) { return false; }

    if (el.menuSetup) {
        return false;
    }

    // If this is not a touch device or narrow we set up menu
    // hovering, else we make them onclicks.
    if (Modernizr && !Modernizr.touch) {
        sr_menus_hover(el);
        el.menuSetup = true;
    } else {
        // we only want to do this if the element is a hasmore.
        // other wise we just want it to be a link.
        if (vjs_hasClass(el, 'hasmore')) {
            sr_menus_clickable(el);
            el.menuSetup = true;
        }
    }

    // mark the element as vertical if appropriate.  This applies only
    // to the inner nav.
    /*
       if (el.parentNode.parentNode.id === 'inner_nav') {
        var ps = el.querySelectorAll('div > p');
        var uls = el.querySelectorAll('div > ul');

        if ((ps.length <= 1) && (uls.length <= 1)) {
            vjs_addClass(el, 'vertical');
        }
        }*/


}



/* *********************************************************************
   # Usage       :   
   # Purpose     :   
   # Returns     :   
   # Parameters  :   
   # Throws      :
   # See Also    :
   # Comments    :   this only gets here on touch devices, when a <li> element has a "hasmore" class
   #                 the purpose is to make sure the touch actually opens the dropdown, as opposed to triggering the link contained within
   #                 it does this by voiding out the "href" .... this shouldn't get here for the main nav - because main nav doesn't have "hasmore" to start - it gets added by JS, and its content added with ajax/sessionstorage
   #                 in the case of stathead, though, its contents don't get added via ajax - it's there in the HTML - so it needs the "hasmore" already in the HTML - NOT added by JS after load
   #                 this causes confusion here - because Stathead's main nav, on mobile, gets sent here (because it has "hasmore") - and then its link gets deleted, when we actually want it in the main nav on mobile
   # 
   ********************************************************************** */
function sr_menus_clickable(el) {
    // console.log('   ### starting sr_menus_clickable.');

    // make sure the control is visible
    if (el.style.display === 'none') {
        return;
    }

	// if this is the main_nav, we want the reverse of the below behavior
	// i.e. we want to delete the "hasmore" class, and keep the href link
	// we want to do this for ... Stathead / Mobile / main_nav
	// the only time the main_nav would be the parent element here in this function, is when it's Stathead / Mobile (given the requirements for this function to be called)
	// so we're safe for only checking here whether the parent is main_nav
	let ul = el.closest('ul');
	if(ul && ul.id=='main_nav') {
		el.classList.remove('hasmore');
		return;
	}
	
	// not in the main_nav, so proceed
	
    let a = el.querySelector('a,span');
    vjs_setAttr(a, 'href', 'javascript:void(0)');
    sr_dropmenu_add_helpers(el);

    // Attached a clickhandler to the script.
    a.addEventListener('click', function (event) {
        // if this menu is drophovered now, we
        // remove all drophovers, else we apply
        // drophover here.
        if (sr_elsDrophovered.includes(el)) {
            sr_menus_remove_drophover_from_all();
        } else {
            sr_menus_add_drophover_to_el(el);
        }
        sr_record_analytics_event('Clicked on Menu', sr_record_directory(), sr_record_nearest_parent_id(a));
    });

    // when we have this clickable div, we want to add a means to close it.
    let div = el.querySelector(':scope > div');
    if (div) {
        div.insertAdjacentHTML('afterbegin', '<div role="button" aria-label="close this menu" class="closer"></div>');
        var div_closer = div.querySelector(':scope > .closer');

        div_closer.addEventListener('click', function () {
            sr_menus_remove_drophover_from_all();
        });
    }

    // If you click a link in this el we want to close the drophover here.
    let sub_hrefs = el.querySelectorAll(':scope > div > ul > li > a');
    vjs_forEach.call(sub_hrefs, function(sub_href, k) {

        let link = vjs_getAttr(sub_href, 'href');

        if (/^#/.test(link)) {
            sub_href.addEventListener('click', function (event) {
                sr_menus_remove_drophover_from_all();

                // also click the div#id if an attr is given
                if (vjs_hasAttr(sub_href, 'data-click')) {
                    let idClick = vjs_getAttr(sub_href, 'data-click');
                    let elClick = document.getElementById(idClick);
                    vjs_triggerEvent(elClick, 'click');
                }
                return true;
            });
        }
    });
}

/* *********************************************************************
   # Usage       :   sr_menus_hover()
   # Purpose     :   setup the show and hide of the drop menus
   # Returns     :   
   # Parameters  :   none
   # Throws      :
   # See Also    :
   # Comments    :   

For this to work we have a global that stores the current element being hovered over.

 when we hover over something with a mouseover we fire a setTimeout
 that after a delay then rechecks to see that we are over the element
 we previously wanted to be over.
  ********************************************************************** */
// This is wrapped in a function because we only care to fire it up
// when the actually mouses over something impt.
var sr_nav_timer_delay = 175;
var sr_hovering_el;
var sr_hovering_check_el;
var foo = 0;
var bar = 0;

/* *********************************************************************
   # Usage       :   sr_menus_hover()
   # Purpose     :   setup the show and hide of the drop menus
   # Returns     :   
   # Parameters  :   none
   # Throws      :
   # See Also    :
   # Comments    :   

For this to work we have a global that stores the current element being hovered over.

 when we hover over something with a mouseover we fire a setTimeout
 that after a delay then rechecks to see that we are over the element
 we previously wanted to be over.
  ********************************************************************** */
function sr_menus_hover_check() {
    // Track where the user's mouse is.
    document.onmousemove = function(e) {
        e = e || window.event;
        sr_hovering_el = e.target || e.srcElement;
    };
}

function sr_menus_hover_check_throttle() {
    vjs_addEvent(document, 'mousemove', vjs_throttle(sr_menus_mousemove, 50));
}

function sr_menus_mousemove(event) {
    event = event || window.event;
    if (event.type === "mouseout") {
        sr_hovering_el = event.relatedTarget || event.toElement;
    } else {
        sr_hovering_el = event.target || event.srcElement;
    }
}
/*
function sr_menus_hover_check_throttle () {
    vjs_addEvent(document, 'mousemove', vjs_throttle(
    function (event) {
        event = event || window.event;
        sr_hovering_el = event.target || event.srcElement;
    }
    ,50));                    
}
*/


/* ********************************************************************* */

var i = 1;

function sr_menus_hover(el) {
    //    console.log('   ### starting sr_menus_hover.');
    sr_dropmenu_add_helpers(el);

    if (!sr_hovering_el) {
        //sr_menus_hover_check();
        sr_menus_hover_check_throttle();
        sr_hovering_el = document;
    }

    // Mouseover the element.
    el.onmouseover = function(e) {
        // set the timeout for the check to see if we've left the
        // element.
        var elMenu = this;
        sr_menus_mousemove(e);

        setTimeout(function() {
            // check to see if the element currently over equals the el in question.
            if (vjs_elChildOfEl(sr_hovering_el, elMenu, true)) {
                sr_menus_add_drophover_to_el(elMenu);
            }
        }, sr_nav_timer_delay);
    };

    el.onmouseout = function(e) {
        var elMenu = this;
        // we fire the mousemove event here, so that we update the hovering_el when we exit the element.
        sr_menus_mousemove(e);

        // on mouseout we fire a timeout and then we before we
        // remove the drophover class we verify that we have
        // in fact left the element we left.  If we left and
        // came back the if then below will be false.
        setTimeout(function() {
            // force one more evaluation of where we are to handle the click issue.
            if (!vjs_elChildOfEl(sr_hovering_el, elMenu, true)) {
                sr_menus_remove_drophover_from_el(elMenu);
            }
        }, sr_nav_timer_delay / 1.1);
    };

}

/* *********************************************************************
   # Usage       :   sr_dropmenu_[add|remove]_drophover_[to|from]_el
   # Purpose     :   handles adding drophover & faded to needed elements.
   # Returns     :   
   # Parameters  :   el
   # Throws      : 
   # See Also    :
   # Comments    :   Stores the visible dropdowns in a global var for use on
                       mobile.
                     We use a set timeout here to make the hovering a tad
                     smoother so there isn't a flash of no dropdown as we
                     move across the dropdown hover elements.
   ********************************************************************** */
var sr_elsDrophovered = [];

function sr_menus_add_drophover_to_el(el) {
    if (vjs_hasClass(el, 'drophover')) {
        return;
    }

    console.log('   ### sr_menus_add_drophover_to_el #########');
    // Add the class and add to our global tracking array.
    sr_menus_remove_drophover_from_all(el);
    vjs_addClass(el, 'drophover');
    vjs_forEach.call(el.elsFaded, function(elFaded, idx) {
        if (!vjs_hasClass(elFaded, 'faded')) {
            vjs_addClass(elFaded, 'faded');
        }
    });
    if (!sr_elsDrophovered.includes(el)) {
        sr_elsDrophovered.push(el);
    }
}

function sr_menus_remove_drophover_from_el(el) {
    if (!vjs_hasClass(el, 'drophover')) {
        return;
    }

    console.log('   ### sr_menus_remove_drophover_from_el #########');
    vjs_forEach.call(el.elsFaded, function(elFaded, idx) {
        vjs_removeClass(elFaded, 'faded');
    });
    // We use a set timeout here to make the hovering a tad
    // smoother so there isn't a flash of no dropdown as we
    // move across the dropdown hover elements.
    setTimeout(function() {
        vjs_removeClass(el, 'drophover');
    }, 80);
}

function sr_menus_remove_drophover_from_all(excluded) {
    console.log('   ### sr_menus_remove_drophover_from_all #########');

    // check to see if sr_elsDrophovered === [excluded]
    if ((sr_elsDrophovered.length === 1) && (sr_elsDrophovered[0] === excluded)) {
        return;
    }

    vjs_forEach.call(sr_elsDrophovered, function(el, idx) {
        if (excluded === el) {
            return;
        }
        vjs_removeClass(el, 'drophover');
        vjs_forEach.call(el.elsFaded, function(elFaded, idx) {
            vjs_removeClass(elFaded, 'faded');
        });
    });
    sr_elsDrophovered = excluded ? [excluded] : [];
}

/* *********************************************************************
   # Usage       :   sr_dropmenu_add_helpers
   # Purpose     :   adds an array of dom elements to fade when this element is
   #                   drophovered
   # Returns     :   
   # Parameters  :   el
   # Throws      : 
   # See Also    :
   # Comments    :   searches for a selector in data-fade-selector and
                     pre-finds those elements and pushes onto el.elsFaded
   ********************************************************************** */
function sr_dropmenu_add_helpers(el) {
    el.elsFaded = [];
    if (vjs_getAttr(el, 'data-fade-selector')) {
        vjs_forEach.call(document.querySelectorAll(vjs_getAttr(el, 'data-fade-selector')), function(elToFade, idx) {
            el.elsFaded.push(elToFade);
        });
    }
}

/* *********************************************************************
   # Usage       :  sr_menus_setup_bottomPageNavMenu
   # Purpose     :   repurposes the content in the condensed box for bottom of page.
   # Returns     :   nothing, modifies a div
   # Parameters  :   none
   # Throws      :
   # See Also    :    
   # Comments    :   Since this only shows on phone we present this as a commented section
   ********************************************************************** */
function sr_menus_setup_bottomPageNavMenu() {
    console.log("   ### sr_menus_setup_bottomPageNavMenu");
    if (!Modernizr.phone) {
        return;
    }

    var el = document.querySelector('#inner_nav li.condensed');
    if (!el) { console.log('   ### no #inner_nav li.condensed'); return; }

    // grab the donor element for creating this and the div inside
    // of it.
    var donor = el.cloneNode(true);
    if (!donor) { return; }
    var donor_div = donor.querySelector(':scope > div');
    if (!donor_div) { return; }

    vjs_removeChild(donor.querySelector('.closer'));

    var donor_a = donor.querySelector(':scope > a');
    var donor_label = __sr_text_additional_pages;
    if (donor_a) {
        donor_label = donor_a.innerHTML;
        donor_a.parentNode.removeChild(donor_a);
    }

    var elRecip = document.createElement('div');
    elRecip.id = 'all_inner_nav_bottom';
    elRecip.className = 'section_wrapper commented';

    var newHtml = '<div class="section_heading">'
        +'<span class="section_anchor" id="inner_nav_bottom_link" data-label="'
        + donor_label 
        + '"></span>' 
        + '<h2>' 
        + donor_label 
        + '</h2>' 
        + '<div class="section_heading_text">' 
        + '<ul><li></li></ul>' 
        + '</div>' 
        + '</div>' 
        + '<!--  ' 
        + '<div class="section_content" id="inner_nav_bottom">' 
        + donor_div.innerHTML 
        + '</div>' 
        + '-->'
    ;

    elRecip.insertAdjacentHTML('afterbegin', newHtml);


    // var div = elRecip.querySelector(':scope > div');
    // vjs_addClass(div,'clearfix');

    var content = document.getElementById('content');
    content.appendChild(elRecip);
    return true;
}

/* *********************************************************************
   # Usage       :  sr_menus_setup_inpageNavMenu
   # Purpose     :   generate the content in the inpage_nav div
   # Returns     :   nothing, modifies a div
   # Parameters  :   none
   # Throws      :
   # See Also    :
   # Comments    :   you can suppress inpage_nav by setting model
   #                   with suppress_inpage_nav to true
   #            :   you can force inpage_nav on pages with <=3 sections with
   #                   with $model{force_inpage_nav} to true
 ********************************************************************** */
function sr_menus_setup_inpageNavMenu() {
    // check to see if we have a div#inpage_nav, exit if we don't.
    var inner_nav  = document.getElementById('inner_nav');
    var inpage_nav = document.getElementById('inpage_nav');
    if (!inner_nav || vjs_hasClass(inner_nav, 'suppress_inpage_nav')) return false;
    console.log("   ### sr_menus_setup_inpageNavMenu: using nodes");

    // Built by template
    if (inpage_nav && vjs_hasClass(inpage_nav, 'html_built')) {
        // check to see if we have a div#inpage_nav, exit if we don't.
        var inner_nav = document.getElementById('inner_nav');
        if (!inner_nav || vjs_hasClass(inner_nav, 'suppress_inpage_nav')) return false;
        console.log("   ### sr_menus_setup_inpageNavMenu: using nodes");
        
        var el_a = document.querySelectorAll('#inpage_nav>ul>li>a');

        vjs_forEach.call(el_a, function(a, i) {
            a.addEventListener('click', function (event) {
                sr_record_analytics_event('inpage-nav-click' + (Modernizr.phone?':phone':':not-phone'), section_label, sr_record_directory())
            });

        } );

        // append this also to the condensed nav.
        var condensed_nav = inner_nav.querySelector('li.condensed > div');
        if (condensed_nav && Modernizr.touch) {
            var inpage_html = inpage_nav.innerHTML;
            condensed_nav.insertAdjacentHTML('beforeend', inpage_html);
        }
    }
    // Backwards compatibility
    else {
        // Get all of our sections to list.
        var sections = document.querySelectorAll('.section_anchor:not([data-no-inpage="1"])');

        // if r <=2 sections we just return as we don't need to show the
        // inpage nav as there is nothing in-page other than the main
        // table.
        if ((sections.length <= 3) && !vjs_hasClass(inner_nav, 'force_inpage_nav')) return false;

        // Build the label for the page.
        var label = document.title;
        // check to see if we passed a label.
        var pageBody = document.body;
        if (vjs_hasAttr(pageBody, 'data-label')) {
            label = vjs_getAttr(pageBody, 'data-label');
        }
        label = label.replace(/ *\|.*/ig, '');
        var inpage_html = '<p class="listhead inpage">On this page: </p>' + "\n" + '<ul class="in_list inpage">';

        // Create the inpage_nav div
        inpage_nav = document.createElement('div');
        inpage_nav.id = 'inpage_nav';
        inpage_nav.innerHTML = inpage_html;
        var inpage_ul = inpage_nav.querySelector('ul.in_list.inpage');
        

        vjs_forEach.call(sections, function(section, i) {
            if (vjs_getAttr(section, 'data-no-inpage')) {
                return;
            }
            var section_id = vjs_getAttr(section, 'id');
            var section_label = vjs_getAttr(section, 'data-label');
            var section_label_desc = vjs_getAttr(section, 'data-label-desc');
            section_label_desc = (section_label_desc ? ' (' + section_label_desc + ')' : '');
            var href = '#' + section_id;
            // add a data-click if we want to pop open a commented out section.
            var section_click = '';
            if (section_id && section_id.match(/_link$/) && !section_id.match(/site_menu_link/)) {
                section_id = section_id.replace(/_link$/, '');
                section_id = section_id.replace(/^/, 'all_');
                href = '#' + section_id;
            }
            // if we have an id and a label we add this as an inpage link.
            if (section_id && section_label) {
                inpage_html = inpage_html 
                    + '<li><a href="' + href + '">' + section_label + '</a>' + section_label_desc + "</li>"
                ;

                var el_a = document.createElement('a');
                //vjs_setAttr(el_a,'data-scroll','');
                el_a.appendChild(document.createTextNode(section_label));
                el_a.href = href;
                el_a.addEventListener('click', function (event) {
                    sr_record_analytics_event('inpage-nav-click' + (Modernizr.phone?':phone':':not-phone'), section_label, sr_record_directory())
                });


                var el_li = document.createElement('li');
                el_li.appendChild(el_a);
                el_li.appendChild(document.createTextNode(section_label_desc));

                inpage_ul.appendChild(el_li);
            }
        });

        // append to inner nav.
        inner_nav.appendChild(inpage_nav);

        // append this also to the condensed nav.
        var condensed_nav = inner_nav.querySelector('li.condensed > div');
        if (condensed_nav && Modernizr.touch) {
            condensed_nav.insertAdjacentHTML('beforeend', inpage_html);
        }
    }

    return true;
}

/* *********************************************************************
   # Usage       :   sr_enable_freeze_bar 
   # Purpose     :   adds freezing menu functionality for certain menu bar items
   # Returns     :   
   # Parameters  :   
   # Throws      :
   # See Also    :
   # Comments : assign your element the class 'freeze_bar' to get it to stick -- only the final
        element with this class will actually stick.
   ********************************************************************** */
var freezer_div_loc_top, freezer_div_frozen;
var freezer_div_hidden_top, freezer_div_hidden;
// stores the scrollbar location at a previous  check
// to see if we are scrolling up or down, since our
// throttling of the checking of the location causes
// the frozen bar to sometimes get stuck at the top
// if the user scrolls up very quickly
var scrollBarPosition_prev = 0;
// inner_nav is the one that we leave in the page flow
// inner_nav_frozen is a clone of that we use for freezing
//    to the top of the page.

// get the div that is to be frozen.  
// we freeze one of two types
//  inner_nav  on a desktop setting
//  desc_container on a phone setting.
var _sr_through_freezer_div = 1;
var freezer_div;

function sr_get_freezer_div() {
    console.log('   ### sr_get_freezer_div, count:' + _sr_through_freezer_div);
    _sr_through_freezer_div++;
    if (document.freezer) { console.log('   ### back again, but already have a freezer.'); return document.freezer; }
    var div = document.getElementById('inner_nav');
    if (!div) { div = document.getElementById('desc_container'); }
    // no frozen div when the id is inner nav and we have  phone or touch.
    if (!div) { return null; }
    if (Modernizr && (Modernizr.phone || Modernizr.touch) && (div.id === 'inner_nav')) return null;

    // bugsID:334088, since the tool stretches long now we want to freeze the header so it's visible.
    //    if (Modernizr && !Modernizr.phone && (div.id === 'desc_container')) return null;
    if (div) {
        // set a freezer div on doc so we can check for it later.
        document.freezer = div;
        console.log('   ### a set freezer_div');

        var loc = vjs_offset(div);
        freezer_div_loc_top = parseFloat(loc.top);
        freezer_div_frozen = false;

        freezer_div_hidden_top = sr_setFreezerDivHiddenTop();
        freezer_div_hidden = false;
        console.log(div);
        console.log(loc);
        console.log(freezer_div_loc_top.toString() + ',' + freezer_div_hidden_top);
    }
    return div;
}


function sr_setFreezerDivHiddenTop() {
    console.log('   ### sr_setFreezerDivHiddenTop');
    var footer = document.getElementById('footer');
    loc = vjs_offset(footer);
    return parseFloat(loc.top) - 100;
}

// this is called in jsFire.js and sets up the listener and the clone
// of the freezer_div.
function sr_menus_enable_freeze() {
    console.log('   ### sr_menus_enable_freeze');
    // Make sure there is a freezer_div on the page.
    if (!freezer_div) {
        return false;
    }
    // this is some special stuff within the two types of divs
    // we need to handle.
    if (freezer_div.id === 'inner_nav') {
        // remove the unneeded inpage_nav.
        // append the back to top onto this.
        var freezer_ul = freezer_div.querySelector('ul');
        freezer_ul.insertAdjacentHTML('beforeend', '<li class="back_to_top"><a href="#header">Back to top</a></li>');
        //if (sr_detect_safari) {
        //    smoothScroll.add(freezer_ul.querySelector('.back_to_top [data-scroll]'));
        //}
    }
    // On scroll we check if we've passed where the freezebar is.
    vjs_addEvent(window, 'scroll', vjs_throttle(sr_menus_freeze_check, 50));
    // this is with no throttling which causes issues with performance
    //vjs_addEvent(window, 'scroll', sr_menus_freeze_check);                
    return true;
}

// this is called on the scroll event to 
function sr_menus_freeze_check(event) {
    var scrollBarPosition = parseFloat(vjs_scrollTop());


    // there seems to be a race condition bugID:335371 that I can't track down that
    // causes issues on Firefox.  I'm just going to disable the freezing in this case.
    if (!freezer_div_loc_top || !freezer_div_hidden_top) {
        console.log("values not properly set, so just leave")
        return;
    }


    // freezer_div is currently not frozen, but we are below the top of the
    if (scrollBarPosition > freezer_div_loc_top && !freezer_div_frozen) {
        console.log('add class frozen');
        vjs_addClass(freezer_div, 'frozen');
        freezer_div_frozen = true;
    } else if (scrollBarPosition <= freezer_div_loc_top && freezer_div_frozen) {
        console.log('remove class frozen');
        vjs_removeClass(freezer_div, 'frozen');
        freezer_div_frozen = false;
    }

    console.log('freezer_div_hidden_top:' + freezer_div_hidden_top);
    console.log('freezer_div_hidden:' + freezer_div_hidden);


    // freezer_div is currently not hidden, but we are below the top of the footer
    if (scrollBarPosition > freezer_div_hidden_top && !freezer_div_hidden) {
        console.log('add class hidden');
        vjs_addClass(freezer_div, 'hidden');
        freezer_div_hidden = true;
    } else if (scrollBarPosition <= freezer_div_hidden_top && freezer_div_hidden) {
        console.log('remove class frozen');
        vjs_removeClass(freezer_div, 'hidden');
        freezer_div_hidden = false;
    }

    // if we scrolled up, we want to set a timeout here,
    // so that we have one last check to see if we've hit
    // the top of the page.
    if (scrollBarPosition !== scrollBarPosition_prev) {
        // add a timeout for the top of the page.
        setTimeout(sr_menus_freeze_check, 50);

    }
    scrollBarPosition_prev = scrollBarPosition;

}

/* *********************************************************************
   # Usage       :   sr_menus_setSwitchers
   # Purpose     :   finds all .switcher elements and attaches onclicks to them
                       for toggling controlled data
   # Returns     :   nothing
   # Parameters  :   none.
   # Throws      :
   # See Also    :

   # Comments :  
This is the html setup we are looking for.

any.switcher is fine for the first group.
  any type of tag is fine as we select on .switcher:scope > *
any.controlled is fine
 and any type of table is fine as we select on .controlled:scope > *

Ideally we would use .switcher > button  

< class="switcher" data-controls="#the_controlled">
   < ></ > 
   < ></ >
   < ></ >
</ >
< class="controlled" id="the_controlled">
   < class="hidden"></ >
   < class="hidden"></ >
   < class="hidden"></ >
</ >

 ********************************************************************** */
function sr_menus_setSwitchers(el) {

    console.log('   ### sr_menus_setSwitchers');
    var els;
    if(el) {
        els = [el];
    }
    else {
        els = document.querySelectorAll('.switcher');
    }

    // run through each of the switcher elements
    vjs_forEach.call(els, function(el, i) {

        if (el.is_setup) { return; }
        el.is_setup = true;

        // select the controls as the child tags of .switcher
        var controls = el.querySelectorAll(':scope > *');
        // console.log('controls:'); console.log(controls);

        // build the css selector for the controlled tags
        var controlled_selector = vjs_getAttr(el, 'data-controls') + ' > *';
        var controlleds = document.querySelectorAll(controlled_selector);

        // also get the parent and add a class to that.
        controlled_selector = vjs_getAttr(el, 'data-controls');
        var controlled_parent = document.querySelector(controlled_selector);
        vjs_addClass(controlled_parent, 'switcher_content');

        // run through each control for switcher
        vjs_forEach.call(controls, function(control, idx) {

            var control_a = control.querySelector(':scope > a');
            if (control_a) {
                vjs_setAttr(control_a, 'href', 'javascript:void(0)');
            }

            // set up the onclick
            control.addEventListener('click', function (event) {
                // remove the open classes and add back the hidden classes.
                vjs_forEach.call(controls, function(other_control, j) {
                    vjs_removeClass(other_control, 'current');
                });
                vjs_forEach.call(controlleds, function(other_controlled, k) {
                    vjs_removeClass(other_controlled, 'current');
                    sr_record_analytics_event('Switcher', sr_record_directory(), other_controlled.id);
                });

                // open and unhide our clicked item and its controllee
                vjs_addClass(control, 'current');
                vjs_addClass(controlleds[idx], 'current');
                sr_chosen_enable_select(controlleds[idx]);
                // might need to set up sticky tables if the div we're switching to is a table container
                if(vjs_hasClass(controlleds[idx],'table_container')) {
                    sr_check_sticky_table_setup(controlleds[idx].querySelector('.stats_table'));
                }
            });


        });

    });
}

/* *********************************************************************
   # Usage       :   sr_menus_setOpeners
   # Purpose     :   finds all .opener elements and attaches onclicks to them
                       for toggling .more content
   # Returns     :   nothing
   # Parameters  :   none.
   # Throws      :
   # See Also    :

   # Comments :  All of the info about the opener is found in it's data attributes


 options for the code.

 .opener   A class of opener turns this into an opener
 data-id="the id of the element to open and close"
 data-selector="the selector of the elements to open and close"
 data-type="hide_after"  causes the opener element to be destroyed.
 data-delete-id="id to delete when clicked
 data-control-id="id of another parallel control we might want to control
         after clicking this one, an example of this when clicking on the
         # above the unis remove the other control for opening the bio info   
 data-textopen="text to put in a span in the opener element when the desired element is open"
 data-textclosed="text to put in a span in the opener element when the desired element is closed"
 data-class="" what class to toggle (adds first), default is open
 data-starts="open|closed"  default is closed, this tells us what the default state is for the controlled items
 
<p class="opener" data-id="bio_extra" data-textopen="Less" data-textclosed="More"><span>More</span> biographical info</p>

<p class="opener" data-selector="#table_id .minors" data-textopen="Hide" data-textclosed="Show"><span>Show</span> Minors</p>

<p class="opener" data-id="bio_extra" data-class="open" data-textopen="Less" data-textclosed="More"><span>More</span> biographical info</p>
        data-class tells us what class the opener should toggle.

<button class="toggler tooltip" data-textopen="Show" data-textclosed="Hide" data-selector="#$table_id .partial_table" data-class\
="hidden"><span>Hide</span> Partial Seasons</button> 

Note that opener always has the arrow after the text, .toggler does not.

NOTE that we need to rerun this subroutine when the dom changes via
things like html being uncommented and brought into the DOM we need to
recompute the click handlers.

 ********************************************************************** */
function sr_menus_setOpeners(root) {
    console.log('   ### sr_menus_setOpeners');
    if (!root) {
        root = document;
    }
    var els = root.querySelectorAll('.opener,.toggler');

    // run through each of the opener elements
    vjs_forEach.call(els, function(el, i) {

        // this check avoids calling event listener twice (zs)
        if (el.hasAttribute('data-has-listener')) { return; }
        el.setAttribute('data-has-listener', 'true');

        el.toggle_button = 'noclick';
        el.addEventListener('click', function (event) {
            el.toggle_button =
                el.toggle_button === 'noclick' ? 'clickhide' :
                el.toggle_button === 'clickhide' ? 'clickshow' :
                'clickhide';

            sr_menus_runOpener(event, el);

            // if we open or close the form and are on mobile we want to reset
            // the location where we hide the description div.
            if (freezer_div_hidden_top && (el.id === 'show_hide_search_form')) {
                freezer_div_hidden_top = sr_setFreezerDivHiddenTop();
            }
        });

        // setup the mouseovers initially, are overwritten each
        // time through sr_menus_runOpener.
        sr_menus_resetOpenerVibrate(el);
    });
}


/* *********************************************************************
   # Usage       :   sr_menus_resetOpenerVibrate
   # Purpose     :   resets the mouseover for .openers/.togglers
   # Returns     :   nothing
   # Parameters  :   el, els_to_control(optional)
   # Throws      :
   # See Also    :

   # Comments : els_to_control can be empty and we'll manage just
   fine.  note that this gets run the first time before table mobilize
   and table uncommenting, so the hovers may not be "complete" the
   first time we run them, but each time we click on an opener we
   rerun this, to make sure we vibrate appropriately.   
 ********************************************************************** */
function sr_menus_resetOpenerVibrate(el, els_to_control) {
    console.log('   ### sr_menus_resetOpenerVibrate');
    if (!els_to_control) {
        if (vjs_hasAttr(el, 'data-id')) { els_to_control = document.getElementById(vjs_getAttr(el, 'data-id')); } else if (vjs_hasAttr(el, 'data-selector')) { els_to_control = document.querySelectorAll(vjs_getAttr(el, 'data-selector')); }
    }

    if (!els_to_control) {
        return false;
    }

    el.onmouseover = function(e) {
        vjs_forEach.call(els_to_control, function(el_to_control, j) {
            vjs_addClass(el_to_control, 'vibrate');
        });
    };
    el.onmouseout = function(e) {
        vjs_forEach.call(els_to_control, function(el_to_control, j) {
            vjs_removeClass(el_to_control, 'vibrate');
        });
    };
    return true;
}

/* *********************************************************************
   # Usage       :   sr_menus_runOpener
   # Purpose     :   handles the clicking of an opener.
   # Returns     :   nothing
   # Parameters  :   el
   # Throws      :
   # See Also    :
   # Comments :   note that we have to run through some of this setup on each
   click because some of our commenting of code and mobilizing scripts can
   change the DOM in the middle of a page interaction.

   Resetting the mouseover stuff and rescanning for els_to_control
   probably is overkill for each click on the toggler, but the issue
   is that we would otherwise have to maintain a state of domISchanged
   throughout the JS, so when we got to here we would need to check
   that var and then re-run only if the domIsChanged and that happens
   in so many different places, that it would be an accounting
   nightmare full of bugs and hard to track.  This way it's all
   compartmentalized here albeit and the need to do some more
   document.querySelectorAll calls than we would probably like, but
   the way we are handling commenting of tables and mobilizing tables
   after the fact requires it.
   
 ********************************************************************** */
function sr_menus_runOpener(e, el) {
    console.log('   ### sr_menus_runOpener');
    // get the data for this particular opener from the various
    // data attributes.
    var id = vjs_getAttr(el, 'data-id');
    var selector = vjs_getAttr(el, 'data-selector');
    var el_to_control_state;

    var els_to_control;
    if (id) {
		els_to_control = document.querySelectorAll('#' + id);
	}
	else if (selector) {
		els_to_control = document.querySelectorAll(selector);
	}

    // run through all of the els_to_control
    if (els_to_control) {
        var opener_type = vjs_getAttr(el, 'data-type');
        var opener_open_text = vjs_getAttr(el, 'data-textopen');
        var opener_closed_text = vjs_getAttr(el, 'data-textclosed');
        var opener_class = vjs_getAttr(el, 'data-class');
        var opener_starts = vjs_getAttr(el, 'data-starts');
        var opener_highlight = vjs_getAttr(el, 'data-highlightselectors');

        if (!opener_class) { opener_class = 'open'; }

        // The span inside of the .opener that contains text we might toggle.
        var opener_control = vjs_getAttr(el, 'data-control-id');
        var el_control;
        if (opener_control) {
            el_control = document.getElementById(opener_control);
        }
        // set the default value if needed.
        if (!el_control) {
            el_control = el;
        }

        // The span inside of the .opener that contains text we might toggle.
        var opener_delete = vjs_getAttr(el, 'data-delete-id');
        var el_delete;
        if (opener_delete) {
            el_delete = document.getElementById(opener_delete);
        }

        // see if there is an interior span.  If not we just use the element itself.
        var el_span = el_control.querySelector('span');
        if (!el_span) {
            el_span = el_control;
        }

        var opener_el_state;

        vjs_forEach.call(els_to_control, function(el_to_control, j) {

            // if given a class we toggle that class here, if
            // not we toggle display here.
            if (opener_class === 'hidden') {
                sr_display_showHideElement(el_to_control, selector.split('.').pop().trim(), el.toggle_button);
                el_to_control_state = el.toggle_button === 'clickhide';
            }

            // if given a class we toggle that class here, if
            // not we toggle display here.
            else if (opener_class) {
                el_to_control_state = vjs_toggleClass(el_to_control, opener_class);
                sr_chosen_enable_select(el_to_control);
            } else {
                el_to_control_state = vjs_toggleDisplayBlock(el_to_control);
                // returns open or closed.  We want true if open
                // and false if closed.
                el_to_control_state = (el_to_control_state === 'open');
                sr_chosen_enable_select(el_to_control);
            }

        });

        // Next we check on changing the text used here.
        vjs_toggleClass(el_control, 'open');
        if (opener_type === "hide_after") {
            el_control.parentNode.removeChild(el_control);
        } else if (((!el_to_control_state && opener_starts !== 'open') || (opener_starts === 'open' && el_to_control_state)) &&
            el_span && opener_closed_text) {
            el_span.innerHTML = opener_closed_text;
        } else if (((el_to_control_state && opener_starts !== 'open') || (opener_starts === 'open' && !el_to_control_state)) &&
            el_span && opener_open_text) {
            el_span.innerHTML = opener_open_text;
        }

        // Next we delete if needed
        vjs_removeChild(el_delete);

        e.preventDefault();
        sr_record_analytics_event('Opener', sr_record_directory(), el.id);


        // For the meta_more_button, we set a cookie that we've clicked it previously
        if ((el.id === 'meta_more_button') && !vjs_readCookie('meta_more_button')) {
            console.log('   ### set the meta_more_button cookie ');
            vjs_createCookie('meta_more_button', 1, 28);
        }


        // reset the mouseover stuff.
        if (opener_highlight && !Modernizr.touchevents) {
            sr_menus_resetOpenerVibrate(el, els_to_control);
        }
    } // if we have els_to_control

}
/* *********************************************************************
   # Usage       :   sr_menus_checkInfoCookie
   # Purpose     :   if the cookie 'meta_more_button' is set to 1, we turn off the #info hider, or if the # of hidden sibs is <= 2
   # Returns     :   nothing
   # Parameters  :   desktop or mobile, for mobile, we never use the cookie.
   # Throws      :
   # See Also    :
   # Comments :  All of the info about the opener is found in it's data attributes

 2021-01-05, Due the jumping of content caused by this button being
 fired or setup long after the content was rendered, we've moved this
 code to an inline script, but since we can't guarantee deployment of
 the inline html change in a consistent way we are going to have to do
 belt and suspenders.

 The inline code is in lib/SR/Templates/General/MetaButton.tt2
 at the end of the inline code we run
 var sr_menus_checkInfoCookie_run_inline = true;
 ********************************************************************** */
function sr_menus_checkInfoCookie(browserType) {
    console.log("### entering sr_menus_checkInfoCookie.");

    if ((typeof sr_menus_checkInfoCookie_run_inline !== "undefined") && sr_menus_checkInfoCookie_run_inline) {
        console.log("### exiting  sr_menus_checkInfoCookie without running as code was run inline");
        return false;
    }
    var el_info = document.getElementById('info');
    var el_button = document.getElementById('meta_more_button');
    if (!el_button || !el_info) { console.log('no meta_button'); return; }

    // get the number of hidden siblings for the button.
    var el = el_button;
    var siblingsHidden = 0;
    while (el = el.previousSibling) { if ((el.nodeType === 1) && vjs_isHidden(el)) { siblingsHidden++; } }
    console.log('   ### meta_more has ' + siblingsHidden + ' siblings hidden before it');

    // check the cookie.
    var button_cookie = vjs_readCookie('meta_more_button');
    if (browserType === 'mobile') { button_cookie = false; }

    // if two or fewer siblings are hidden just show the content as button takes up more space anyways.
    if (el_info && el_button && (button_cookie || (siblingsHidden <= 2))) {
        console.log('   ### got the meta_more cookie or there are no hidden siblings, so open it');
        el_button.parentNode.removeChild(el_button);
        vjs_addClass(el_info, 'open');
    } else {
        console.log('   ### no meta_more cookie, so add class show');
        vjs_addClass(el_button, 'show');
    }
}

/* *********************************************************************
   # Usage       :   sr_menus_loadGrid
   # Purpose     :   adds the player selector for the grid_tables built in Grid.pm
   # Returns     :   nothing
   # Parameters  :   none.
   # Throws      :
   # See Also    :
   # Comments :  run on load and looks for table.grid_table.
 ********************************************************************** */
function sr_menus_loadGrid() {
    console.log('   ### sr_menus_loadGrid');
    //sr_chosen_enable_select();
    var grid_tables = document.querySelectorAll('.grid_table');
    vjs_forEach.call(grid_tables, function(grid_table, i) {
        var table_id = grid_table.id;

        var select_id = table_id.replace('table', 'select');
        var selector = document.getElementById(select_id);
        vjs_addEvent(selector, 'change', function() {
            // First, unhighlight all highlighted cells.
            var tds = document.querySelectorAll('table#' + table_id + ' .highlight'),
                i;
            for (i = 0; i < tds.length; ++i) {
                vjs_removeClass(tds[i], 'highlight');
            }

            // remove rowSum from both of the two table instances
            var trs = document.querySelectorAll('table#' + table_id + ' tr.rowSum');
            for (i = 0; i < trs.length; ++i) {
                vjs_removeClass(trs[i], 'rowSum');
            }

            // Determine the selected player
            var selected = document.getElementById(select_id);
            var cells = grid_table.querySelectorAll('td.' + selected.value);
            if (cells.length) {
                for (i = 0; i < cells.length; ++i) {
                    vjs_addClass(cells[i], 'highlight');

                    // add rowSum to the row.
                    var tr = cells[i].parentNode;
                    var first_cell = tr.firstChild;
                    vjs_addClass(first_cell, 'highlight');
                }
            }

        });
    });
}
sr_utilities_js_loader.push(sr_menus_loadGrid);

/* ### FILE:sr.mod.share.js    */


/*

  IMPLEMENTING SHARING TOOLS
  
Four files:
*This one (for handling the creation of the query to save within the browser)
*lib/SR/scripts/share.fcgi (for presenting the info saved by the user to any other user)
*lib/SR/scripts/saveQuery.cgi (for storing the data from the user sent via their browser and ajax)
** share.fcgi and saveQuery.cgi go in the tools directory.

*http://www.sports-reference.com/js/sr_share.js  (for printing out the results from share.fcgi as js)
** uploaded by Sean.
  
There are
also options that should be set in the local js file (br.js, bbr.js).


# you will need tools/csv2pre.cgi to handle the various types of pre-formatted outputs.
lib/SR/scripts/csv2pre.cgi

# create the table saved_queries to handle saves made by the users
CREATE TABLE `saved_queries_full` (
  `linkID` char(8) NOT NULL,
  `userID` varchar(55) NOT NULL,
  `date_saved` date default NULL,
  `toolused` varchar(255) default NULL,
  `title` varchar(255) default NULL,
  `notes` text,
  `headerOut_compress` mediumblob,
  `dataOut_compress` mediumblob,
  PRIMARY KEY  (`linkID`),
  KEY `userID` (`userID`,`date_saved`),
  KEY `date_saved` (`date_saved`,`title`,`linkID`),
  KEY `toolused` (`toolused`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1




 ### 2020-06-08:sf: I don't believe that shareit is used anywhere and that
 ### these links are not needed.  I guess they'd be in saveQuery?
On the server setup we have to an alias set up in /etc/httpd/
/tools/shareit/iddd to /tools/share.fcgi?id=idddd
    RewriteRule ^/pi/shareit/([^/]+)$           /tools/share.fcgi?id=$1 [PT]
    RewriteRule ^/pi/shr/([^/]+)$               /tools/share.fcgi?id=$1 [PT]
    RewriteRule ^/tools/shareit/([^/]+)$   /tools/share.fcgi?id=$1 [PT]
    RewriteRule ^/tools/shr/([^/]+)$       /tools/share.fcgi?id=$1 [PT]


In SRlocal::Constants define
# $SITE_TITLE = 'Baseball-Reference.com';
# $HAS_PI_MEMBERSHIP = $TRUE; (leave blank or set to false if not)
# get_site_params   share_root_url  =  http://bbref.com/pi/shareit
# %SRlocal::Constants::saved_query_tool_name is a hash that converts the
##   tool url to a more useful text description.
##    game_finder.cgi?type=b => Batting Game Finder

Create a database table for storing the queries
* table syntax for storing the queries is in saveQuery
 
* copy share.fcgi and saveQuery.cgi automatically from lib/SR, perhaps add this in /copyit/recompile
* copy csv2pre.cgi to /tools/csv2pre.cgi.cgi
*/

var _sr_SHARE_SITE_URL = sr_SITE_URL;

// push this into the onload since Modernizr doesn't run until then
sr_utilities_js_loader.push(function() {
    if (Modernizr.is_stathead && sr_SITE_URL !== 'fbref.com') {
	_sr_SHARE_SITE_URL = 'stathead.com';
    }
});


/* *********************************************************************
# Usage       :   
# Purpose     :   
# Returns     :   
# Parameters  :   
# Throws      :  
# See Also    :  
# Comments    : 
   _remove_share_tips
   deletes/not hides all tips items in the table.
   delete onmouseovers from th as well.
********************************************************************** */
function _remove_share_tips (table)
{
    var tips = document.querySelectorAll('button.delete_this_tip, tr.delete_this_tip');
    if (table) {
	tips = table.querySelectorAll('button.delete_this_tip, tr.delete_this_tip');
    }

    vjs_forEach.call(tips, function(tip, i){
	tip.parentNode.removeChild(tip);
    });
}

/* *********************************************************************
# Usage       :   view_table_html
# Purpose     :   opens a modal and lets you copy the text for use on your site.
# Returns     :   a textarea in a modal.
# Parameters  :   click event, table_id,
                  suppress_inline_styles, 'basic' = provide basic styles, 'off' = turn off styles, 'sr' = use sr styles.

# Throws      :  
# See Also    :  
# Comments    : herehere make the width of #ta_table_out wider than 40em
********************************************************************** */
function _view_table_html (event, table_id, suppress_inline_styles)
{
    console.log('## inline_styles:' + suppress_inline_styles);
    sr_record_analytics_event('table-tool-share', 'view-html-table-'+suppress_inline_styles, 1);

    // Build the string for the three options for the inline styles.
    var style_options = '<br><span>' + __sr_text_turn_inline_styles + '  ';

    // Basic is selected or default
    if ((suppress_inline_styles !== 'off') && (suppress_inline_styles !== 'sr')) {
        style_options = style_options + '<strong>' + __sr_text_turned_On + '</strong>  / ';
    }
    else {
        style_options = style_options + '<span class="tooltip" onclick="_view_table_html(event, \'' + table_id + '\', \'basic\')">' + __sr_text_turned_On + '</span> / ';
    }
    // Off is selected
    if (suppress_inline_styles === 'off') {
        style_options = style_options + '<strong>' + __sr_text_turned_Off + '</strong>  / ';
    }
    else {
        style_options = style_options + '<span class="tooltip" onclick="_view_table_html(event, \'' + table_id + '\', \'off\')">' + __sr_text_turned_Off + '</span> / ';
    }
    // Sports Ref style is selected
    if (suppress_inline_styles === 'sr') {
        style_options = style_options + '<strong>SportsRef</strong>  / ';
    }
    else {
        style_options = style_options + '<span class="tooltip" onclick="_view_table_html(event, \'' + table_id + '\', \'sr\')">SportsRef</span> / ';
    }

    // Sports Ref style is selected
    if (suppress_inline_styles === 'stathead') {
        style_options = style_options + '<strong>SR Newsletter</strong>  / ';
    }
    else {
        style_options = style_options + '<span class="tooltip" onclick="_view_table_html(event, \'' + table_id + '\', \'stathead\')">SR Newsletter</span> / ';
    }

    style_options = style_options + __sr_text_click_what_are_these + '</span>';
					 

    var popup_text = '<p>' + __sr_text_ctrl_a +  style_options +
        '<p><form id="fa_table_out"><textarea id="ta_table_out" class="pre" rows=10 cols=100 wrap="off"></textarea></form>'
    ;

    var table_dom =  document.getElementById(table_id);
    var is_modal_open = sr_display_showPopup(event, event.target, popup_text);

    if (is_modal_open) {
	var table_html = _get_table_html(table_id, suppress_inline_styles);
	
	var textarea_out = document.getElementById('ta_table_out');
	if (suppress_inline_styles === 'stathead') {
	    // just give me that table output
	    textarea_out.value = table_html;
	}
	else {
	    textarea_out.value = '<div class="sr_share_wrap" style="overflow:auto">' + "\n" + table_html + "\n", '</div>';
	}
	vjs_removeClass(textarea_out,'inactive');
	textarea_out.focus();
    }
    return;
}

/* *********************************************************************
# Usage       :   get_table_html(table_id, style desired)
# Purpose     :   gets the existing stats table we are operating on and
                    cleans it up and returns data that can be copied by the
                    user for their site.
# Returns     :   a string for placing into a textarea
# Parameters  :   suppress_inline_styles, 'basic' = provide basic styles, 'off' = turn off styles, 'sr' = use sr styles,
                   'stathead' = for our newsletter
# Throws      :   
# See Also    :  
# Comments    : this clones the existing table and then operates on it and returns it.
********************************************************************** */
function _get_table_html (table_id, suppress_inline_styles)
{
    _remove_share_tips(document.getElementById(table_id));
    var table_wrapper_dom =   document.getElementById('wrap_' + table_id);
    var copy_table_wrapper_dom = table_wrapper_dom.cloneNode(true);
    table_wrapper_dom.parentNode.appendChild(copy_table_wrapper_dom);

    var copy_id = 'clone_wrapper';
    copy_table_wrapper_dom.id = copy_id;
    
    // Take away the sharing box from the child
    copy_table_wrapper_dom.removeChild(copy_table_wrapper_dom.firstChild);
    var copy_table_dom;

    
    if ((suppress_inline_styles === 'basic') ||	(suppress_inline_styles === 'off') ||	(suppress_inline_styles === 'stathead')) {

        // Get the table_dom of the copy.
        copy_table_dom = copy_table_wrapper_dom.firstChild;
        copy_table_dom.className = 'sr_share';
        copy_table_dom.id = '';

	vjs_removeAttr(copy_table_dom, 'data-cols-to-freeze');
            
        if (suppress_inline_styles === 'basic') {
	    vjs_setAttr(copy_table_dom,'style','border-collapse: collapse; font-size:.83em; border: 1px sold #aaa; overflow:auto;');
        }
        else if (suppress_inline_styles === 'stathead') {
	    
	    // <table cellpadding="3" cellspacing="0" border="0" style="width:100%;max-width:300px">
            copy_table_dom.className = '';
	    vjs_setAttr(copy_table_dom,'cellpadding','3');
	    vjs_setAttr(copy_table_dom,'cellspacing','0');
	    vjs_setAttr(copy_table_dom,'border','0');
	    vjs_setAttr(copy_table_dom,'style','width:100%;max-width:300px;');
 	    // clear the old classes and just give this stats_table for styling
	    vjs_removeAttr(copy_table_dom,'class');
	    vjs_setAttr(copy_table_dom,'class','stats_table');
	    vjs_removeAttr(copy_table_dom,'id');
	    copy_table_dom.removeChild(copy_table_dom.querySelector('colgroup')); // remove the colgroup element
	    vjs_removeAttr(copy_table_dom,'id');
        }


        for (var row = 0, max = copy_table_dom.rows.length; row < max; row++) {
	    var tr = copy_table_dom.rows[row];

	    // clean out the mouseovers here.
	    tr.onmouseover = function () { return; };
            tr.onmouseout = function () { return; };
            tr.onclick = function () { return; };
	    vjs_removeAttr(tr,'onmouseover');
	    vjs_removeAttr(tr,'onmouseout');
	    vjs_removeAttr(tr,'onclick');
	    vjs_removeAttr(tr,'data-row');

	    
	    
	    var thead_rows = copy_table_dom.tHead.rows.length;
	    var has_content = 0;
            for (var col = 0, max2 = tr.cells.length; col < max2; col++) {
                var td = tr.cells[col];
		if (row < thead_rows) { // check for content in the thead as we might want to delete over headers that are blank
			var td_text = td.innerHTML;
			td_text = td_text.replace(/^\s+?$/, ''); // remove spaces
			if (td_text.length > 0) {
				has_content = 1;
			}
		}

		// strip out these as they may cause issues when embedding.
		vjs_removeAttr(td,'data-tip','');
		vjs_removeAttr(td,'aria-label','');
		vjs_removeAttr(td,'data-stat');
		vjs_removeAttr(td,'data-append-csv');
		vjs_removeAttr(td,'data-over-header');
		
		if (suppress_inline_styles === 'stathead') { 
		    // also remove some other attributes here to save bytes
		    vjs_removeAttr(td,'csk'); 
		    // strip out all html and replace the dashes with &#8209; and spaces with &nbsp;
		    var new_text = td.textContent || td.innerText;
		    //new_text = new_text.replace(/ /g,'&nbsp;');
		    //new_text = new_text.replace(/-/g,'!');
		    //new_text = new_text.replace(/-/g,'&#8209;');
		    td.innerHTML = new_text;
		    
		    if (vjs_hasClass(td,'right')) { vjs_setAttr(td,'align','right'); }
		    else if (vjs_hasClass(td,'center')) { vjs_setAttr(td,'align','center'); }
		    else                                { vjs_setAttr(td,'align','left'); }
		}
		
		if ((suppress_inline_styles === 'basic') &&  (row < thead_rows) && vjs_hasClass(td,'sort_col')) { // in tHead and a sorter
                    vjs_setAttr(td,'style','background-color: #ffa; border: 1px solid #aaa; padding: 2px;'); 
                }
                else if ((suppress_inline_styles === 'basic') &&  (row < thead_rows)) { // in thead and not a sorter
                    vjs_setAttr(td,'style','background-color: #ddd; border: 1px solid #aaa; padding: 2px;'); 
                }
                else if ((suppress_inline_styles === 'basic') && vjs_hasClass(tr,'normal_text_total')) { // We normal text column
                    vjs_setAttr(td,'style','border: 1px solid #ccc; padding: 2px 3px 2px 2px; white-space: nowrap; ' + 
                                 'background-color: #ddd; font-weight: normal; font-size: 0.9em;');
                }
                else if ((suppress_inline_styles === 'basic') && vjs_hasClass(tr,'stat_total')) { // We have a ranker column.
                    vjs_setAttr(td,'style','border: 1px solid #ccc; padding: 2px 3px 2px 2px; white-space: nowrap; ' +
                                 'background-color: #ddd; font-weight: bold; font-size: 0.9em;');
                }
                else if ((suppress_inline_styles === 'basic')) {
                    vjs_setAttr(td,'style','border: 1px solid #ccc; padding: 2px 3px 2px 2px; white-space: nowrap; ');
                }
                else {
                    vjs_setAttr(td,'style','');
		    vjs_removeAttr(td,'style');
                }

                td.onmouseover = function () { return; };
                td.onmouseout = function () { return; };
                td.onclick = function () { return; };
                td.className = '';
		vjs_removeAttr(td,'onmouseover');
		vjs_removeAttr(td,'onmouseout');
		vjs_removeAttr(td,'onclick');
		vjs_removeAttr(td,'class');
            }
            
            tr.className = '';
            tr.id = '';
	    vjs_removeAttr(tr,'id');
	    vjs_removeAttr(tr,'class');

	    // delete rows that are hidden.
	    // also delete over header rows with no content
            try {
                 if ( vjs_hasClass(tr,'hidden') || tr.style.display === 'none' || (row < thead_rows && !has_content)) {
                     copy_table_dom.deleteRow(row);
                     row--;
                     max--;
                 }
            } catch(err) {}
	    
       }

        // Clean up divs and spans with id's as well.
        var others = copy_table_wrapper_dom.getElementsByTagName('span');
	vjs_forEach.call(others, function(other, i) {
            other.id = '';
	});
        ////////////////////////////////////////////////////////////////////////////////////
    }

    copy_table_wrapper_dom.style.display = 'none';

    
    // Get the html for the table and everything inside.
    var table_html =  copy_table_wrapper_dom.innerHTML;
    if (suppress_inline_styles === 'stathead') { 
	var captions = copy_table_dom.querySelectorAll('caption');
	vjs_forEach.call(captions, function(caption, i) {
	    vjs_removeChild(caption);
	});
	
	table_html =  copy_table_dom.outerHTML;
    }

    table_wrapper_dom.parentNode.removeChild(table_wrapper_dom.parentNode.lastChild);
    table_html =  table_html.replace(/^[\s\t]*\n$/, '');
  
    //get rid of carriage returns so we only have to work with line feeds
    table_html = table_html.replace(/\r/g, "");
    //remove all trailing spaces from each line
    while (/\s\n/.test(table_html)) {
        table_html = table_html.replace(/\s\n/g, "\n");
    }
    //remove all consecutive newline characters
    while (/\n\n/.test(table_html)) {
        table_html = table_html.replace(/\n\n/g, "\n");
    }
    // remove excessive whitespace
    table_html = table_html.replace(/>\s+</mg, "> <");
    return table_html;
}

/* *********************************************************************
# Usage       :   
# Purpose     :   
# Returns     :   
# Parameters  :   
# Throws      :  
# See Also    :  
# Comments    : 
********************************************************************** */
function _get_url_for_sharing (event,table_id) {

    sr_record_analytics_event('table-tool-share', 'get-url-for-sharing', 1);
    var table_dom =   document.getElementById(table_id);
    var txt_title = document.title + ": " + _get_section_heading_text(table_id);
    // var save_url = '//'.concat( _sr_SHARE_SITE_URL, '/tools/saveQuery.cgi');
    var save_url = (Modernizr.is_stathead) ? '//' + _sr_SHARE_SITE_URL + '/tools/stathead_saveQuery.cgi' : '//' + _sr_SHARE_SITE_URL + '/tools/saveQuery.cgi';

	var form_text = '<form id=share name=share method=post action="' + save_url + '">'
		+ '<h2>' + __sr_text_save_and_share_the_table + '</h2>'
		+ '<label  class="formlabel"  for="titler">' + __sr_text_title_of_your_report + ':</label>'
		+ '<input type=text name=titler id=titler size=60 maxlength=255 value="' + txt_title + '">'
		+ '<br><br><label class="formlabel" for="notes">' + __sr_text_note_on_your_report + ':</label>'
		+ '<textarea class="pre" name=notes id=notes cols=60 rows=5></textarea>'
		+ '<input type="hidden" name="lang" value="' + Modernizr.lang + '">'
		+ '<br>' + __sr_text_please_keep_it_clean
		+ '<p><input type=button onclick="_get_sharing_link(\'' + table_id + '\');" value="' + __sr_text_save_comments_and_report + '">'
		+ '<br>' + __sr_text_a_link_will_be_created
		+ '</form>'
	;

    sr_display_showPopup(event, event.target, form_text);
}

/* *********************************************************************
# Usage       :   
# Purpose     :   
# Returns     :   
# Parameters  :   
# Throws      :  
# See Also    :  
# Comments    : 
 _get_section_heading_text

 submit the table to our script and return the link to the data.
********************************************************************** */
function _get_section_heading_text (table_id) {

    var table = document.getElementById(table_id);

    // This is a hack due to F@#$@# IE not handling select properly.
    var tableWrapper = table;
    var tableHeading = tableWrapper.querySelector('.section_heading h2,.table_heading h2');
    while (!tableHeading && tableWrapper.parentNode) {
	tableWrapper = tableWrapper.parentNode;
	tableHeading = tableWrapper.querySelector('.section_heading h2,.table_heading h2');
    }
    
    if (!tableHeading) {
	return '';
    }
    
    return tableHeading.innerHTML;
}

/* *********************************************************************
# Usage       :   
# Purpose     :   
# Returns     :   
# Parameters  :   
# Throws      :  
# See Also    :  
# Comments    : 
 _get_sharing_link

 submit the table to our script and return the link to the data.
********************************************************************** */
function _get_sharing_link (table_id) {

    var url_share= (Modernizr.is_stathead)
		? '//' + _sr_SHARE_SITE_URL + '/tools/stathead_saveQuery.cgi'
		: '//' + _sr_SHARE_SITE_URL + '/tools/saveQuery.cgi'
	;

    var formShare = document.getElementById('share');
    var formParams =  vjs_serializeForm(formShare);

    // Add the tool used
    formParams = formParams + '&toolused=table_share';

    var table_html = _get_table_html(table_id, 'sr');

    // Add the report.
    if (table_html) {
	formParams = formParams + '&dataOut=' + encodeURIComponent(table_html);
    }
    else {
	formParams = formParams + '&dataOut=';
    }

    vjs_Ajax('POST',
	     url_share,
	     formParams,
	     function(data) {
		 var sr_popup_wrap = document.getElementById('modal-content');
		 if (sr_popup_wrap) {
		     sr_popup_wrap.innerHTML = data;
		 }
	     },
	     _default_error_message,
	     false,
	     false);
    
}
    
function _default_error_message () {

    var error_text = '<h2>' + __sr_text_we_are_sorry_failed + '</h2>';
    
    var modal_handle = document.getElementById('modal-container');
    // See if the modal is open
    if (modal_handle.style.visibility !== 'hidden') {
	var modal_content = document.getElementById('modal-content');
	modal_content.innerHTML = error_text;
	return false;
    }

    // if not we open the modal with our text
    sr_display_showPopup(null, null,error_text);
}

/* *********************************************************************
# Usage       :   
# Purpose     :   
# Returns     :   
# Parameters  :   
# Throws      :  
# See Also    :  
# Comments    : 
********************************************************************** */
function _get_credit_output(table_id) {
    var credit = document.getElementById('credit_' + table_id);
    if (credit) {
	var credit_output = credit.innerHTML;
	if (credit_output) {
	    credit_output.replace(/&amp;/ig,'&');
	}
	return credit_output;
    }
    return '';
}

/* *********************************************************************
# Usage       :   
# Purpose     :   
# Returns     :   
# Parameters  :   
# Throws      :  
# See Also    :  
# Comments    : 
********************************************************************** */
function sr_share_close_sharing (table_id)
{
    vjs_removeChild('commands_' + table_id);

    var table = document.getElementById(table_id);
    vjs_removeClass(table,'modifying');
    _remove_share_tips(table);

    for (var i = table.tHead.rows.length + 1, max = table.rows.length; i < max; i++) {
        // reinstate on onclick
	table.rows[i].onclick = table.rows[i].backclick;
    }
    
    // Close the dialog box as well.
    if (Modal)
	Modal.close({});
}

/* *********************************************************************
# Usage       :   
# Purpose     :   
# Returns     :   
# Parameters  :   
# Throws      :  
# See Also    :  
# Comments    : 
   sr_share_open_sharing
   bring up the controls to remove columns or rows and other controls
********************************************************************** */
function sr_share_open_sharing (table_id)
{
    var table =  document.getElementById(table_id);
    if (!table) return false;


    if (vjs_hasClass(table,'isolate')) {
	alert('The Modify and Share tool can not work when rows are isolated.');
	return false; 
    }


    vjs_addClass(table,'modifying');
    
    // try to wrap the table in a new div
    if (!_create_parent_div(table)) {
        return false;
    }

    // Check to see if there are drophovers to clear.
    var drop = document.querySelector('.drophover span,.drophover a');
    if (drop) {
	drop.click();
    }
    
    
    
        
    // Delete any hidden rows from the table and hide the show
    // partial/minors tooltips
    for (var row = table.rows.length - 1; row >= 0; row--) {
	var tr = table.rows[row];
	if ( vjs_hasClass(tr,'hidden') || tr.style.display === 'none') {
            table.deleteRow(row);
	}
    }

    vjs_removeChild(table_id + '_toggle_partial_table');
    vjs_removeChild(table_id + '_toggle_minors_table');

    // Add a toolbox of commands to manipulate the table.
    if ((!document.getElementById('commands_' + table_id))) {
        var commands_div = document.createElement('div');
        commands_div.id = 'commands_' + table_id;
        commands_div.className = 'share_commands';
        commands_div.innerHTML = _get_commands_div(table_id);
        table.parentNode.insertBefore(commands_div,table);
    }


    // make sure that we haven't already added delete images and controls to the table.
    var to_delete_tips = table.querySelectorAll('button.delete_this_tip, tr.delete_this_tip');

    if (to_delete_tips.length === 0) {
	_add_base_to_urls(table);
	_add_delete_tips_to_table(table);	
    }
        // add the credit line to the table.
    _append_sr_credit(table_id);


}

/* *********************************************************************
# Usage       :   
# Purpose     :   
# Returns     :   
# Parameters  :   
# Throws      :  
# See Also    :  
# Comments    : 
********************************************************************** */
function _add_delete_tips_to_table (table) {

    // Run through the columns and add arrow and x's to the header
    // cells
    var table_body_dom = table.tBodies[0];

    // insert a black row at the top.
    var new_row_dom_x = table_body_dom.insertRow(0);
    
    // grab the second row if possible, but take the first if we
    // have to.
    var body_row_dom = table_body_dom.rows[1].cells;
    if (!body_row_dom) {
	body_row_dom = table_body_dom.rows[0].cells;
    }

    
    //////////////////////////////////////////  Columns //////////////////////////////////
    // Run through the columns and add a new 
    // in each row
    ///////////////////////////////////////////////////////////////////////////////////
    
    new_row_dom_x.className = 'delete_this_tip';
    var columns_with_colspan = 0;
    for (var i = 0, len = body_row_dom.length; i < len; i++) {
        var colspan_value;
        if (body_row_dom[i].colSpan) {
            columns_with_colspan+= body_row_dom[i].colSpan;
            colspan_value = body_row_dom[i].colSpan;
        } 
        else {
            columns_with_colspan++;
            colspan_value = 1;
        }
        
        
        var new_cell = new_row_dom_x.insertCell(i);
        new_cell.colSpan= colspan_value;
        var button = document.createElement('button');
	vjs_setAttr(button,'type','button');
	button.className = 'sharing delete';
        button.onclick = function () { 
	    sr_record_analytics_event('table-tool-share', 'delete-table-columns', 1);
            _delete_table_column(table, this.parentNode.cellIndex); 
        };
        new_cell.appendChild(button);
        
        if (i < body_row_dom.length - 1) {
            button = document.createElement('button');
	    vjs_setAttr(button,'type','button');
	    button.className = 'sharing right';
            button.onclick = function () { 
		sr_record_analytics_event('table-tool-share', 'delete-table-rest-columns', 1);
                _delete_table_rest_columns(table, this.parentNode.cellIndex); 
            };
            new_cell.appendChild(button);
        }
    }

    //////////////////////////////////////////  Rows //////////////////////////////////
    // Run through the rows and add a trio of spans to the first cell
    // in each row
    ///////////////////////////////////////////////////////////////////////////////////
    var hr = table.tHead.rows.length;
    var fr = table.tFoot ? table.tFoot.rows.length: 0;
    var lr = table.rows.length;
    for (i = hr + 1; i < lr; i++) {
        var first_row  = table.rows[i];
        var first_cell = first_row.cells[0];
	
        // Delete the onclicks from these rows if they exist.
	first_row.backclick = first_row.onclick;
        first_row.onclick = function () { return; };
        
        if (i < lr - 1) {
            
            // We do these in reverse order of the other entries because
            // we want to prepend these values
            var button = document.createElement('button');
	    vjs_setAttr(button,'type','button');
	    button.className = 'sharing down delete_this_tip';
            button.onclick = function () { 
		sr_record_analytics_event('table-tool-share', 'delete-table-column', 1);
		_delete_table_column(table, this.parentNode.cellIndex); 
            };
	    
            if (table.tFoot && (i >= lr - fr  - 1)) {
                button.onclick = function () { 
		    sr_record_analytics_event('table-tool-share', 'delete-table-rows', 1);
                    _delete_table_rest_rows(table, this.parentNode.parentNode.rowIndex, 1); 
                };
            }
            else {
                button.onclick = function () { 
		    sr_record_analytics_event('table-tool-share', 'delete-table-rest-rows', 1);
                    _delete_table_rest_rows(table, this.parentNode.parentNode.rowIndex, 0); 
                };
            }
            first_cell.insertBefore(button,first_cell.firstChild);
        }
        
        button = document.createElement('button');
	vjs_setAttr(button,'type','button');
        button.className= 'sharing delete delete_this_tip';
        button.onclick = function () { 
	    sr_record_analytics_event('table-tool-share', 'delete-table-row', 1);
            _delete_table_row(table, this.parentNode.parentNode.rowIndex); 
        };
        first_cell.insertBefore(button,first_cell.firstChild);
    }
}

/* *********************************************************************
# Usage       :   
# Purpose     :   
# Returns     :   
# Parameters  :   
# Throws      :  
# See Also    :  
# Comments    : 
   _get_commands_div
   the innerHTML for the commands toolbox.
********************************************************************** */
function _get_commands_div (table_id) {
    var output = '';

    output = output 
		+ '<div class="closer" aria-label="close the sharing tool section" role="button" onclick="sr_share_close_sharing(\'' + table_id + '\');"></div> '
		+ '<div>'
		+ __sr_text_click_to_delete_a_column
		+ __sr_text_click_to_delete_trailing
		+ '</div>'
		+ '<div><em><strong>' + __sr_text_share_please_cite + '</em></strong><br /></div>'
		+ '<div>' + __sr_text_share_or_get_code + '</div>'
		+ '<div>'
		+ '<button type="button" class="tooltip" onclick="_view_table_html(event, \'' + table_id + '\',\'basic\');">html &lt;table&gt;</button> / '
		+ '<button type="button" class="tooltip" onclick="_get_url_for_sharing(event,\'' + table_id + '\');">' + __sr_text_url_for_sharing + '</button> / '
		+ '<button type="button" class="tooltip" onclick="_view_reddit_output(event, \'' + table_id + '\');">|REDDIT|</button> / '
		+ 'bbcode '
		+ '<button type="button" class="tooltip" onclick="_view_bbcode_output(event, \'' + table_id + '\');">[table]</button> or '
		+ '<button type="button" class="tooltip" onclick="_view_pre_output(event, \''    + table_id + '\', \'code_wrap\');">[code]</button> / '
		+ '<button type="button" class="tooltip" onclick="_view_pre_output(event, \''    + table_id + '\', \'html\');"><tt>' + __sr_text_pre_formatted_text + '</tt></button> / '
		+ '<button type="button" class="tooltip" onclick="_view_csv_output(event, \''    + table_id + '\');">' + __sr_text_comma_separated + '</button> / '
		+ '<button type="button" class="tooltip" onclick="_view_wiki_output(event, \''   + table_id + '\',\'wiki_link\');">[[wiki]]</button> '
		+ '</div><div> '
		+ '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '
		+ '<button type="button" class="tooltip" onclick="sr_display_showPopup(event, this, \'//' + _sr_SHARE_SITE_URL + '/inc/shareit' 
			+ ((Modernizr.lang && Modernizr.lang !== 'en') ? '-'+Modernizr.lang : '.html_f\');">') + __sr_text_what_are_these + '</button> / '
		+ '<button type="button" class="tooltip" onClick="window.location.reload()">' + __sr_text_mess_up_click_to_reload + '</button></div> '
    ;
/*		+ '<button type="button" class="tooltip" onclick="_get_iframe_link(event, \''    + table_id + '\');">&lt;iframe&gt;</button> / '  */
    return output;
}

/* *********************************************************************
# Usage       :   
# Purpose     :   
# Returns     :   
# Parameters  :   
# Throws      :  
# See Also    :  
# Comments    : 
   _append_sr_credit

   Add a link to the s-r site providing this and to the original
   table, and the date.
********************************************************************** */
function _append_sr_credit (table_id)
{
    if (!document.getElementById('credit_' + table_id)) {
        var table =  document.getElementById(table_id);
        
        var currentTime = new Date();
        var month = currentTime.getMonth() + 1;
        var day = currentTime.getDate();
        var year = currentTime.getFullYear();
        var date_string = 'Generated ' + month + "/" + day + "/" + year;
        
        
        var new_div = document.createElement('div');
        new_div.id = 'credit_' + table_id;
        new_div.style.fontSize = '0.83em';
        var search_term = '?sr';  // default to a ?
        if (window.location.search.length) {
            search_term = window.location.search;
        }


        if (table_id === "ajax_result_table"  || Modernizr.is_stathead) {
            new_div.innerHTML = __sr_text_provided_by 
				+ ' <a href="'
				+ window.location.protocol
				+ sr_SHARING_PAGE
				+ '?utm_source=direct&utm_medium=Share&utm_campaign=ShareTool">'
				+ sr_SITE_NAME
				+ '</a>: '
				+ '<a href="'
				+ window.location.protocol
				+ '//'
				+ window.location.host
				+ window.location.pathname
				+ '?utm_source=direct&utm_medium=Share&utm_campaign=ShareTool">'
				+ __sr_text_view_stathead_tool
				+ '</a>'
				+ '<br>'
				+ date_string
				+ '.'
			;
        }
        else {
            new_div.innerHTML = __sr_text_provided_by 
				+ ' <a href="'
				+ window.location.protocol
				+ sr_SHARING_PAGE
				+ '?utm_source=direct&utm_medium=Share&utm_campaign=ShareTool">'
				+ sr_SITE_NAME
				+ '</a>: ' 
				+ '<a href="'
				+ window.location.protocol
				+ '//'
				+ window.location.host
				+ window.location.pathname
				+ search_term
				+ '&utm_source=direct&utm_medium=Share&utm_campaign=ShareTool#'
				+ table_id
				+ '">'
				+ __sr_text_view_original_table
				+ '</a>'
				+ '<br>'
				+ date_string
				+ '.'
			;
        }

        new_div.className = "sr_share";
            
        
        table.appendChild(new_div);
        table.parentNode.insertBefore(new_div,table.nextSibling);
    }
}

/* *********************************************************************
# Usage       :   
# Purpose     :   
# Returns     :   
# Parameters  :   
# Throws      :  
# See Also    :  
# Comments    : 
   _delete_table_row
   This is very easy as there is a deleteRow(idx) function already.
********************************************************************** */
function _delete_table_row (table, int_row_idx)
{


    // Get the table_dom
    if (table.rows.length > int_row_idx) {
        table.deleteRow(int_row_idx);
    }
}

/* *********************************************************************
# Usage       :   
# Purpose     :   
# Returns     :   
# Parameters  :   
# Throws      :  
# See Also    :  
# Comments    : 
   _delete_table_rest_rows

   deletes all rows from row int_row_idx to the end of the tbody.
********************************************************************** */
function _delete_table_rest_rows (table, int_row_idx, is_tfoot)
{

    // Get the table_dom
    if (is_tfoot) {
        // I believe that we have only a single body in all tables.
        var table_foot_dom = table.tFoot;
        
        // Step through the rows.  We only want to delete to the end of
        // the body, so we delete until we get to the end of the body and
        // the number of rows in the header.  We delete bottom to top or
        // we have an issue with the row_idx's changing for the rows.
        // This way we can be a bit more consistent with standards.
        for (var i =  table_foot_dom.rows.length + table.tHead.rows.length  + table.tBodies[0].rows.length - 1;
             i >= int_row_idx + 1;
             i--) {
            _delete_table_row(table, i);
        }
    }
    else {

        // I believe that we have only a single body in all tables.
        var table_body_dom = table.tBodies[0];
        
        // Step through the rows.  We only want to delete to the end of
        // the body, so we delete until we get to the end of the body and
        // the number of rows in the header.  We delete bottom to top or
        // we have an issue with the row_idx's changing for the rows.
        // This way we can be a bit more consistent with standards.
        for (var i =  table_body_dom.rows.length + table.tHead.rows.length - 1;
             i >= int_row_idx + 1;
             i--) {
            _delete_table_row(table, i);
        }
    }
}

/* *********************************************************************
# Usage       :   
# Purpose     :   
# Returns     :   
# Parameters  :   
# Throws      :  
# See Also    :  
# Comments    : 
   _delete_table_column
    // replace any colspans with # of cells equal to the colspan.
    // a couple of notes
    // 1) we trim the length of the overheader to 4 chars
    // 2) we copy the over cell the same # of times as colspan - 1
    // 3) we reset the colspan to 1
 ********************************************************************** */
function _delete_table_column (table, int_col_idx, do_delete_rest)
{
    var table_row;
    console.log('   ### delete_table_column');

    // replace any colspans with # of cells equal to the colspan.
    // a couple of notes
    // 1) we trim the length of the overheader to 4 chars
    // 2) we copy the over cell the same # of times as colspan - 1
    // 3) we reset the colspan to 1
    var colspans = table.querySelectorAll('th[colspan],td[colspan]');
    vjs_forEach.call(colspans, function(cell, i) {
	if (vjs_getAttr(cell,'colspan') > 1) {

	    var colspan = vjs_getAttr(cell,'colspan');
	    // reset the colspan.
	    vjs_setAttr(cell,'colspan',1);
	    cell.innerHTML = cell.textContent.substring(0,4) || cell.innerText.substring(0,4);
	    var clone = cell.cloneNode(true);

	    // NOTE: that if we uncomment this the inserted extra over-header cells will be blank
	    // I can see either case being the best option.  With them blanked we remove a lot of
	    // redundant text.  Without them blanked.  We always know what the over header was for the column.
	    // clone.innerHTML = '';

	    // we just add the cell's innerHTML after the cell entry
	    for (var i = 0; i < colspan - 1; i++) {
		cell.insertAdjacentHTML('afterend', clone.outerHTML);
	    }
	}
    });

    
    // todo: handle overheaders and colspans appropriately.
    for (var i = 0, len = table.rows.length; i < len; i++) {
        table_row = table.rows[i];

        // To handle colspans, I believe we will just need to step
        // through the cells in the row and when we get a colspan > 1
        // we either adjust the colspan or adjust int_col_idx.
        var row_cells = table_row.cells;
        var cell_count = 0;
        var deleted_cell = 0;

	// loop through all of the cells in this row.
	// the complications below occur when we have cells with colspan > 1.  We then to have
	// maintain state and figure out how ot reduce colspans for the entries.
	for (var j = 0, jlen = row_cells.length; (j < jlen) && (!deleted_cell); j++) {
            var cell_colspan = row_cells[j].colSpan;

	    if (((cell_count + cell_colspan) > int_col_idx) &&
		(cell_count < int_col_idx) && 
                (cell_colspan > 1)) {

		// reduce the colspan.
                row_cells[j].colSpan--;
                deleted_cell = 1;
		
                // We increment j here because we have reduced a
                // colspan rather than deleting a cell.  If we look
                // below we don't want to end of deleting the entire
                // cell, for do_delete_rest, just the next cell and
                // everything after it.
                j++; 
            }
            else if ((cell_count + cell_colspan) > int_col_idx) {
                table_row.deleteCell(j);
                deleted_cell = 1;
            }

            cell_count +=  cell_colspan;

            // If we want to delete allcolumns to the right of the idx
            // sent, just run through a while loop to do so
            if (do_delete_rest && deleted_cell) {
                while (j < row_cells.length) {
                    table_row.deleteCell(j);
                }
            }
        }
    }
}

/* *********************************************************************
# Usage       :   
# Purpose     :   
# Returns     :   
# Parameters  :   
# Throws      :  
# See Also    :  
# Comments    : 
   _delete_table_rest_columns
   This is going to look a lot like _delete_table_column, so we just
   call that with a boolean
********************************************************************** */
function _delete_table_rest_columns (table, int_col_idx)
{
    // Last variable is aboolean to delete the rest of the columns
    // after this one
    _delete_table_column(table, int_col_idx + 1, 1);
}


/* *********************************************************************
# Usage       :   This adds a wrapper div#wrap_table_id layer between div#div_table_id and table#table_id
# Purpose     :   
# Returns     :   
# Parameters  :   
# Throws      :  
# See Also    :  
# Comments    : 
   _create_parent_div

   puts a div with wrap_table_id as an id around the table in question.
   
********************************************************************** */
function _create_parent_div (table)
{
    if (!table) {
        alert(__sr_text_data_not_shareable_format);
        return false;
    }
    var table_id = table.id;
    
    // Make sure the wrapper doesn't exist yet.
    if (!document.getElementById('wrap_' + table_id)) {
        
        var old_table_wrapper = table.parentNode;
        var new_table_wrapper = document.createElement('div');
        new_table_wrapper.id = 'wrap_' + table_id;
        old_table_wrapper.insertBefore(new_table_wrapper, table);
        new_table_wrapper.appendChild(table);
    }
    return true;
}


// Update the tooltip with the new data.
/* *********************************************************************
# Usage       :   
# Purpose     :   
# Returns     :   
# Parameters  :   
# Throws      :  
# See Also    :  
# Comments    : 
********************************************************************** */
function _set_textarea(data) {            
    var ta = document.getElementById('ta_table_out');
    vjs_removeClass(ta, 'inactive');
    ta.value = data;
    ta.focus();
}


/* ***********************************************************
   for all of the relative links in this table reset to a fully defined link.
   ********************************************************* */
/* *********************************************************************
# Usage       :   
# Purpose     :   
# Returns     :   
# Parameters  :   
# Throws      :  
# See Also    :  
# Comments    : 
********************************************************************** */
function _add_base_to_urls(table) {
    var regex = /^(https?|ftp):\/\//;

    var hrefs = table.getElementsByTagName('a');
    
    for (var i = 0, len = hrefs.length; i < len; ++i) {
        var href = hrefs[i];
        var hrefValue = vjs_getAttr(href,'href');

		// remove the trailing prefix from the url for cfb and cbb
		var base_url = _sr_SHARE_SITE_URL.replace(/\/.*/,'');
	
		if (hrefValue) {
			if (!regex.test(hrefValue)) {
				//to handle double slash  collision
				hrefValue = window.location.protocol + '//' + base_url + hrefValue.replace("//","/");
			}
	    
			// add our tracking code to the url string.
			var matchQ = /\?/;
			var matchH = /#/;
			if (hrefValue.match(matchQ)) {
				hrefValue = hrefValue.replace(matchQ,'?utm_source=direct&utm_medium=Share&utm_campaign=ShareTool&');
			}
			else if (hrefValue.match(matchH)) {
				hrefValue = hrefValue.replace(matchH,'?utm_source=direct&utm_medium=Share&utm_campaign=ShareTool#');
			}
			else {
				hrefValue = hrefValue + '?utm_source=direct&utm_medium=Share&utm_campaign=ShareTool';
			}
			vjs_setAttr(href,'href',hrefValue);
        }
    }
}
/* *********************************************************************
# Usage       :   
# Purpose     :   
# Returns     :   
# Parameters  :   
# Throws      :  
# See Also    :  
# Comments    : 
********************************************************************** */
/* SF: commenting this out because of security concerns
   https://gitlab.com/sports-reference/devops1/-/issues/267#note_1356004248
/* 
function _get_iframe_link (event, table_id) {
    var url_share= (Modernizr.is_stathead)
		? '//' + _sr_SHARE_SITE_URL + '/tools/stathead_saveQuery.cgi'
		: '//' + _sr_SHARE_SITE_URL + '/tools/saveQuery.cgi'
	;

    sr_record_analytics_event('table-tool-share', 'get-iframe-link', 1);
    
    // Get the scrollWidth and scrollHeight of the stats on the page.
    
    // Add the tool used   
    var table_dom =   document.getElementById(table_id);
    var table_html = _get_table_html(table_id, 'basic');

    var iframe_width = Math.round(1.20* table_dom.offsetWidth);
    var iframe_height = Math.round(1.45* table_dom.offsetHeight);

    var formParams = 'toolused=table_share&output=iframe&iframe_height=' + iframe_height + '&iframe_width=' + iframe_width;
    
	// Add the report.
	if (table_html) {
		formParams = formParams + '&dataOut=' + encodeURIComponent(table_html);
	}
	else {
		formParams = formParams + '&dataOut=';
	}
    
    // make the request of the server.   
    vjs_Ajax('POST',
	     url_share,
	     formParams,
	     function(data) {
		 sr_display_showPopup(event, event.target, data);
	     },
	     _default_error_message,
	     false,
	     false);
    
}
*/

/* ******************************************************************
   Convert a table into csv.  This is fairly straightforward, except
   in cases where there are colspans and rowspans.
*/
/* *********************************************************************
# Usage       :   
# Purpose     :   
# Returns     :   
# Parameters  :   
# Throws      :  
# See Also    :  
# Comments    : 
********************************************************************** */
function _view_csv_output(event, table_id) {
    _remove_share_tips(document.getElementById(table_id));
    sr_record_analytics_event('table-tool-share', 'view-csv-output', 1);
    
    var csv_output = '--- ' + __sr_text_share_cite_plaintext + "\n\n\n ";
    csv_output = csv_output + get_csv_output(table_id,false,true,false);

    csv_output = csv_output.replace(/<!-- ALREADYCSV -->/ig,'').concat( "\n\n\n");

    var credit = document.getElementById('credit_' + table_id);
    csv_output = csv_output + credit.innerHTML;
    
    var popup_text = '<p>' + __sr_text_ctrl_a + '<p><form id="fa_table_out"><textarea class="pre" id="ta_table_out" rows=10 cols=100 wrap=off>' + csv_output + '</textarea></form>';
    var table_dom =  document.getElementById(table_id);
    var is_modal_open = sr_display_showPopup(event, event.target, popup_text);
    if (is_modal_open) {
	var ta = document.getElementById('ta_table_out');
	vjs_removeClass(ta, 'inactive');
	ta.focus();
    }
}

/* ******************************************************************
   Convert a table into csv and then send it through our csv to pre tool.
*/
/* *********************************************************************
# Usage       :   
# Purpose     :   
# Returns     :   
# Parameters  :   
# Throws      :  
# See Also    :  
# Comments    : 
********************************************************************** */
function _view_pre_output(event, table_id, credit_type) {
	sr_record_analytics_event('table-tool-share', 'view-pre-output', 1);

	_remove_share_tips(document.getElementById(table_id));
	var credit_options = __sr_text_show_credit_links_in + ' ';
	if (credit_type === 'html') {
		credit_options +=  
		'<strong>html</strong> / '
		'<button class="tooltip" onclick="_view_pre_output(event,\'' + table_id + '\',\'bbcode\')">bbcode</button> / ' +
		'<button class="tooltip" onclick="_view_pre_output(event,\'' + table_id +  '\',\'sb\')">SBNation</button> / ' +
		'<button class="tooltip" onclick="_view_pre_output(event,\'' + table_id + '\',\'code_wrap\')">[code] wrap</button>  ';
	}
	else if (credit_type === 'bbcode') {
		credit_options +=  
		'<button class="tooltip" onclick="_view_pre_output(event,\'' + table_id + '\',\'html\')">html</button> / ' +
		'<strong>bbcode</strong> / ' +
		'<button class="tooltip" onclick="_view_pre_output(event,\'' + table_id + '\',\'sb\')">SBNation</button> / ' +
		'<button class="tooltip" onclick="_view_pre_output(event,\'' + table_id + '\',\'code_wrap\')">[code] wrap</button>  ';
	}
	else if (credit_type === 'sb') {
		credit_options +=  
		'<button class="tooltip" onclick="_view_pre_output(event,\'' + table_id + '\',\'html\')">html</button> / ' +
		'<button class="tooltip" onclick="_view_pre_output(event,\'' + table_id + '\',\'bbcode\')">bbcode</button> / ' +
		'<strong>SBNation</strong> / ' +
		'<button class="tooltip" onclick="_view_pre_output(event,\'' + table_id + '\',\'code_wrap\')">[code] wrap</button>  ';

	}
	else if (credit_type === 'code_wrap') {
		credit_options +=  
		'<button class="tooltip" onclick="_view_pre_output(event,\'' + table_id + '\',\'html\')">html</button> / ' +
		'<button class="tooltip" onclick="_view_pre_output(event,\'' + table_id + '\',\'bbcode\')">bbcode</button> / ' +
		'<button class="tooltip" onclick="_view_pre_output(event,\'' + table_id + '\',\'sb\')">SBNation</button> / ' +
		'<strong>[code] wrap</strong>  ';
	}
	else {
		credit_options +=  
		'<button class="tooltip" onclick="_view_pre_output(event,\'' + table_id + '\',\'html\')">html</button> / ' +
		'<button class="tooltip" onclick="_view_pre_output(event,\'' + table_id + '\',\'bbcode\')">bbcode</button> / ' +
		'<button class="tooltip" onclick="_view_pre_output(event,\'' + table_id + '\',\'sb\')">SBNation</button> / ' +
		'<button class="tooltip" onclick="_view_pre_output(event,\'' + table_id + '\',\'code_wrap\')">[code] wrap</button>  ';
	}

    
    // Create the popup with an empty textarea.
    var popup_text = '<p>' + __sr_text_ctrl_a + credit_options + '<p><form id="fa_table_out"><textarea class="pre" id="ta_table_out" rows=10 cols=100 wrap=off></textarea></form>';

    // Add in different credit types:
    
    var table_dom =  document.getElementById(table_id);

    var is_modal_open = sr_display_showPopup(event, event.target, popup_text);
    if (is_modal_open) {
	var ta = document.getElementById('ta_table_out');
	vjs_removeClass(ta, 'inactive');
	vjs_addClass(ta, 'pre');
	ta.focus();

	// Get the data to put into the text area.
	var csv_output = get_csv_output(table_id,true,true,true);
	if (csv_output) {
	    csv_output = csv_output.replace(/<!-- ALREADYCSV -->/ig,'') + "\n\n\n";
	}
	
	var credit_output = _get_credit_output(table_id);
        
	var url = '//' + _sr_SHARE_SITE_URL + '/tools/csv2pre.cgi';
	var params = 'ajax=0&csv=' + encodeURIComponent(csv_output) + '&credit=' + encodeURIComponent(credit_output) + '&credit_type=' + credit_type;
	
	// make the request of the server.   
	vjs_Ajax('POST',
		 url,
		 params,
		 _set_textarea,
		 _default_error_message,
		 false,
		 false);
    }
}



/* ******************************************************************
   Convert a table into csv and then send it through our csv to pre
   tool, but output it as bbcode
*/
/* *********************************************************************
# Usage       :   
# Purpose     :   
# Returns     :   
# Parameters  :   
# Throws      :  
# See Also    :  
# Comments    : 
********************************************************************** */
function _view_bbcode_output(event, table_id) {
    sr_record_analytics_event('table-tool-share', 'view-bbcode-output', 1);

    _remove_share_tips(document.getElementById(table_id));

    // Create the popup with an empty textarea.
    var popup_text = '<p>' + __sr_text_ctrl_a + '<p><form id="fa_table_out"><textarea class="pre" id="ta_table_out" rows=10 cols=100 wrap=off></textarea></form>';

    // Add in different credit types:
    
    var table_dom =  document.getElementById(table_id);
    var is_modal_open = sr_display_showPopup(event, event.target, popup_text);
    if (is_modal_open) {
	var ta = document.getElementById('ta_table_out');
	vjs_removeClass(ta, 'inactive');
	ta.focus();
	
	// Get the data to put into the text area.
	var csv_output = get_csv_output(table_id,true,true,true);
	csv_output = csv_output.replace(/<!-- ALREADYCSV -->/ig,'') + "\n\n\n";
	
	var credit_output = _get_credit_output(table_id);
        
	var url = '//' + _sr_SHARE_SITE_URL + '/tools/csv2pre.cgi';
	var params = 'ajax=0&bbcode=1&csv=' + encodeURIComponent(csv_output) + '&credit=' + encodeURIComponent(credit_output) + '&credit_type=bbcode';
	
	vjs_Ajax('POST',
		 url,
		 params,
		 _set_textarea,
		 _default_error_message,
		 false,
		 false);
    }
}

/* ******************************************************************
   Convert a table into csv and then send it through our csv to pre
   tool, but output it as wiki code
*/
/* *********************************************************************
# Usage       :   
# Purpose     :   
# Returns     :   
# Parameters  :   
# Throws      :  
# See Also    :  
# Comments    : 
********************************************************************** */
function _view_wiki_output(event, table_id, credit_type) {

	_remove_share_tips(document.getElementById(table_id));
	sr_record_analytics_event('table-tool-share', 'view-wiki-output', 1);

	var credit_options = __sr_text_show_credit_links_as + ' ';
	if (credit_type === 'wiki_link') {
		credit_options += 
		'<strong>link</strong> / ' +
		'<button class="tooltip" onclick="_view_wiki_output(event,\'' + table_id + '\',\'wiki_ref\')">&lt;ref&gt;</button> ';
	}
	else if (credit_type === 'wiki_ref') {
		credit_options += 
		'<button class="tooltip" onclick="_view_wiki_output(event,\'' + table_id + '\',\'wiki_link\')">link</button> / ' +
		'<strong>&lt;ref&gt;</strong>';
	}
	else {
		credit_options += 
		'<button class="tooltip" onclick="_view_wiki_output(event,\'' + table_id + '\',\'wiki_link\')">link</button> / ' +
		'<button class="tooltip" onclick="_view_wiki_output(event,\'' + table_id + '\',\'wiki_ref\')">&lt;ref&gt;</button> ';
	}
    
    // Create the popup with an empty textarea.
    var popup_text = '<p>' + __sr_text_ctrl_a + credit_options +
        '<p><form id="fa_table_out"><textarea class="pre" id="ta_table_out" rows=10 cols=100 wrap=off></textarea></form>';

    // Add in different credit types:
    
    var table_dom =  document.getElementById(table_id);
    var is_modal_open = sr_display_showPopup(event, event.target, popup_text);
    if (is_modal_open) {
	var ta = document.getElementById('ta_table_out');
	ta.focus();
	
	// Get the data to put into the text area.
	var csv_output = get_csv_output(table_id,true,true,true);
	csv_output = csv_output.replace(/<!-- ALREADYCSV -->/ig,'') + "\n\n\n";
	
	var credit_output = _get_credit_output(table_id);
        
	var url = '//' + _sr_SHARE_SITE_URL + '/tools/csv2pre.cgi';
	var params = 'ajax=0&wiki=1&csv=' + encodeURIComponent(csv_output) 
		+ '&credit=' + encodeURIComponent(credit_output) 
		+ '&credit_title=' + encodeURIComponent(document.title) 
		+ '&credit_type=' + credit_type
	;
	
	vjs_Ajax('POST',
		 url,
		 params,
		 _set_textarea,
		 _default_error_message,
		 false,
		 false);
    }
}

/* *********************************************************************
# Usage       :   
# Purpose     :   
# Returns     :   
# Parameters  :   
# Throws      :  
# See Also    :  
# Comments    : 
   Convert a table into csv and then send it through our csv to pre
   tool, but output it as reddit table code
********************************************************************** */
function _view_reddit_output(event, table_id) {

    _remove_share_tips(document.getElementById(table_id));
    sr_record_analytics_event('table-tool-share', 'view-reddit-output', 1);
    
    // Create the popup with an empty textarea.
    var popup_text = '<p>' + __sr_text_ctrl_a + '<p><form id="fa_table_out"><textarea class="pre" id="ta_table_out" rows=10 cols=100 wrap=off></textarea></form>';

    // Add in different credit types:
    
    var table_dom =  document.getElementById(table_id);
    var is_modal_open = sr_display_showPopup(event, event.target, popup_text);
    if (is_modal_open) {
	var ta = document.getElementById('ta_table_out');
	ta.focus();

	// Get the data to put into the text area.
        var csv_output = get_csv_output(table_id,true,true,true,true);
	csv_output = csv_output.replace(/<!-- ALREADYCSV -->/ig,'') + "\n\n\n";
	
	var credit_output = _get_credit_output(table_id);
        
	var url = '//' + _sr_SHARE_SITE_URL + '/tools/csv2pre.cgi';
	var params = 'ajax=0&reddit=1&csv=' + encodeURIComponent(csv_output)
		+ '&credit=' + encodeURIComponent(credit_output)
		+ '&credit_type=reddit' 
		+ '&credit_title=' +  encodeURIComponent(document.title)
	;
	
	vjs_Ajax('POST',
		 url,
		 params,
		 _set_textarea,
		 _default_error_message,
		 false,
		 false);
    }
}


/* *********************************************************************
   # Usage       :   sr_share_makeTinyURL()
   # Purpose     :   gets a tiny url for the search requested.
   # Returns     :   a dialog box
   # Parameters  :   elemUserClicked is the clicked element, scripturl is the set of params for this script.
   # Throws      :
   # See Also    :
   # Comments    :   used to be makeTinyURL
   ********************************************************************** */
function makeTinyURL(event, elemUserClicked, scriptURL) {
    event = event || window.event;
    sr_share_makeTinyURL(event, elemUserClicked, scriptURL);
}

function sr_share_makeTinyURL(event, elemUserClicked, scriptURL) {
    var url = '//' + _sr_SHARE_SITE_URL + "/tools/make_tiny_url.cgi";
    if (Modernizr.is_stathead && sr_SITE_URL !== 'fbref.com') {
		url = '//' + _sr_SHARE_SITE_URL + "/tools/stathead_tiny_url.cgi";
    }
	if (typeof sr_TINY_URL === "string") {
		url = sr_TINY_URL;
	}
    
    // var params  = "url=" + encodeURIComponent(scriptURL);
    var params  = "url=" + encodeURIComponent(scriptURL) + '&lang=' + Modernizr.lang;
    sr_display_showPopup(event, elemUserClicked, url + '?' + params, [10,10]);
    //getTooltipData(url, params);
}


/* SF: this function is called via a bookmarklet and pulls the
   relevant html from the div#info element, re-formats it a bit and
   then copies it to the clipboard.

   This is used by marketing to create the evergreen content blog
   content for each player.
*/ 
function _sr_copy_page_info_to_clipboard() {
      var button = document.getElementById('meta_more_button');
      if (button) { button.click(); }
      var player_div = document.getElementById('info');
      var altTxt = player_div.querySelector('#bling-alt-text');
      var ascript = player_div.getElementsByTagName('script')[0];
      var advert = player_div.querySelector('.adblock.ad300');
      if (altTxt) { player_div.removeChild(altTxt); }
      if (advert) { player_div.removeChild(advert); }
      if (ascript) { ascript.remove(); }

      // Add a link to the player in the h1 and convert to an h2
      var header_span = player_div.querySelector("#meta h1 span");
      if (header_span) {
        var a = document.createElement('a');
        var linkText = document.createTextNode(header_span.innerText);
        a.appendChild(linkText);
        a.href = window.location.href;
        header_span.innerHTML = a.outerHTML;
      }
      var header = player_div.querySelector("#meta h1");
      sr_utilities_change_tag(header, 'h2');

      // All relative links get domain added to url
      var links = player_div.querySelectorAll("a[href^='/']"), i, links_len = links.length;

      // this a bit hacky, but it causes the urls to include the domain names and not just ="/friv/...."
      for (i = 0; i < links_len; i++) {
           links[i].href = links[i].href;
      }

      // remove all data-tips from the tags, may be confusing wordpress
      var data_tips = player_div.querySelectorAll("[data-tip]"), tips_len = data_tips.length;

      // this a bit hacky, but it causes the urls to include the domain names and not just ="/friv/...."
      for (i = 0; i < tips_len; i++) {
           data_tips[i].removeAttribute('data-tip');
      }

     navigator.clipboard.writeText(player_div.outerHTML).then(() => alert("copied player header text to clipboard."));
}

/* ### FILE:sr.mod.statsTables.js    */
/* *********************************************************************
   # Usage       :   sr_st_construct_data_grid_features
   # Purpose     :   given a div.data_grid##id it builds out our special features
   # Returns     :   nothing
   # Parameters  :   id, is_setup (true if initial page setup, meaning we don't bother with tooltips then)
   # Throws      :
   # See Also    :

   # Comments :   
 
   ********************************************************************** */
var sr_append_csv_string = '&&';

function sr_st_construct_data_grid_features(id, is_setup) {
    // make sure we have an id here.
    if (!id) { return false; }

    console.log('   ### running sr_data_grid_features on: ' + id);
    var data_grid = document.getElementById(id);

    // in some cases we have .data_grid.footer and we want to ignore those.
    if (!data_grid || vjs_hasAttr(data_grid, 'data-no-overall-control') || vjs_hasClass(data_grid, 'footer')) {
        return false;
    }

    // get the parent element.
    var grid_wrapper = data_grid.parentNode;
    var grid_header = grid_wrapper.querySelector('.section_heading_text > ul');

    var entry_type = vjs_getAttr(data_grid, 'data-entry-type') || '[[SET entry_type in template]]';
    //console.log('   entry_type:'.concat(entry_type));
    var grid_control_li = document.createElement('LI');
    var grid_control = document.createElement('BUTTON');
    vjs_addClass(grid_control, 'tooltip');
    grid_control.innerHTML = __sr_text_expand_all + ' ' + entry_type;
    grid_control.is_open = 0;

    grid_control.onclick = function() {
        var opening_or_closing = (grid_control.is_open > 0) ?
            'closing' :
            'opening';
        //console.log('   o_or_c:',opening_or_closing);
        grid_control.is_open = (opening_or_closing === 'opening' ?
            1 :
            0);


        var grids = data_grid.querySelectorAll('.data_grid_box');
        vjs_forEach.call(grids, function(grid, i) {
            if (opening_or_closing === 'opening') {
                vjs_addClass(grid, 'show_all');
            } else if (opening_or_closing === 'closing') {
                vjs_removeClass(grid, 'show_all');
            }
        });

        grid_control.innerHTML = (opening_or_closing === 'opening') ?
            __sr_text_minimize_all + ' ' + entry_type :
            __sr_text_expand_all + ' ' + entry_type;

        sr_record_analytics_event('grid_control_click', sr_record_directory(), grid_control.id);
    };
    if (grid_control_li) {
        grid_control_li.appendChild(grid_control);
    }
    if (grid_header) {
        grid_header.appendChild(grid_control_li);
    }
    return (true);
}
/* *********************************************************************
 # Usage       :   sr_st_construct_stats_table_features
 # Purpose     :   given a table.stats_table#id it builds out our special features
 # Returns     :   nothing
 # Parameters  :   id, is_setup (true if initial page setup, meaning we don't bother with tooltips then)
 # Throws      :
 # See Also    :
 
 # Comments :   
 
   ********************************************************************** */
function sr_st_construct_stats_table_features(id, is_setup) {

	var tables;
    if (typeof id == 'string') {
        tables = document.querySelectorAll('#' + id);
    } else {  // we're assuming since it's not a string, that it's a wrapper DOM element - which makes 'id' a misnomer, but hey
        tables = id.querySelectorAll('table.stats_table,table.show_controls');
    }

    vjs_forEach.call(tables, function(stats_table, index) {

        var id = stats_table.id;

		console.log('   ### starting sr_st_construct_stats_table_features on: ' + id);

		if (!stats_table) { return false; }

		var table_wrapper  = vjs_closest(stats_table,'.table_wrapper,.section_wrapper');
		var tableContainer = document.querySelector('#div_' + id);
		var sectionHeader  = document.querySelector('#' + id + '_sh'); 

		// failsafe - set it to anything - not sure it matters if we just use the closest parentNode, 
		//   since 'table_wrapper' is only used to check the hidden status, and to set presets on the children contained within
		//   - which can be done no matter what the parent wrapper is 
		if(!table_wrapper) {
			table_wrapper = stats_table.parentNode;
		}

		if(!sectionHeader) { return false; }

		// skip if the table is hidden or previously setup.
		if (vjs_isHidden(table_wrapper) || vjs_hasClass(tableContainer,'is_setup')) {
			console.log('   ### skipping sr_st_construct_stats_table_features on: ' + id + ", vjs_isHidden:" + vjs_isHidden(table_wrapper) + ", table_is_setup:" +  vjs_hasClass(tableContainer,'is_setup'));
			return false;
		}
		console.log('   ### running  sr_st_construct_stats_table_features on: ' + id);

        vjs_addClass(tableContainer, 'is_setup');


		// add the various controls to the table.
		sr_st_statline_appendTableControls(id);
		log_performance && sr_perf_logPerformance('tableControls:' + id);

		// make the control a drop menu if appropriate.
		sr_menus_setupDropMenu(sectionHeader.querySelector('.hasmore'));
		log_performance && sr_perf_logPerformance('setupDropMenus:' + id);

		// add intermediate headers and also initialize the sorting.
		sr_st_add_table_headers(id);
		sr_sorttable.init(id);
		log_performance && sr_perf_logPerformance('sr_sorttable:' + id);

		// for narrow screens mobilize the tables, but not for the front page.
		if (Modernizr && !document.querySelector('#content.front')) {
			sr_check_sticky_table_setup(stats_table);
			log_performance && sr_perf_logPerformance('mobilize_tables:' + id);
		}

		// for touchevents we don't want to have the hover, tooltips or the row summing
		if (vjs_hasClass(stats_table, 'row_summable')) {
			sr_st_statline_rowSum(id);
		}
		// SLF: I don't see a need to turn off the highlighting here on
		// mobile for touch events. In some tables I like clicking the
		// table row and then sorting so I can follow where the Sixers are
		// in various stats of interest.
		/*  removed 2018-01-23 */
		// else if (!Modernizr.touch) {
		else if (!vjs_hasClass(stats_table, 'no_highlight')) {
			sr_st_statline_rowHighlight(id);
		}

		sr_setup_presets(table_wrapper) && sr_perf_logPerformance('form presets   ');
		log_performance && sr_perf_logPerformance('rowsum    ');

		if (Modernizr && !Modernizr.touch) {
			// sometimes tables appear after the initial page load
			// in those cases we need to add tooltips for those ids
			//  only the modal table setup utilizes this at this time - "sr_st_mobilize_modal_table"
			if (!is_setup) {
				sr_display_tooltipShow(id);
				log_performance && sr_perf_logPerformance('tooltipShow');
			}
		}

		sr_display_setup_endpoint_onclick(id);

		// Check on the localtime calculations
		// set the player age on the player pages.
		sr_utilities_compute_localtime(id);

	});
}

/* *********************************************************************
   # Usage       :   sr_check_sticky_table_setup
   ********************************************************************** */
function sr_check_sticky_table_setup(stats_table) {
	// if it doesn't exist, or is already set up for sticky, then just give up
	if(!stats_table || stats_table.classList.contains('sticky_table')) { return; }

	// check to see if we have a data_grid parent node, as for the group stage listing in fbref for the ucl.
	// http://d.fbref.com/en/comps/8/UEFA-Champions-League-Stats
	let has_data_grid_parent = (vjs_closest(stats_table, '.data_grid.section_wrapper'));

	// width of the #content element.
	let elWrap;
	let suppress_sidescroll_note;
	
	if (has_data_grid_parent) {
		console.log('   ### This table:' + stats_table.id + ' has a .data_grid.section_wrapper wrapping it');
		// in the case of the data_grid we use the div below the data_grid.section_wrapper
		elWrap = vjs_closest(stats_table, '.data_grid.section_wrapper > div');
		suppress_sidescroll_note = true;
	}
	else {
		// if we're in stathead, we need to account for the fact that the stats_table is in a smaller container than usual
		elWrap = document.getElementById('stathead_results') || document.getElementById('content');
	}

	// check the width of the elements.
	let widthWrap = elWrap.clientWidth;
	let widthTable = stats_table.clientWidth;

	let hasThead = stats_table.querySelectorAll('thead > tr > th').length;
	console.log("*** hasThead:" + hasThead);

	// only mobilize if the width of table is wider than content div
	// or for cases where the element is hidden and we are pretty sure we are going to want to show it
	//    we can add force_mobilize to the table

	if (hasThead && ((widthTable > widthWrap - 25) || (Modernizr.narrow && stats_table.classList.contains('force_mobilize')))) {
        sr_st_mobilize_stats_table(stats_table, suppress_sidescroll_note);
	}
}

/*

  <hr noshade align=center size=1 width="25%">
<div class="blockquote">
  <div class="section_heading"><h3>Player Page Tricks and Tips</h3></div>
<p>
<a name="rowsum_desc">
  Sum any set of rows by clicking anywhere (not red or blue) on the
  first and last rows of your selection. We will then compute the
  totals for the player between and including those two seasons.  
</a>


<br>Summation of season totals only works for the initial case when the table
is in year order.  On a sorted table the results may get a bit
goofy.

<br>
<br>
HIGHLIGHTING: Adding a range or series of player's career
seasons (like
'<a href="/players/a/aaronha01.shtml#1972">#1972</a>',
'<a href="/players/r/rosepe01.shtml#1970-1980-sum">#1970-1980-sum</a>', or
'<a href="/players/m/martipe02.shtml#1998,1999,2001,2002,sum:pitching_standard">#1998,1999,2001,2002,sum</a>')

onto the end of a player page url causes the seasons to the
highlighted and summed. After changing address bar, reload the page to
see highlighting.  This will work even in links e-mailed to others.
Note that for tables with multiple pages the first table is the
default.  If you want to create a sum for a table other than the first
one, select the rows and after the summation window appears click on
"permanent link" link.
</div>


 */

/* *********************************************************************
   # Usage       :   sr_st_statline_rowHighlight
   # Purpose     :   enables the highlighting of a row on a stats table.
   # Returns     :   nothing
   # Parameters  :   none
   # Throws      :
   # See Also    :

   # Comments : This works by adding and removing click handlers from the rows
   of any tables with the class row_summable
   ********************************************************************** */
function sr_st_statline_rowHighlight(id) {
    console.log('   ### sr_st_statline_rowHighlight');

    // Select all of the rows in a stats_table tbody section
    var tables;
    if (id) { tables = document.querySelectorAll('#'+id); } else { return false; }

    vjs_forEach.call(tables, function(table, i) {
        var rows = table.querySelectorAll('tbody > tr');
        vjs_forEach.call(rows, function(row, i) {
            row.highlighted = 0;
            row.onclick = function(event) {
                // make sure this table is not highlighted.
                if (vjs_hasClass(table, 'isolate')) {
                    return;
                }
                // check to if our click target is an href.
                if (vjs_hrefIsClicked(event, row)) { return; }

                if (row.highlighted) {
                    vjs_removeClass(row, 'rowSum');
                    if (row.fixed_row) { vjs_removeClass(row.fixed_row, 'rowSum'); }
                } else {
                    vjs_addClass(row, 'rowSum');
                    if (row.fixed_row) { vjs_addClass(row.fixed_row, 'rowSum'); }
                }
                row.highlighted = (row.highlighted + 1) % 2;
                sr_record_analytics_event('row_highlight', sr_record_directory(), id);

                // are there rows highlighted
                sr_st_statline_showRowSelectControl(table, row);
            };
        });
    });
}

/* *********************************************************************
# Usage       :   
# Purpose     :   
# Returns     :   
# Parameters  :   
# Throws      :   
# See Also    :   
********************************************************************** */
function sr_st_statline_showRowSelectControl(table, row, message) {

    if (vjs_hasClass(table, 'modifying')) {
        alert('The Row Isolate tool can not work when using the Modify and Share tool.');
        return false;
    }


    if (!table ||
        vjs_hasClass(table, 'select_off') ||
        window.location.href.includes('/ozzie/') ||
        window.location.hostname.includes('ozzie') ||
        window.location.href.includes('/ozzie/') ||
        window.location.hostname.includes('ozzie') ||
        window.location.href.includes('/my/') ||
        window.location.hostname.includes('my') ||
        window.location.href.includes('/auth/') ||
        window.location.hostname.includes('auth') ||
        sr_display_modalOpen
    ) {
        return false;
    }

    if (table) {
        console.log('## sr_st_statline_rowControl:'+table.id);
    } else {
        console.log('## sr_st_statline_rowControl:updating message');
    }

    // check to see if we are on the front page.
    var content = document.getElementById('content');
    if (!content || vjs_hasClass(content, 'front')) {
        return false;
    }


    var button_text = '<button onclick="sr_st_statline_rowSelect(\'' + table.id + '\')")>' + (message ? message : __sr_text_show_only_selected_rows) + '</button>';

    var has_selectedRow = table.querySelectorAll('.rowSum');
    if (has_selectedRow.length) {
        sr_display_showPopup(null,
            null,
            button_text, {
                hug: 'top',
                closeCallback: function() { sr_st_statline_rowSelect(table.id, 1); }
            }
        );
    } else {
        Modal.close({});
    }
}

/* *********************************************************************
# Usage       :   
# Purpose     :   
# Returns     :   
# Parameters  :   
# Throws      :   
# See Also    :   
********************************************************************** */
function sr_st_statline_rowSelect(table_id, hide_modal) {
    console.log('## sr_st_statline_highlightSelectedRows:'+table_id);
    var table = document.getElementById(table_id);
    sr_record_analytics_event('row_isolate', sr_record_directory(), table_id);

    if (vjs_hasClass(table, 'isolate') || hide_modal) {
        vjs_removeClass(table, 'isolate');
        var rows_to_show = table.querySelectorAll('tbody tr.hidden-iso:not(.rowSum),tfoot tr');
        var all_rows = [];
        all_rows.push.apply(all_rows, rows_to_show);

        var row_num = rows_to_show.length;

        vjs_forEach.call(all_rows, function(row, i) {
            vjs_removeClass(row, 'hidden-iso');
        });

        // update the button message
        if (!hide_modal) {
            sr_st_statline_showRowSelectControl(table, null);
        }
    } else {
        vjs_addClass(table, 'isolate');
        var rows_to_hide = table.querySelectorAll('tbody tr:not(.rowSum),tfoot tr');
        var all_rows = [];
        all_rows.push.apply(all_rows, rows_to_hide);

        // fade and hide.
        setTimeout(function() {
            vjs_forEach.call(all_rows, function(row, i) {

                vjs_addClass(row, 'hidden-iso');
            });
            // update the button message
            table.scrollIntoView({ behavior: 'smooth', block: 'center' });
            sr_st_statline_showRowSelectControl(table, null, 'Show All Rows');
        }, 950);

    }
}


// The style for the selected area.
var sr_page_id;


/* *********************************************************************
   # Usage       :   sr_st_statline_rowSum
   # Purpose     :   enables the row_summing on the site.
   # Returns     :   nothing
   # Parameters  :   none
   # Throws      :
   # See Also    :

   # Comments : This works by adding and removing click handlers from the rows
   of any tables with the class row_summable
   ********************************************************************** */
function sr_st_statline_rowSum(id) {
    console.log('   ### sr_st_statline_rowSum:'+id);

    // Select all of the rows in a stats_table tbody section

    var tables;
    if (id) { tables = document.querySelectorAll('#' + id + '.row_summable'); } else { tables = document.querySelectorAll('table.row_summable'); }

    vjs_forEach.call(tables, function(table, i) {

        if (typeof(table.spans_active) === "undefined") {
            table.spans_active = '0-0';
        }
        var rows = table.querySelectorAll('tbody > tr');
        vjs_forEach.call(rows, function(row, i) {
            row.onclick = function(event) {
                // check to if our click target is an href.
                if (vjs_hrefIsClicked(event, row)) { return; }

                _sr_rowSum_sumSpan(event, table, this);
            };
        });
    });
}


/* *********************************************************************
# Usage       :   sr_statsTables_rowSum_init
# Purpose     :   enables the row_summing on the site.
# Returns     :   nothing
# Parameters  :   none
# Throws      :
# See Also    :

# Comments : 
********************************************************************** */
function sr_statsTables_rowSum_init() {
    console.log('   ### sr_statsTables_rowSum_init');
    // Set our global var for the page_id
    // we look a number of different places to pull this data.
    var page_data = document.querySelector('[data-player-id]');
    sr_page_id = vjs_getAttr(page_data, 'data-player-id');

    if (!sr_page_id) {
        page_data = document.querySelector('meta[property="og:url"]');
        sr_page_id = vjs_getAttr(page_data, 'content');
    }
    if (!sr_page_id) {
        sr_page_id = window.location.pathname;
    }

    sr_page_id = sr_page_id.replace(/.*\/players\/.\//, '');
    sr_page_id = sr_page_id.replace(/.*\/players\//, '');
    sr_page_id = sr_page_id.replace(/.*\/managers\//, '');
    sr_page_id = sr_page_id.replace(/.*\/teams\//, '');
    sr_page_id = sr_page_id.replace(/.*\/schools\//, '');
    // For the team gamelogs on teh B-r pages we need to send a
    // page_id of PIT/2010 for teams, so we make sure there is not a
    // /2*** that we are chopping off.
    sr_page_id = sr_page_id.replace(/\/[^0-9].*$/, '');

    // for football row summations    
    sr_page_id = sr_page_id.replace(/\/gamelog\/?\/?$/, '');
    sr_page_id = sr_page_id.replace('.shtml', '');
    sr_page_id = sr_page_id.replace('.html', '');
    sr_page_id = sr_page_id.replace('.htm', '');

    console.log('   ### sr_page_id: ' + sr_page_id);

    _highlight_span_from_url(sr_page_id);
}


/////////////////////////////////////////////////////////////////
// This is called when a row is clicked on.
/////////////////////////////////////////////////////////////////

// herehere replace teh tooltip clicks in various tables with onclick handlers in js.
// rather than inline handlers because then we'll be able to stop the propagation of the events.
// for teh row summing.

/* *********************************************************************
# Usage       :   _sr_rowSum_sumSpan
# Purpose     :   actually sum the rows.  
# Returns     :   nothing
# Parameters  :   none
# Throws      :
# See Also    :

# Comments : We have to handle things here like coloring the rows,
  handling the clicks and then calculating the sums.
 */
function _sr_rowSum_sumSpan(event, table, row_clicked) {
    console.log('   ### sr_rowSum_sumSpan:' + row_clicked.id + ',table.id:' + table.id);

    if (!row_clicked.id) { return; }

    // set this up so we handle cloned tables properly.
    var table_id = table.id;

    // need these for parameters to determine what type of rowsumming to do
    var table_sum_type = table.getAttribute('data-soc-sum-scope-type');
    var table_phase_type = table.getAttribute('data-soc-sum-phase-type');
    var table_type = table.getAttribute('data-soc-sum-table-type');
    var table_entity_id = table.getAttribute('data-soc-sum-entity-id');
    

    var row_clicked_parts = row_clicked.id.split('.');
    var row_clicked_num = parseInt(row_clicked_parts[1]);

    // spans_active gives us the current state of the highlighted
    // rows.
    var arr_rows_raw = table.spans_active;
    var arr_rows = arr_rows_raw.split('-');

    arr_rows[0] = parseInt(arr_rows[0]);
    arr_rows[1] = parseInt(arr_rows[1]);

    // Store the existing highlighted range for later.
    var min_old = arr_rows[0];
    var max_old = arr_rows[1];

    // The number of endpoints clicked on.
    var endpoints_turned_off = 0;

    // user clicked on the first line which was already selected.
    if (row_clicked_num === arr_rows[0]) {
        endpoints_turned_off++;
        // Check to see if we have a singleto and arr_rows[1] ===
        // row_clicked as well.
        if (!arr_rows[1] || (row_clicked_num === arr_rows[1])) {
            // Set this to zero as we are going to de-select the
            // singleton.
            arr_rows[0] = 0;
        } else {
            // They aren't the same, so we set the first row in the
            // range equal to the last row in the range and we go from
            // a range to a singleton.
            arr_rows[0] = arr_rows[1];
        }
    }
    // Clicking on a row that is less than the range.  Set the
    // first row to the row_clicked.
    else if ((arr_rows[0] === 0) || (row_clicked_num < arr_rows[0])) {
        arr_rows[0] = row_clicked_num;
    }
    // Nothing was previously selected.
    else if ((arr_rows[0] === 0) && (arr_rows[1] === 0)) {
        arr_rows[0] = row_clicked_num;
    }

    // Clicking on the second line.
    if (row_clicked_num === arr_rows[1]) {
        endpoints_turned_off++;

        // Check to see if the first row exists or is equal to the row
        // we clicked.
        if (!arr_rows[0] || (row_clicked_num === arr_rows[0])) {
            arr_rows[1] = 0;
        } else {
            arr_rows[1] = arr_rows[0];
        }
    }
    // IF we've already turned off a row we do nothing, if a row
    // hasn't been turned off we then check to see if this new row is
    // greater than the existing range and reset the top of the range
    // if so.
    else if ((endpoints_turned_off === 0) &&
        ((arr_rows[1] === 0) ||
            (row_clicked_num > arr_rows[0]))) {
        arr_rows[1] = row_clicked_num;
    }



    // We clicked on a singleton, making us clear out the selection.
    if (endpoints_turned_off === 2) {
        _color_span(table_id, 0, 0, min_old, max_old);
    }
    // We set a new range.
    else {
        _color_span(table_id, arr_rows[0], arr_rows[1], min_old, max_old);
    }

    // Set the new spans active.
    table.spans_active = arr_rows[0].toString() + '-' + arr_rows[1];

    // If there is a range of more than one row selected, we get the
    // value.
    if ((arr_rows[0] > 0) && (arr_rows[1] > 0) && (arr_rows[0] < arr_rows[1])) {
        _get_span_stats(event, sr_page_id, table_id, arr_rows[0].toString().concat('-', arr_rows[1]), 1, 0, row_clicked, 
        table_sum_type, table_phase_type, table_type, table_entity_id);
    }

}



// Set up the http request (a url and a set of params) that returns
// the full html page that will go into the tooltip and will show the
// summed values for the range selected.
/* *********************************************************************
# Usage       :   _get_span_stats
# Purpose     :   setsup the ajaxb call and also the row coloroing
# Returns     :   nothing
# Parameters  :   event (null if from url onload)
# Throws      :
# See Also    :

# Comments : This works by adding and removing click handlers from the rows
  of any tables with the class row_summable
********************************************************************** */
function _get_span_stats(event, page_id, table_id, range_of_values, include_permalink, include_rand, row_clicked, table_sum_type, table_phase_type, table_type, table_entity_id) {
    console.log('   ### get_span_stats');

    // Find the min and max rows, so we know where to put the tooltip.
    var arr_range;
    if (range_of_values.indexOf('-') > 0) {
        arr_range = range_of_values.split('-');
    } else if (range_of_values.indexOf(',') > 0) {
        arr_range = range_of_values.split(',');
    } else {
        return;
    }
    var min_row = arr_range[0];
    var max_row = arr_range.pop();

    // try to put the tooltip after the max_row, if it doesn't exist
    // use the first row.
    var element_user_clicked;
    if (row_clicked) {
        element_user_clicked = row_clicked;
    } else {
        element_user_clicked = document.getElementById(table_id + '.' + max_row);
    }

    if (!element_user_clicked) {
        element_user_clicked = document.getElementById(table_id + '.' + min_row);
    }
    // If we still don't have an element use table_id
    if (!element_user_clicked) {
        element_user_clicked = document.getElementById(table_id);
    }
    // Still nothing return without running sum_span_url.
    if (!element_user_clicked) {
        return;
    }


    // This is a global variable used to set the location.
    elemCLICKED = element_user_clicked;
    var rand_param = "";
    if (include_rand) {
        rand_param = "&rand=" + Math.floor(Math.random() * 10000);
    }

    var params = "html=1&page_id=" + escape(page_id) 
		+ "&table_id=" 
		+ escape(table_id)
		+ "&range="
		+ escape(range_of_values)
		+ "&plink="
		+ include_permalink
		+ rand_param
        + "&phase_type="
        + table_phase_type
        + "&table_type="
        + table_type
        + "&entity_id="
        + table_entity_id;

    if (table_sum_type === 'player_season') {
        sr_rowsum_span_url = sr_SITE_PREFIX.concat("/tools/soc_player_season_summing.cgi");
    }
    sr_display_showPopup(event, element_user_clicked, sr_rowsum_span_url + '?' + params);
}


/* *********************************************************************
# Usage       :   sr_statline_setupRowSum
# Purpose     :   enables the row_summing on the site.
# Returns     :   nothing
# Parameters  :   none
# Throws      :
# See Also    :

# Comments : This works by adding and removing click handlers from the rows
  of any tables with the class row_summable
********************************************************************** */
function clear_span_selection(table_id) {
    console.log('   ### clear_span_selection');

    var table = document.getElementById(table_id);

    // close the moda.l
    Modal.close({});

    var arr_rows_raw = table.spans_active;
    var arr_rows = arr_rows_raw.split('-');

    table.spans_active = '0-0';
    _color_span(table_id, 0, 0, parseInt(arr_rows[0]), parseInt(arr_rows[1]));
}

// Color the range set out by the min_new and max_new values.  We may
// also have do uncolor the range of values in min_old and max_old.
/* *********************************************************************
# Usage       :   sr_statline_setupRowSum
# Purpose     :   enables the row_summing on the site.
# Returns     :   nothing
# Parameters  :   none
# Throws      :
# See Also    :

# Comments : This works by adding and removing click handlers from the rows
  of any tables with the class row_summable
********************************************************************** */
function _color_span(table_id, min_new, max_new, min_old, max_old) {
    min_new = parseInt(min_new);
    max_new = parseInt(max_new);
    min_old = parseInt(min_old);
    max_old = parseInt(max_old);

    // if min_new greater than max_new swap.
    if (min_new > max_new) {
        var tmp = min_new;
        min_new = max_new;
        max_new = tmp;
    }
    var row_num;
    // We want to uncolor all of the rows previously colored.
    if ((min_new === 0) && (max_new === 0)) {
        for (row_num = min_old; row_num <= max_old; row_num++) {
            _color_uncolor_row(table_id, row_num, 'off');
        }
        return;
    }

    // If min_old < min_new, uncolor all those from min_old up to
    // min_new
    if (min_old > 0) {
        for (row_num = min_old; row_num < min_new; row_num++) {
            _color_uncolor_row(table_id, row_num, 'off');
        }
    }

    // Uncolor from max_new to max_old.
    if (max_old > 0) {
        for (row_num = max_new + 1; row_num <= max_old; row_num++) {
            _color_uncolor_row(table_id, row_num, 'off');
        }
    }

    if (min_new > max_new) {
        // Shouldn't get here, but just in case do nothing.
        return;
    } else {
        // Color from min_new to max_new
        for (row_num = min_new; row_num <= max_new; row_num++) {
            _color_uncolor_row(table_id, row_num, 'on');
        }
    }
}


/* *********************************************************************
# Usage       :   sr_statline_setupRowSum
# Purpose     :   enables the row_summing on the site.
# Returns     :   nothing
# Parameters  :   none
# Throws      :
# See Also    :

# Comments : This works by adding and removing click handlers from the rows
  of any tables with the class row_summable
********************************************************************** */
function _uncolor_row(table_id, row_num) { _color_uncolor_row(table_id, row_num, 'off'); }

function _color_row(table_id, row_num) { _color_uncolor_row(table_id, row_num, 'on'); }

/* *********************************************************************
# Usage       :   _color_uncolor_row
# Purpose     :   adds rowSum and coloring to a row
# Returns     :   nothing
# Parameters  :   table_id, row_num, is_on_off is (on|off)
# Throws      :
# See Also    :

# Comments : also checks for the cloned fixed column
********************************************************************** */
function _color_uncolor_row(table_id, row_num, is_on_off) {
    console.log('_color_row(' + table_id + ',' + row_num + ',' + is_on_off + ')');

    // var row_of_span = document.getElementById(table_id + '.', row_num));
    var row_num_next = parseInt(row_num + 1.0);

    // Set up the four options here. For FBrefwe likely have rows 2014-2015
    var row_single   = '[id="' + table_id + '.' + row_num + '"]';
    var row_double   = '[id="' + table_id + '.' + row_num + '-' + row_num_next + '"]';
    var clone_single = '[id="' + table_id + '.' + row_num + '.clone"]';
    var clone_double = '[id="' + table_id + '.' + row_num + '-' + row_num_next + '.clone"]';

    // We then search on all four of the above options.
    var rows_of_span = document.querySelectorAll(row_single + ',' + row_double + ',' + clone_single + ',' + clone_double);
    console.log(row_single + ',' + row_double + ',' + clone_single + ',' + clone_double);
    console.log(rows_of_span);

    vjs_forEach.call(rows_of_span, function(row_of_span, i) {
        if (row_of_span) {
            if (is_on_off === 'off') {
                vjs_removeClass(row_of_span, 'rowSum');
            } else {
                vjs_addClass(row_of_span, 'rowSum');
            }
        }
    });

}




/* *********************************************************************
# Usage       :   _highlight_span_from_url
# Purpose     :   takes the hash element and highlights tables as needed
# Returns     :   nothing
# Parameters  :   page_id
# Throws      :
# See Also    :

// Get the span set in the page url hash if one is found.  These have
// four forms min_row-max_row:table_id or min_row-max_row, or
// row_1,row_2,...,row_n:table_id  or row_1,row_2,...,row_n
********************************************************************** */
function _highlight_span_from_url(page_id) {
    console.log('   ### highlight_span_from_url');

    var event = null;

    // Read the page's hash looking for a thing to sum.
    var rows_highlight_from_hash = location.hash.slice(1);

    // We use two colons when reading from the hash for table sorting,
    // so we just return if we see one of those cases.
    if (rows_highlight_from_hash.match('::')) {
        return true;
    }

    // Get the rows_highlighted and table id if given.
    var rows_highlighted = rows_highlight_from_hash.split(':')[0];
    var table_id = rows_highlight_from_hash.split(':')[1];
    var table = document.getElementById(table_id);


    // if no table_id look up the first stats_table
    if (!table) {
        table = document.querySelector('table.stats_table.row_summable') || document.querySelector('table.stats_table');
        if (table && /[A-z0-9]/.test(table.id)) {
            table_id = table.id;
        } else {
            return false;
        }
    }

    // See if table_id exists and that rows_highlighted is non-empty.
    if (!rows_highlighted || !table) {
        return false;
    }

    // Return with no action if no hash to highlight or no table_id.
    if ((rows_highlight_from_hash.length === 0) || (!table_id)) {
        return false;
    }

    // need these for parameters to determine what type of rowsumming to do
    var table_sum_type = table.getAttribute('data-soc-sum-scope-type');
    var table_phase_type = table.getAttribute('data-soc-sum-phase-type');
    var table_type = table.getAttribute('data-soc-sum-table-type');
    var table_entity_id = table.getAttribute('data-soc-sum-entity-id');

    var arr_rows_joint = rows_highlighted.split('-');
    var arr_rows_disjoint = rows_highlighted.split(',');

    // figure out where to focus the browser.
    var focus_element;
    if (arr_rows_disjoint.length > arr_rows_joint.length) {
        focus_element = document.getElementById(table_id + '.' + arr_rows_disjoint[0]);
    } else {
        focus_element = document.getElementById(table_id + '.' + arr_rows_joint[0]);
    }

    // in-case we have a different type of value.
    if (!focus_element || (arr_rows_joint[2] === 'sum')) {
        var second_focus_element = document.getElementById(table_id + '.' + arr_rows_joint[1]);
        if (second_focus_element) {
            focus_element = second_focus_element;
        }
    } else if (!focus_element) {
        var second_focus_element = document.getElementById(table_id + '.' + arr_rows_disjoint[-1]);
        if (second_focus_element) {
            focus_element = second_focus_element;
        }
    }

    // If we have a focus element, set the focus here.
    if (focus_element) {
        var arr_focus_loc = vjs_offset(focus_element);
        // move the focus 100 pixels up and set the left value to
        // zero as we don't want to horizontal scroll.
        window.scroll(0, arr_focus_loc.top - 220);
    }

    // generate the summation and color the rows.
    // Determine how man entries we have here and if we need to run a
    // sum on it.  Only one entry.  Do nothing here.
    if ((arr_rows_joint.length <= 1) && (arr_rows_disjoint.length <= 1)) {
        _color_uncolor_row(table_id, arr_rows_joint[0], 'on');
        table.spans_active = arr_rows_disjoint[0].toString() + '-' + arr_rows_disjoint[0];
    }
    // We have a range of rows to highlight and sum.
    else if (arr_rows_joint.length > 1) {
        arr_rows_joint.sort(function(a, b) {
            if (a === 'sum') {
                return 999999999999;
            } else if (b === 'sum') {
                return -99999999999;
            } else {
                return a - b;
            }
        });

        _color_span(table_id, parseInt(arr_rows_joint[0]), parseInt(arr_rows_joint[1]), 0, 0);

        // Check to see if we have spans_active[table_id] defined.
        if (typeof(table.spans_active) === "undefined") {
            table.spans_active = arr_rows_joint[0].toString() + '-' + arr_rows_joint[1];
        }
        // Span the rows if we are asked to do so.
        if (arr_rows_joint[2] === 'sum') {
            _get_span_stats(event, sr_page_id, table_id, table.spans_active, 0, 1, null, table_sum_type, table_phase_type, table_type, table_entity_id);
        }

    }
    // We have a disjoint set of rows.
    else if (arr_rows_disjoint.length > 1) {
        var i;
        var last_row;
        var next_to_last_row;
        // sort the order of the disjoint elements, if there is a sum,
        // we want to make sure that is last in the array..
        arr_rows_disjoint.sort(function(a, b) {
            if (a === 'sum') {
                return 999999999999;
            } else if (b === 'sum') {
                return -99999999999;
            } else {
                return a - b;
            }
        });

        // Color all of the rows in our set.
        for (i = 0; i < arr_rows_disjoint.length; i++) {
            _color_uncolor_row(table_id, arr_rows_disjoint[i], 'on');
            next_to_last_row = last_row;
            last_row = arr_rows_disjoint[i];
        }

        var do_sum = 0;
        if (last_row === 'sum') {
            arr_rows_disjoint.pop();
            do_sum = 1;
            last_row = next_to_last_row;
        }

        // If we want to sum run _get_span_stats
        if (do_sum) {
            _get_span_stats(event, page_id, table_id, arr_rows_disjoint.join(','), 0, 0, null, table_sum_type, table_phase_type, table_type, table_entity_id);
        }
    }

    // Check to see if we have spans_active[table_id] defined.
    if (typeof(table.spans_active) != "undefined") {
        table.spans_active = arr_rows_disjoint[0].toString() + '-' + last_row;
    }

    return true;
}



/* *********************************************************************
# Usage       :   sr_st_clicked_on_fixed()
# Purpose     :   passes the click from the fixed column to behind it.
# Returns     :   
# Parameters  :   
# Throws      :   
# See Also    :   
********************************************************************** */
function sr_st_clicked_on_fixed() {
    var table = this.table;
    var col = table.headrowCells[this.col];
    sr_sorttable.sortOnColumn(table.headrowCells[this.col], table);
}


/* *********************************************************************
# Usage       :   sr_st_mobilize_modal_table()
# Purpose     :   adds the superior scrolling etc to the tables that show up in the modals
# Returns     :   
# Parameters  :   
# Throws      :   
# See Also    :   
********************************************************************** */
function sr_st_mobilize_modal_table() {
    console.log('   ### sr_st_mobilize_modal_table ');
    var table = document.querySelector('#modal-content table.stats_table');
    // console.log(table);
    if (table) {
        sr_st_construct_stats_table_features(table.id);
    }
}


/* *********************************************************************
# Usage       :   sr_st_add_sidescroll_note()
# Purpose     :   adds an <li> to section header that alerts the user.
# Returns     :   nothing
# Parameters  :   div.table_container
# Throws      :   
# See Also    :   
********************************************************************** */
function sr_st_add_sidescroll_note(table) {

	var table_id = vjs_getAttr(table,'id');
	var sectionHeader = document.querySelector('.section_heading#' + table_id + '_sh');

	if (!sectionHeader || vjs_hasClass(document.body, 'widescreen')) {
		return false;
	}

    // get the heading wrapper .section_heading_text and add a class.
    var heading = sectionHeader.querySelector('.section_heading_text');
    vjs_addClass(heading, 'sidescroll_note');

    // append the li to the heading ul
    var heading_ul = heading.querySelector('ul');
    var li = document.createElement("LI");
    li.innerHTML = __sr_text_scroll_right_widescreen;
    li.className = 'scroll_note';

    var span = li.querySelector('.click');
    span.className = 'tooltip';

    // add the clickhandler to reduceFormatting and then destroy itself.
    span.onclick = function(e) {
        sr_st_reduceFormatting();
        sr_record_analytics_event('strip mobile formatting', sr_record_directory(), 'table-note');
        vjs_removeChild(li);
        vjs_removeClass(heading, 'sidescroll_note');
        var adRails = document.querySelectorAll('.rails.adblock');
        vjs_forEach.call(adRails, function(ad, i) {
            vjs_removeChild(ad);
        });
        var adRail = document.getElementById('ad-wrapper-left');
        if (adRail) { vjs_removeChild(adRail); }
        adRail = document.getElementById('ad-wrapper-right');
        if (adRail) { vjs_removeChild(adRail); }
        adRail = document.getElementById('fs-sidewall-left-container');
        if (adRail) { vjs_removeChild(adRail); }
        adRail = document.getElementById('fs-sidewall-right-container');
        if (adRail) { vjs_removeChild(adRail); }

        // remove all of the topscroll_divs.
        var divs = document.querySelectorAll('.topscroll_div');
        vjs_forEach.call(divs, function(div, i) {
            vjs_removeChild(div);
        });

    };

    // add to ul
    heading_ul.appendChild(li);
}



/* *********************************************************************
# Usage       :   sr_st_mobilize_stats_table()
# Purpose     :   uses position sticky to make the table mobile friendly.
# Returns     :   nothing
# Parameters  :   stats_table
#                 boolean for not adding the side scroll note
# Throws      :   
# See Also    :   Note that the dev can pass a number of different setups for
                  showing which columnns to freeze.
                  4       = freeze 1-4,           "1,2,3,4"
                  4,8     = freeze 4&8            "4,8"
                  ,4      = freeze only column 4  "4"
                 4,2      = freeze 2-4            "2,3,4" this was v2.0

                 we are now currently on version 3.0 of the column freezing.
                 We only support freezing any of columns 1-11

                 Note also there are some subtleties around 0 and 1
                 indexed lists.  The columns are passed by the dev as
                 1-indexed, but we use them as 0-indexed in some
                 parts.
********************************************************************* */
function sr_st_mobilize_stats_table(table, suppress_sidescroll_note) {
    console.log('   ### mobilize_sticky:' + id);

    // make sure we have params that work.
    if (!table) { return false; }
    var id = table.id;

    if (vjs_hasClass(table, 'no_freeze')) {
        return false;
    }

    // read how many columns to freeze, return if none.
    var freeze_attribute = table.getAttribute('data-cols-to-freeze');
    if (!freeze_attribute) { return false; }
    var attributes = freeze_attribute.split(',');
    var cols_to_freeze = attributes[0];

    // run through the various apis there and set them all up so that
    // they return a 1-indexed list of the columns to freeze.
    
    // version 1.0 of the api where we just set the number of columns
    // to freeze, so "4" means freeze columns 1-4.  We are maintaining
    // this api and setting up something new if we just wanted column
    // 4 frozen.  Here were recompute "4" as "1,2,3,4" and then pass
    // to the routine.
    if (attributes.length === 1) {
	var cols = [];	
	for (var i = 1; i <= attributes[0]; i++) { cols.push(i); }
	freeze_attribute = cols.join(',');;
    }
    // in this case the dev used ",2" so the first value is zero, this
    // means only freeze column 2.  A more natural way to do this
    // would be to just send "2", but that has forever had the meaning
    // of freeze the first two columns and rather than force everybody
    // to rework that, we added the ",2" to the api.  Here we
    // recompute this as "2" and pass to the routine.
    else if ((attributes.length === 2) && (!attributes[0])) {
	freeze_attribute = attributes[1];
    }
    // this was version 2.0 of the sticky columns that allowed you to
    // send something like 4,3 that meant freeze columns 3-4.  4 being
    // the right column and 3 the left frozen block.  This is version
    // is deprecated.  The correct way to do this now would be to call
    // it with 3,4.  Here we would convert 4,2 to "2,3,4" and pass to
    // the routine
    else if ((attributes.length === 2) && (attributes[1] <= attributes[0])) {
	var cols = [];	
	for (var i = attributes[1]; i <= attributes[0]; i++) { cols.push(i); }
	freeze_attribute = cols.join(',');;
    }

    // we setup inpage css to handle opaque backgrounds and positions
    // for the table body parts.  there are some complications when
    // colspans are used on the table dealt with below.
    var css = '';
    var columns = freeze_attribute.split(',');

    // Sort the entries in ascending order.
    columns.sort(function(a, b) { return a - b; });

    if (!columns[0]) { return false; }
    
    // get children of the first tbody table row that has enough columns
    var cell = table.querySelector('tbody tr:not(.hidden) > :nth-child(' + columns[columns.length - 1] + ')');
    // no row had enough columns
    if (!cell) {
	console.log("no table row has enough columns.");
	return false;
    }  
    var cells = cell.parentNode.children;

    // add sticky table class to the table and also add eqN for each
    // frozen columnn and leM and reK for the left and right edge, so
    // they have a nice border.
    vjs_addClass(table, 'sticky_table');
    vjs_forEach.call(columns, function(column, i) {
	vjs_addClass(table, 'eq'+column);
    });
    vjs_addClass(table, 're'+columns[columns.length - 1]);
    vjs_addClass(table, 'le'+columns[0]);

    // Now we needd to figure out just how wide the columns are.
    // store the width of each column.
    var column_widths = [];

    // run through the fixed columns and figure out where their left
    // should be when stuck
    for (var x = 0; x < columns.length; ++x) {

	// convert column to zero-indexed.
	var column = columns[x] - 1;

	// iterrate through the frozen cells to the left of this one
	// and get their widths.
	// Note that the widths are only correct if the css is done rendering.
        var width = 0;
        for (var y = 0; y < x; ++y) {
	    var column_y = columns[y] - 1;
	    width += cells[ column_y ].offsetWidth;
	}

        // set the css for these cells  need border-style:white?
        css = css + "#" + id + " td:nth-child(" + (column + 1) + "):not(.not_sticky)" +
			 ", #" + id + " th:nth-child(" + (column + 1) + "):not(.not_sticky) { left: " + width + "px; " +
			 "position: sticky; z-index: 1; }\n";

        // keep track of the location of the right edges as we go.
        column_widths[column] = cells[column].offsetWidth;
    }

    // Add a note for desktop side scrolling and add the top scroll bar.
    sr_st_mobilize_stats_table_sticky_explain(table, suppress_sidescroll_note);

    // check for thead and tfoot colspans.
    var has_colspans = table.querySelector('thead th[colspan],tfoot th[colspan]');

    if (has_colspans) {
        sr_st_set_sticky_colspans(table, columns, column_widths);
    }

    // in case we re-run this setup later after sorting the table causes
    // any widths to change, we pop an ID onto the style tag we are adding
    // so we can find it and remove it later
    var styleTagId = 'sticky_style_' + table.id;
	var existing_sticky_style = document.getElementById(styleTagId);
	if (existing_sticky_style) {
		existing_sticky_style.remove();
	}

    // add the new CSS to the DOM, after the <script> tag that the Statline template created
    var sticky_style = document.createElement('style');
	sticky_style.id = styleTagId;
    sticky_style.innerHTML = css;
    table.parentNode.insertBefore(sticky_style, table.nextSibling);

    return true;
}

/* *********************************************************************
# Usage       :   sr_st_set_sticky_colspans()
# Purpose     :   for cases where we have colspans on headers, we need to
#                  adjust the left edges of the sticky cells, cell by cell here.
# Returns     :   nothing
# Parameters  :   id for the table and some params for the sticky cols
# Throws      :   
# See Also    :   
********************************************************************** */
function sr_st_set_sticky_colspans(table, columns, column_widths) {

    console.log('    ### sr_st_set_sticky_colspans, table.id:' + table.id);

    // we then need to check for an adjust for colspans
    var check_rows = table.querySelectorAll('thead tr,tfoot tr');

    // run through each header and footer row to fix colspan issues.
    vjs_forEach.call(check_rows, function(row, i) {

	// see if the row needs adjusting.
        if (!sr_st_check_sticky_colspans(row, columns)) { return true; }

        // track the number of cells and columns we have
        // crossed traversing this row.
        var cols_traversed = 0;
        var cells_traversed = 0;
	var covered_columns = [];

	vjs_forEach.call(row.cells, function(cell, i) {	    covered_columns[i] = [];	});

	// Run through each of the fixed columns from the table body
	// and figure out which header covers them.  We will figure
	// out which fixed columns are in each colspan and then set
	// the left values based on that.
	// 
	// The left of the colspan is the width of the colspan - the
	// sum of all of the widths of the the fixed columns covered
	// by the colspan or to the left of it.  note that columns
	// here are 1-indexed not 0-indexed
	// 
	// save this for a right hand border on the last column
	// sticky.
	var max_col = 0;
	vjs_forEach.call(columns, function(column, i) {
	    var row_cells = row.cells;
	    var k = -1;
	    var header_cols_traversed = 0;
	    while ((k < row_cells.length) && (header_cols_traversed < column)) {
		k++;
		header_cols_traversed += row_cells[k].colSpan;
	    }

	    // save this for a right hand border on the last column
	    // sticky.
	    max_col = k;
	    
	    covered_columns[k].push(column);	    
	});

	// Run through each of the header cells to see if they cover
	// something and we need to handle that.
	vjs_forEach.call(row.cells, function(cell, k) {

	    // If nothing, add class not_sticky.
	    if (covered_columns[k].length === 0) {
                vjs_addClass(cell, 'not_sticky');
	    }
	    else {
		// Run from left to right gathering up the width of
		// the frozen columns covered and then also all of the
		// frozen columns to the left of this header cell the
		// left of this one and summing their widths.	
		var cumulative_width = 0;

		// this while loop runs through the headers from 0 to
		// K and adds up the widths of all of the covered
		// frozen columns.
		var j = 0;
		while (j <= k) {
		    // Get the widths of the fixed 
		    vjs_forEach.call(covered_columns[j], function(covered_column, h) {
			// converting from one to zero-indexing again
			cumulative_width += column_widths[covered_column - 1];
		    });
		    j++;
		}

                // Set the style accounting for possible negative or positive values.
		var cell_left = cumulative_width - cell.offsetWidth;
                cell.style.left = (cell_left < 0) ? '-' + -cell_left + 'px' : cell_left + 'px';
		cell.style.position = 'sticky';
                cell.style.textAlign = 'right';
		// this prevents a frozen column to right of another
		// from overwriting it.
		cell.style.zIndex = 20 - k ;
		// the last header fixed column gets a right border.
		// it only aligns if table is fully scrolled to the left.
		if (k === max_col) { cell.style.borderRight = '1px solid #949698'; }
	    }
	});
    });
}

/* *********************************************************************
# Usage       :   sr_st_check_sticky_colspans()
# Purpose     :   check to see if any of the colspans to the at or to the
                     left of the last frozen columnn are sticky0
# Returns     :   nothing
# Parameters  :   row of a table and cols that are frozen
# Throws      :   
# See Also    :   
********************************************************************** */
function sr_st_check_sticky_colspans(row, columns) {
    var column = 0;

    // run from column 0 to last frozen column to see if any of them
    // have colspans. If not return false, else true.
    while (column < columns[columns.length - 1]) {
        if (row.cells[column].colSpan > 1) return true;
        column++;
    }
    return false;
}


/* *********************************************************************
# Usage       :   sr_st_mobilize_stats_table_sticky_explain
# Purpose     :   adds a note to user and top scroll bar.
# Returns     : 
# Parameters  : 
#               
# Throws      :   
# See Also    : 
********************************************************************** */
function sr_st_mobilize_stats_table_sticky_explain(table, suppress_sidescroll_note) {
    // We want to add a note about side_scrolling when on desktop.
    if (Modernizr.desktop || Modernizr.laptop) {
        if (!vjs_hasClass(document.body, 'sr_expanded') && !table.added_sidescroll && !suppress_sidescroll_note) {
            table.added_sidescroll = true;
            sr_st_add_sidescroll_note(table);
        }

        // add the clone top scroll option on desktop
        if (!vjs_hasClass(document.body, 'sr_expanded') && !table.added_topscroll) {
            table.added_topscroll = true;
            sr_st_add_topscroll(table);
        }
    }
}

/* *********************************************************************
# Usage       :   sr_st_add_topscroll
# Purpose     :   adds a top scrollbar for tables with a bottom scrollbar
# Returns     :   nothing
# Parameters  :   table element
# Throws      :   
# See Also    :   
********************************************************************** */
function sr_st_add_topscroll(table) {
	var parent_div = table.parentNode;
	console.log('   ### sr_st_add_topscroll: ' + parent_div.id);

	// only apply this to tables with 8+ rows.
	var row_count = table.querySelectorAll('tr').length;
	if (row_count < 8) {
		// don't add a top scroll
		return false;
	}


	// get the width of the div.
	var inner_div_width = table.clientWidth;
	var scroll_div = document.createElement("DIV");
	var inner_div = document.createElement("DIV");

	// handle the scroll div info.
	vjs_addClass(scroll_div, 'topscroll_div');
	vjs_addClass(inner_div, 'topscroll_inner_div');
	inner_div.style.width = inner_div_width.toString() + 'px';

	vjs_addClass(scroll_div, 'assoc_'+table.id);

	// put the inner_div inside the scroll div, and then put scroll div before the parent_div.
	scroll_div.appendChild(inner_div);
	parent_div.parentNode.insertBefore(scroll_div, parent_div);
	//parent_div.prepend(scroll_div); // this would be to put it inside of 'table_container' - which helps for tabbed tables, but doesn't work right - tried to fiddle with it

	// setup the scrolling for these.
	parent_div.onscroll = function() {
		scroll_div.scrollLeft = parent_div.scrollLeft;
	};
	scroll_div.onscroll = function() {
		parent_div.scrollLeft = scroll_div.scrollLeft;
	};
}


/* *********************************************************************
   # Usage       :   sr_st_reduceFormatting
   # Purpose     :   reduce the formatting
   # Returns     :   a long html string.
   # Parameters  :   tableID
   # Throws      :
   # See Also    :

   # Comments : 

   ********************************************************************** */
function sr_st_reduceFormatting() {

    vjs_addClass(document.body, 'sr_expanded');

    var dirs = document.querySelectorAll('span[class*="sorttable_elSort"]');
    vjs_forEach.call(dirs, function(dir, i) {
        vjs_removeChild(dir);
    });

    var theads = document.querySelectorAll('tr.thead');
    vjs_forEach.call(theads, function(thead, i) {
        vjs_removeChild(thead);
    });

    var wrap = document.getElementById('wrap');
    wrap.style.width = '100%';

    var containers = document.querySelectorAll('.table_container');
    vjs_forEach.call(containers, function(container, i) {
        vjs_removeClass(container, 'table_container');
    });

    // change the viewport, this appears to have no impact on the overall width of the html tag.
    // var viewport = document.querySelector("meta[name=viewport]");
    // viewport.setAttribute('content', 'width=2000,initial-scale=1.0');    
}

/* *********************************************************************
   # Usage       :   sr_st_statline_glossaryBuild
   # Purpose     :   takes all of the tips in the table and builds a glossary.
   # Returns     :   a long html string.
   # Parameters  :   tableID
   # Throws      :
   # See Also    :

   # Comments : 

   ********************************************************************** */
function sr_st_statline_glossaryBuild(tableID) {

    // output a glossary of table values.   
    var glossaryText = '<div id="sr_glossary">';


    glossaryText = glossaryText + '<div class="glossary_entry no_over">' + __sr_text_also_view_explanations + '</div>' + "\n";
    // run through each of the headers and build the html for this entry.
    var ths = document.querySelectorAll('table#' + tableID + ' > thead > tr > th, table#' + tableID + ' > tbody > tr > th');
    var last_over_header = '';
    vjs_forEach.call(ths, function(th, i) {

        // for every change in the over_header if there is an over
        // header, add a row to the glossary we build.
        var over_header = vjs_getAttr(th, 'data-over-header');
        if (over_header && (last_over_header !== over_header)) {

            var entryText = '<div class="header_entry">' + over_header + '</div>' + "\n";
            glossaryText = glossaryText + entryText;
        }
        last_over_header = over_header;

        var tipText = '';
        if (vjs_hasAttr(th, 'data-tip')) {
            tipText = vjs_getAttr(th, 'data-tip');
        } else if (vjs_hasAttr(th, 'tip')) {
            tipText = vjs_getAttr(th, 'tip');
        }

        if (tipText) {
            var entryText = '<div class="glossary_entry' + 
                (over_header ? '' : ' no_over') +
                '">' +
                '<span class="glossary_title bold_text">' +
                th.innerHTML +
                '</span> -- ' +
                '<span class="glossary_desc">' +
                tipText +
                '</span>' +
                '</div>' +
                "\n";
            glossaryText = glossaryText + entryText;
        }
    });

    return glossaryText + "</div>";
}


/* ********************************************************************
  SortTable
  version 2
  7th April 2007
  Stuart Langridge, http://www.kryogenix.org/code/browser/sorttable/
  
  Thanks to many, many people for contributions and suggestions.
  Licenced as X11: http://www.kryogenix.org/code/browser/licence.html
  This basically means: do what you want with it.
********************************************************************* */

// Stores the number of the table being set up.  This is needed since
// we have multiple tables per page.
var sr_table_number = 0;
var sr_last_sorted_column = -1;

/* *********************************************************************
# Usage       :   call sorttable.init to set it all up
# Purpose     :   sort tables on the sr sites.
# Returns     :   nothing
# Parameters  :   none
# Throws      :
# See Also    :
# Comments : this all runs on document.ready and looks for tables with
  the sortable class.

  NOte that this uses some ancient dean edwards code from 2005 that
  provided some toolbelt stuff and also provides the add_event handler
  and some other things.  I'll admit to being too scared to pull it
  out, but to be honest this is pretty bombproof at this point, so
  there is no real need to make this run differently than it does
  already.  At some point perhaps a performance case can be made to
  rewrite this in a more normal paradigm for us, but I would need to
  be convinced convincingly it was needed.


  HEREHERE:
    change csk to data-csk
 
 ********************************************************************** */
var sr_sorttable_init_runs = 0;
var sr_sorttable = {

    /* *********************************************************************
       # Usage       :   sr_sorttable.init()
       # Purpose     :   add click handlers to the header of the columns 
       for all table.sortable tables
       # Returns     :   nothing
       # Parameters  :   none
       # Throws      :
       # See Also    :
       # Comments : this all runs on document.ready and looks for tables with
       the sortable class.
       ********************************************************************** */
    init: function(id) {
        console.log('   ### sr_sorttable.init');

        // give us some basic requirements here.
        if (!document.createElement || !document.getElementsByTagName) return;


        sr_sorttable.DATE_RE = /^(\d\d?)[\/\.-](\d\d?)[\/\.-]((\d\d)?\d\d)$/;

        // iterate through the sortable tables, 
        var tables;
		// This is called this way so tables are an array both ways.
        if (id) {
			tables = document.querySelectorAll('#' + id); 
		} 
        else {
			tables = document.querySelectorAll('table.sortable,table.sr_share');
		}

        vjs_forEach.call(tables, function(t, i) {
            if (!vjs_hasClass(t, 'sortable')) {
                return false;
            }
            if (!vjs_hasClass(t, 'now_sortable')) {
                sr_sorttable.makeSortable(t);
                vjs_addClass(t, 'now_sortable');
            }
        });
    },

    /* *********************************************************************
       # Usage       :   sr_sorttable.makeSortable()
       # Purpose     :   makes the table actually sortable
       for all table.sortable tables
       # Returns     :   nothing
       # Parameters  :   a table dom element
       # Throws      :
       # See Also    :
       # Comments :  
       ********************************************************************** */
    makeSortable: function(table) {
        // make sure that there are table rows within a tbody
        if (!table || !table.tBodies || !table.tBodies.length || !table.tBodies[0] || !table.tBodies[0].rows) {
            return;
        }

        // see if the table has any initial
        var pre_hidden_rows = table.querySelectorAll('tr.hidden');
        if (pre_hidden_rows.length || vjs_hasClass(table, 'skip_rehide')) { table.skip_rehide = true; } else { table.skip_rehide = false; }

        // increment our table number count, this handles when there
        // are multiple tables on a page.
        sr_table_number++;
        table.table_number = sr_table_number;


        if (table.getElementsByTagName('thead').length === 0) {
            // table doesn't have a tHead. Since it should have, create one and
            // put the first table row in it.
            var thead = document.createElement('thead');
            if (table.rows[0]) {
                thead.appendChild(table.rows[0]);
            }
            table.insertBefore(thead, table.firstChild);
        }

        // get the number of thead.tr
        table.thead_rows = table.tHead.rows.length;
        table.lastHeadRow = table.thead_rows - 1;
        table.cntFootRows = table.tFoot ? table.tFoot.rows.length : 0;

        // We may have no headrows in some cases.
        if (table.lastHeadRow < 0) {
            return;
        }

        // add a data value to every row telling us its default order.
        for (var i = 0, max = table.rows.length; i < max; i++) {
            // Add the data-row value to the rows after the thead.
            if (i >= table.thead_rows) {
                vjs_setAttr(table.rows[i], 'data-row', i - table.thead_rows);
            }
        }

        // get an array of all of the cells in the last headrow
        table.headrowCells = table.tHead.rows[table.lastHeadRow].cells;
        table.colgroupCols = table.getElementsByTagName('col');
        table.sorttable_tbody = table.tBodies[0];

        // sr_perf_logPerformance('sorttable:'+table.id+':a');

        // run thru all of  thead.tr[last].th
        for (var i = 0, max = table.headrowCells.length; i < max; i++) {

            // sr_perf_logPerformance('sorttable:'+table.id+':'+i+':b');
            // manually override the type with a sorttable_type attribute
            if (!vjs_hasClass(table.headrowCells[i], 'sorttable_nosort')) { // skip this col
                // sr_perf_logPerformance('sorttable:'+table.id+':'+i+':bb');

                // we always guess the type of the table.
                table.headrowCells[i].sorttable_sortfunction = sr_sorttable.guessType(table, i);

                // Get some values attached to this header cell for use later
                table.headrowCells[i].sorttable_columnindex = i;

                // sr_perf_logPerformance('sorttable:'+table.id+':'+i+':bf');
                // make it clickable to sort

                vjs_addEvent(table.headrowCells[i], "click",
                    function() {
                        sr_sorttable.sortOnColumn(this, table);
                    });
            } // end of check for sorttable_nosort
        }
        // sr_perf_logPerformance('sr_sorttable:'+table.id+':r');


    },

    /* *********************************************************************
       # Usage       :   sr_sorttable.sortOnColumn()
       # Purpose     :   handles each click on a column and sends it along to the
                         proper to
       # Returns     :   nothing
       # Parameters  :   headCell  (the thead.th that was clicked.)
       # Throws      :
       # See Also    :
       # Comments :  
       ********************************************************************** */
    sortOnColumn: function(headCell, table, is_resort) {

        /* TODO:
           we need to fix the resort issue at this step.

           First if we click the partial table or hide non_qual on a sorted table
           we don't want to reverse that sort, we want to sort in the same direction.

           check the hide/show of teh nonquals with the input

           set up the hide partial with button way of handling the sorting.
         */


        if (typeof table === 'string') {
            table = document.getElementById(table);
            if (!table) return;
        }
        if (!headCell) {
            if (sr_last_sorted_column === -1) {
                sr_sorttable.recolorTable(table);
                return;
            }

            headCell = table.headrowCells[sr_last_sorted_column];
            if (!headCell) return;
        }


        // REVERSE THE SORT
        var sort_dir = '';
        if ((vjs_hasClass(headCell, 'sorttable_sorted') && !is_resort) ||
            (vjs_hasClass(headCell, 'sorttable_sorted_reverse') && is_resort)) {
            sort_dir = 'reverse';
        }
        // REVERT THE COLUMN
        else if (vjs_hasClass(headCell, 'sorttable_sorted_reverse') && !is_resort) {
            sort_dir = 'revert';
        }
        //  NEW SORT
        else if ((is_resort && vjs_hasClass(headCell, 'sorttable_sorted')) || !is_resort) {
            sort_dir = 'initial';
        }

        // run through each row and hide and show what we should here.
        sr_sorttable.rehideTable(table, headCell, sort_dir);

        // run through the sorting options.
        if ((sort_dir === 'reverse') && (is_resort)) {
            log_performance && sr_perf_logPerformance('sort:columnreverse start');

            // we have to doubly sort this here because do an initial and then 
            sr_sorttable.sortOnColumnInitial(headCell, table);
            sr_sorttable.sortOnColumnReverse(headCell, table);
            vjs_removeClass(headCell, 'sorttable_sorted');
            vjs_addClass(headCell, 'sorttable_sorted_reverse');
        } else if (sort_dir === 'reverse') {
            log_performance && sr_perf_logPerformance('sort:columnreverse start');

            sr_sorttable.sortOnColumnReverse(headCell, table);
            vjs_removeClass(headCell, 'sorttable_sorted');
            vjs_addClass(headCell, 'sorttable_sorted_reverse');
        }
        // REVERT THE COLUMN
        else if (sort_dir === 'revert') {
            log_performance && sr_perf_logPerformance('sort:columnrevert  start');
            sr_sorttable.sortOnColumnRevert(headCell, table);
            vjs_removeClass(headCell, 'sorttable_sorted_reverse');
        }
        //  NEW SORT
        else if (sort_dir === 'initial') {
            log_performance && sr_perf_logPerformance('sort:columninitial start');
            sr_sorttable.sortOnColumnInitial(headCell, table);

            // remove sorttable_sorted classes
            var theadrow = headCell.parentNode;
            vjs_forEach.call(theadrow.childNodes, function(cell, i) {
                if (cell.nodeType === 1) { // an element
                    vjs_removeClass(cell, 'sorttable_sorted_reverse');
                    vjs_removeClass(cell, 'sorttable_sorted');
                }
            });

            // mark our column as sorted
            vjs_addClass(headCell, 'sorttable_sorted', table);
        }

        // update the table as needed.
        sr_sorttable.recolorTable(table);
        sr_sorttable.regroupRows(table, headCell, sort_dir);

        // re-run the code to set the sticky columns
        // sorting the table can hide and show rows, which can change the
        // widths of columns (e.g. if the player with the longest name
        // is hidden, the name column can become narrower)
		sr_check_sticky_table_setup(table);


        // clean up some tooltips and the direct link.
        sr_sorttable.move_tooltips_to_first_row(table);
        sr_sorttable.setDirectLinkValue(table.id, headCell.sorttable_columnindex);


        log_performance && sr_perf_logPerformance('sort:                    end');
        log_performance && sr_perf_appendLog(true);
        return;
    },

    /* *********************************************************************
       # Usage       :   sr_sorttable.addSortDirArrow()
       # Purpose     :   Adds a span to show sort direction on the tables.
       # Returns     :   nothing
       # Parameters  :   headCell and dirType [ 'initial','reverse','revert']
       # Throws      :
       # See Also    :
       # Comments :  
       ********************************************************************** */
    addSortDirArrow: function(headCell, table, dirType) {

        // Clear the previous sort arrow.
        sort_dir_selector = '.sorttable_elSortDir' + table.table_number;
        var elSortDir = table.querySelector(sort_dir_selector);
        if (elSortDir) {
            vjs_removeChild(elSortDir);
        }

        // if reverting, we don't add back anything here.
        if (dirType === 'revert') {
            return;
        }

        elSortDir = document.createElement('span');
        // Set the id & concat with the table_number for uniqueness by table.
        elSortDir.className = "sorttable_elSortDir" + table.table_number;
        // Append the span to the column we are sorting.
        headCell.appendChild(elSortDir);

        // Append a direction arrow to show the sort order.
        if (dirType === 'initial') {
            elSortDir.innerHTML = vjs_hasClass(headCell, 'sort_default_asc') ? '<br>&#9650;' : '<br>&#9660;';
        } else if (dirType === 'reverse') {
            // opposite of the previous.
            elSortDir.innerHTML = !vjs_hasClass(headCell, 'sort_default_asc') ? '<br>&#9650;' : '<br>&#9660;';
        }

        return;
    },

    /* *********************************************************************
       # Usage       :   sr_sorttable.sortOnColumnInitial()
       # Purpose     :   takes a completely virgin unsorted column and sorts it.
       # Returns     :   nothing
       # Parameters  :   headCell  (the thead.th that was clicked.)
       # Throws      :
       # See Also    :
       # Comments :  
       ********************************************************************** */
    sortOnColumnInitial: function(headCell, table) {
        vjs_addClass(table, 'is_sorted');

        // Search the document for the span with the order arrow &
        // remove it.
        sr_sorttable.addSortDirArrow(headCell, table, 'initial');

        // build an array to sort.  we "decorate" each row with the actual sort
        // key,
        //  row_array[i][0] = sort key,
        //  row_array[i][1] = pointer to the row
        // we then sort based on the sort keys, and then put the rows
        // back in order which is a lot faster because you only do
        // getInnerText once per row
        var row_array = [];

        var col = headCell.sorttable_columnindex;
        var rows = table.sorttable_tbody.rows;

        // run through the rows to fill row_array
        for (var i = 0, max = rows.length; i < max; i++) {
            row_array[i] = [sr_sorttable.getInnerText(rows[i].cells[col]), rows[i]];
        }

        /* We have a number of different sorting options here.  Since
         * our list size is relatively small I'm implmenting a
         * quicksort with the variation that it is stable, so if we
         * sort on another column first that column will stay sorted
         * relative to the new key. */
        // Note that this returns sort in ascending order. 
        row_array = sr_sorttable.quicksort_stable(row_array, headCell.sorttable_sortfunction);


        // See if we want to sort this column by ascending first
        // rather than descending. If there is not a class in the
        // header, we sort by descending by default.
        if (!vjs_hasClass(headCell, 'sort_default_asc')) {
            row_array.reverse();
        }

        // run through and append the rows to the tbody. appending a
        // row that is already part of the tbody causes it to leave
        // it's current area and be re-appended.
        // Also we pull any blank rows out there and then insert them at the
        // end.  We also pull any .thead rows out here.
        var tb = table.sorttable_tbody;
        var blank_array = [];
        var blank_count = 0;
        for (var i = 0, max = row_array.length; i < max; i++) {
            if ((row_array[i][0] === '') ||
                vjs_hasClass(row_array[i][1], 'thead') ||
                vjs_hasClass(row_array[i][1], 'hidden') ||
                vjs_hasClass(row_array[i][1], 'tfoot')) {

                if (!vjs_hasClass(row_array[i][1], 'hidden')) {
                    row_array[i][1].blank = true;
                }
                blank_array[blank_count] = row_array[i][1];
                blank_count++;
            } else {
                tb.appendChild(row_array[i][1]);
                row_array[i][1].blank = false;
            }
        }

        for (i = 0, max = blank_array.length; i < max; i++) {
            tb.appendChild(blank_array[i]);
        }

        // Save some memory and reset soem styles.
        // sr_perf_logPerformance('sorttable:'+table.id+':'+i+':aa');
        delete row_array;
        headCell.style.backgroundColor = '';
        headCell.style.color = '';

        // remove sort_col from the headrowCells and colgroup entries.
        var elCols = table.getElementsByTagName('col');
        for (var ii = 0, max = table.headrowCells.length; ii < max; ii++) {
            vjs_removeClass(table.headrowCells[ii], 'sort_col');
            vjs_removeClass(table.colgroupCols[ii], 'sort_col');
        }

        // Set the newly sorted column's class.
        vjs_addClass(table.headrowCells[col], 'sort_col');
        vjs_addClass(table.colgroupCols[col], 'sort_col');

        // set the last sorted column, so we can check this later to see if we are
        // resorting a columns.
        sr_last_sorted_column = col;

        // track this event, but only the first sort.
        sr_record_analytics_event('sort_table', sr_record_directory(), table.id);
    },

    /* *********************************************************************
       # Usage       :   sr_sorttable.sortOnColumnReverse()
       # Purpose     :   on second click simply reverses the column
       # Returns     :   nothing
       # Parameters  :   headCell  (the thead.th that was clicked.)
       # Throws      :
       # See Also    :
       # Comments :  
       ********************************************************************** */
    sortOnColumnReverse: function(headCell, table) {

        // if we're already sorted by headCell column, just 
        // reverse the table, which is quicker
        sr_sorttable.reverseTable(table.sorttable_tbody);

        // Add an arrow to the header cell to show direction of sort.
        // remove any old ones, and then add the new one.

        sr_sorttable.addSortDirArrow(headCell, table, 'reverse');
        return;
    },

    /* *********************************************************************
     # Usage       :   sr_sorttable.sortOnColumnRevert()
     # Purpose     :   on third click simply reverts the column to
     previous pristine condition
     # Returns     :   nothing
     # Parameters  :   headCell  (the thead.th that was clicked.)
     # Throws      :
     # See Also    :
     # Comments :  
     ********************************************************************** */
    sortOnColumnRevert: function(headCell, table) {
        vjs_removeClass(table, 'is_sorted');
        // we want to return this to its default order.
        sr_sorttable.defaultOrder(table.sorttable_tbody);
        sr_sorttable.addSortDirArrow(headCell, table, 'revert');

        // sr_perf_logPerformance('sorttable:'+table.id+':'+i+':h');
        // remove all webdings
        col = headCell.sorttable_columnindex;

        vjs_removeClass(table.headrowCells[col], 'sort_col');
        vjs_removeClass(table.colgroupCols[col], 'sort_col');
        sr_last_sorted_column = -1;
        return;
    },

    /* *********************************************************************
       # Usage       :   sorttable.guessType(table,column_idx)
       # Purpose     :   determines the type of values in the column we are sorting
       # Returns     :   a function (sort_[numeric | alpha | mmdd | ddmm ]
       # Parameters  :   a table dom element, column
       # Throws      :
       # See Also    :
       # Comments    :  if you need a specialized sort it would go here.  
       ********************************************************************** */
    guessType: function(table, column) {

        // guess the type of a column based on its first non-blank row
        sortfn = sr_sorttable.sort_alpha;

        for (var i = 0, max = table.sorttable_tbody.rows.length; i < max; i++) {

            // get the text for the cells.
            var text = sr_sorttable.getInnerText(table.sorttable_tbody.rows[i].cells[column]);

            // check if non-empty
            if (text != '') {
                if (text.match(/^-?[\d.]+$/)) {
                    return sr_sorttable.sort_numeric_trust;
                } else if (text.match(/^-?[?$?]?[\d,.:]+%?$/)) {
                    return sr_sorttable.sort_numeric;
                }
                // check for a date: dd/mm/yyyy or dd/mm/yy 
                // can have / or . or - as separator
                // can be mm/dd as well
                var possdate = text.match(sr_sorttable.DATE_RE);
                if (possdate) {
                    // looks like a date
                    first = parseInt(possdate[1]);
                    second = parseInt(possdate[2]);
                    if (first > 12) {
                        // definitely dd/mm
                        return sr_sorttable.sort_ddmm;
                    } else if (second > 12) {
                        return sr_sorttable.sort_mmdd;
                    } else {
                        // looks like a date, but we can't tell which, so assume
                        // that it's dd/mm (English imperialism!) and keep looking
                        sortfn = sr_sorttable.sort_ddmm;
                    }
                }
            }
        }
        return sortfn;
    },

    /* *********************************************************************
       # Usage       :   sr_sorttable.getInnerText(td node)
       # Purpose     :   returns the value inside the node we are given
       # Returns     :   a string
       # Parameters  :   a table dom element (typically a td element),
                           boolean skipCsk, don't check for csk's.
                           suppressAppend, if the entry has a data-append-csv value and
                             append it |value to this entry unless suppressed.
     
       # Throws      :   
       # See Also    :
       # Comments    :   if there is a custom sort key (csk) it will read that as well.
       ********************************************************************** */
    getInnerText: function(node, skipCsk, suppressAppend) {

        // gets the text we want to use for sorting for a cell.
        // strips leading and trailing whitespace.  this is *not* a
        // generic getInnerText function; it's special to sorttable.
        // for example, you can override the cell text with a
        // customkey attribute.  it also gets .value for <input>
        // fields.
        if (!node) return '';

        var hasInputs = (typeof node.getElementsByTagName === 'function') &&
            node.getElementsByTagName('input').length;

        var append = '';
        if (!suppressAppend && vjs_hasAttr(node, 'data-append-csv')) {
            append = sr_append_csv_string + vjs_getAttr(node, 'data-append-csv');
        }


        // check the csk value or data-csk value
        if (!skipCsk && vjs_getAttr(node, "data-csk") !== undefined && vjs_getAttr(node, "data-csk") !== false && vjs_getAttr(node, "data-csk") !== null) {
            return vjs_getAttr(node, "data-csk") + append;
        } else if (!skipCsk && vjs_getAttr(node, "csk") !== undefined && vjs_getAttr(node, "csk") !== false && vjs_getAttr(node, "csk") !== null) {
            return vjs_getAttr(node, "csk") + append;
        }

        // run through various types of getting text for browsers and
        // strip any leading or trailing spaces.
        else if (!hasInputs && typeof node.textContent != 'undefined') {
            return node.textContent.replace(/^\s+|\s+$/g, '') + append;
        } else if (!hasInputs && typeof node.innerText != 'undefined') {
            return node.innerText.replace(/^\s+|\s+$/g, '') + append;
        } else if (!hasInputs && typeof node.text != 'undefined') {
            return node.text.replace(/^\s+|\s+$/g, '') + append;
        } else {
            switch (node.nodeType) {
                case 3:
                    if (node.nodeName.toLowerCase() === 'input') {
                        return node.value.replace(/^\s+|\s+$/g, '') + append;
                    }
                case 4:
                    return node.nodeValue.replace(/^\s+|\s+$/g, '') + append;
                case 1:
                case 11:
                    var innerText = '';
                    for (var i = 0, max = node.childNodes.length; i < max; i++) {
                        innerText = innerText + sr_sorttable.getInnerText(node.childNodes[i]) + append;
                    }
                    return innerText.replace(/^\s+|\s+$/g, '') + append;
                default:
                    return '';
            }
        }
    },

    /* *********************************************************************
       # Usage       :   sr_sorttable.reverse()
       # Purpose     :   reverses the rows of the tbody element
       # Returns     :   nothing
       # Parameters  :   a tbody dom element
       # Throws      :
       # See Also    :
       # Comments :  
       ********************************************************************** */
    reverseTable: function(tbody) {

        // reverse the rows in a tbody
        var newrows = [],
            blank_rows = [];
        var newcount = 0,
            blank_count = 0;
        for (var i = 0, max = tbody.rows.length; i < max; i++) {
            if ((tbody.rows[i].blank === true) ||
                vjs_hasClass(tbody.rows[i], 'hidden')) {
                blank_rows[blank_count] = tbody.rows[i];
                blank_count++;
            } else {
                newrows[newcount] = tbody.rows[i];
                newcount++;
            }
        }


        for (var i = newrows.length - 1; i >= 0; i--) {
            if (newrows[i]) {
                tbody.appendChild(newrows[i]);
            }
        }
        delete newrows;
        for (var i = blank_rows.length - 1; i >= 0; i--) {
            if (blank_rows[i]) {
                tbody.appendChild(blank_rows[i]);
            }
        }
        delete blank_rows;
    },

    /* *********************************************************************
       # Usage       :   sr_sorttable.defaultOrder()
       # Purpose     :   returns the rows to their default ordering
       # Returns     :   nothing
       # Parameters  :   a tbody dom element
       # Throws      :
       # See Also    :
       # Comments :  
       ********************************************************************** */
    defaultOrder: function(tbody) {

        // check if we are table.long, because
        // we turn off the row building.
        var table = tbody.parentNode;
        var is_long = false;
        if (vjs_hasClass(table, 'long')) {
            is_long = true;
        }

        // return the rows to their default.
        newrows = [];
        for (var i = 0, max = tbody.rows.length; i < max; i++) {
            var row = tbody.rows[i];
            newrows[vjs_getAttr(row, 'data-row')] = row;
        }

        for (var i = 0, max = newrows.length; i < max; i++) {
            if (newrows[i]) {
                tbody.appendChild(newrows[i]);
            }
        }
        delete newrows;
    },

    /* *********************************************************************
       # Usage       :   sr_sorttable.sort_"type"()
       # Purpose     :   sorts the data based on the type found in guessType
       # Returns     :   nothing
       # Parameters  :   two arrays
       # Throws      :
       # See Also    :
       # Comments :      to create a new sort add a new function here and in guessType
       ********************************************************************** */
    /* sort functions each sort function takes two parameters, a and b
     you are comparing a[0] and b[0] */
    sort_numeric: function(a, b) {
        // In this case we are assuming that these are well-formed
        // numbers in this column, and will sort according.
        var aa = parseFloat(a[0].replace(/[^0-9.-]/g, ''));
        if (isNaN(aa)) aa = 0;
        var bb = parseFloat(b[0].replace(/[^0-9.-]/g, ''));
        if (isNaN(bb)) bb = 0;
        return aa - bb;
    },
    sort_numeric_trust: function(a, b) {
        // assuming that these are well-formed numbers in this column,
        // and will sort WITHOUT replacing non-digits and using
        // parseFloat.
        return a[0] - b[0];
    },
    sort_alpha: function(a, b) {
        var alc = a[0].toLowerCase();
        var blc = b[0].toLowerCase();
        return alc.localeCompare(blc);
    },
    sort_ddmm: function(a, b) {
        var mtch = a[0].match(sr_sorttable.DATE_RE);
        var y = mtch[3];
        var m = mtch[2];
        var d = mtch[1];
        if (m.length === 1) m = '0' + m;
        if (d.length === 1) d = '0' + d;
        var dt1 = y + m + d;
        mtch = b[0].match(sr_sorttable.DATE_RE);
        y = mtch[3];
        m = mtch[2];
        d = mtch[1];
        if (m.length === 1) m = '0' + m;
        if (d.length === 1) d = '0' + d;
        var dt2 = y + m + d;
        if (dt1 === dt2) return 0;
        if (dt1 < dt2) return -1;
        return 1;
    },
    sort_mmdd: function(a, b) {
        var mtch = a[0].match(sr_sorttable.DATE_RE);
        var y = mtch[3];
        var d = mtch[2];
        var m = mtch[1];
        if (m.length === 1) m = '0' + m;
        if (d.length === 1) d = '0' + d;
        var dt1 = y + m + d;
        mtch = b[0].match(sr_sorttable.DATE_RE);
        y = mtch[3];
        d = mtch[2];
        m = mtch[1];
        if (m.length === 1) m = '0' + m;
        if (d.length === 1) d = '0' + d;
        var dt2 = y + m + d;
        if (dt1 === dt2) return 0;
        if (dt1 < dt2) return -1;
        return 1;
    },


    /* *********************************************************************
       # Usage       :   sr_sorttable.quicksort
       # Purpose     :   sorts the data using the fastest algorithm available and is stable
       # Returns     :   nothing
       # Parameters  :   array and comparison function
       # Throws      :
       # See Also    :   this version of the below quicksort is stable.
       # Comments :   from http://acatalept.com/blog/2008/10/28/stable-quicksort-in-javascript/
       ********************************************************************** */
    quicksort_stable: function(arr, comp_func) {

        // return if array is unsortable
        if (arr.length <= 1) {
            return arr;
        }

        var less = Array(),
            greater = Array();

        // select and remove a pivot value pivot from array
        // a pivot value closer to median of the dataset may result in better performance
        var pivotIndex = Math.floor(arr.length / 2);
        var pivot = arr.splice(pivotIndex, 1)[0];

        // step through all array elements
        for (var x = 0, max = arr.length; x < max; x++) {

            // if (current value is less than pivot),
            // OR if (current value is the same as pivot AND this index is less than the index of the pivot in the original array)
            // then push onto end of less array
            if ((comp_func(arr[x], pivot) < 0) ||
                (comp_func(arr[x], pivot) === 0 && x >= pivotIndex) // this maintains the original order of values equal to the pivot
            ) {
                less.push(arr[x]);
            }
            // if (current value is greater than pivot),
            // OR if (current value is the same as pivot AND this index is greater 
            // than or equal to the index of the pivot in the original array)
            // then push onto end of greater array
            else {
                greater.push(arr[x]);
            }
        }

        // concatenate less+pivot+greater arrays
        return sr_sorttable.quicksort_stable(less, comp_func).concat([pivot], sr_sorttable.quicksort_stable(greater, comp_func));
    },

    /* *********************************************************************
     # Usage       :   rehideTable
     # Purpose     :   hides and shows rows as appropriate.
     # Returns     :   
     # Parameters  :   
     # Throws      :
     # See Also    :
     # Comments :  table.skip_rehide causes us to skip this rehiding behaviour
     #  on some tables.  Basically any tables that initially have hidden rows get this
     # behaviour.
     ********************************************************************** */
    rehideTable: function(table, headCell, sort_dir) {

        if (!table || !headCell || table.skip_rehide) {
            return;
        }
        var col = headCell.sorttable_columnindex;

        // Get a handle on the last head row in the thead tag for this
        // table.
        var hidePartialRowsSort = false;
        var hidePartialRowsButton = false;
        var hideToggleRowsButton = false;
        var hideNonQuals = false;

        /////////////////////////////////////////////////////////////////////
        // This is a column where we want to show all rows even partial ones.
        // we go through here and we need to toggle the control for partial
        // row depending on if we want show all rows or show partials when sorting
        /////////////////////////////////////////////////////////////////////
        if (table.partial_button === 'clickshow') {
            hidePartialRowsSort = false;
        } else if ((sort_dir != 'revert') && !vjs_hasClass(headCell, 'show_partial_when_sorting')) {
            hidePartialRowsSort = true;
        }

        // check to see if we are hiding partials due to a button click.
        if (table.partial_button === 'clickhide') {
            hidePartialRowsButton = true;
        }
        // check to see if we are hiding partials due to a button click.
        if (table.toggle_button === 'clickhide') {
            hideToggleRowsButton = true;
        }

        /////////////////////////////////////////////////////////////////////
        // For rate stats, we may want to hide non-qualifiers. they have a class
        // non_qual set on the row.
        /////////////////////////////////////////////////////////////////////
        // This is a column where we want to hide the non_qual rows, 
        var form_qual = document.getElementById('fs_' + table.id);
        if ((sort_dir != 'revert') &&
            vjs_hasClass(headCell, 'hide_non_quals') &&
            (form_qual && form_qual.hide_non_quals && form_qual.hide_non_quals.checked)
        ) {
            hideNonQuals = true;
        }

        // This is to change the toggle depending on what we have here.
        // if we are going to hide due to a sort we want to change the
        // toggle to the hidden option 

        // we want to change the toggle to show partial if we are sorting for the first time.
        // we want to change the toggle to hide partial if we are reverting & hidePartialRowsButton is false.
        var oSpan = document.getElementById(table.id + '_toggle_partial_table');
        if ((sort_dir != 'revert') &&
            oSpan &&
            ((table.partial_button === 'noclick') || (table.partial_button === 'clickhide') || (table.partial_button === 'sorthide'))) {

            // set the button to click hide
            if (table.partial_button === 'noclick') {
                table.partial_button = 'sorthide';
            }
            // revert to "Hide Partials"
            oSpan.innerHTML = oSpan.innerHTML.replace('Hide', 'Show');
            oSpan.style.backgroundColor = '#ffa';
        } else if (!hidePartialRowsButton && (sort_dir === 'revert') && oSpan) {
            // revert to "Hide Partials"
            if (table.partial_button === 'sorthide') {
                table.partial_button = 'noclick';
                oSpan.innerHTML = oSpan.innerHTML.replace('Show', 'Hide');
                oSpan.style.backgroundColor = '#fff';
            }
        }

        // run through the rows.
        for (var i = 0, max = table.rows.length; i < max; i++) {

            // Assume the row is visible and get the row.
            var rowEl = table.rows[i];

            // loop if for some reason we have no rowEl.
            if (!rowEl) continue;

            // show all rows by default.
            vjs_removeClass(rowEl, 'hidden');

            // if the partial_table button has been clicked,
            // we hide the necessary rows always.
            if (hidePartialRowsButton && vjs_hasClass(rowEl, 'partial_table')) {
                vjs_addClass(rowEl, 'hidden');
            }
            if (hideToggleRowsButton && vjs_hasClass(rowEl, 'toggle')) {
                vjs_addClass(rowEl, 'hidden');
            }

            // the remainder need us to not be doing a revert.
            if (sort_dir === 'revert') {
                continue;
            }

            // Drop all of the theads if we are sorting
            if (vjs_hasClass(rowEl, 'thead')) {
                vjs_addClass(rowEl, 'hidden');
            }

            // if we are sorting, we hide partials.
            if (hidePartialRowsSort && vjs_hasClass(rowEl, 'partial_table')) {
                vjs_addClass(rowEl, 'hidden');
            }

            // drop any non_quals if the button is hiding it or if they 
            if (hideNonQuals &&
                rowEl.cells[col] &&
                (vjs_hasClass(rowEl, 'non_qual') || vjs_hasClass(rowEl.cells[col], 'non_qual'))) {
                // hide the row
                vjs_addClass(rowEl, 'hidden');
            }
        }
    },



    /* *********************************************************************
     # Usage       :   regroupRows
     # Purpose     :   place tr.group_start based on sorted column
     # Returns     :   
     # Parameters  :   sort_dir can be revert, reverse, initial
     # Throws      :
     # See Also    :
     # Comments :    only run on table.make_group_start
     ********************************************************************** */
    regroupRows: function(table, headCell, sort_dir) {
        if (!table || !headCell || !vjs_hasClass(table, 'mark_group_start')) {
            return;
        }
        var remove_groups = false;

        // for a numeric column, show no groups.
        if ((headCell.sorttable_sortfunction === sr_sorttable.sort_numeric_trust) || (headCell.sorttable_sortfunction === sr_sorttable.sort_numeric)) {
            console.log('regroupRows on a number column');
            remove_groups = true;
        }

        var col = headCell.sorttable_columnindex;
        var last_value = 'b';
        // run through the rows.
        var tbody = table.tBodies[0];
        for (var i = 0, max = tbody.rows.length; i < max; i++) {

            // Assume the row is visible and get the row.
            var rowEl = tbody.rows[i];

            // loop if for some reason we have no rowEl.
            if (!rowEl) continue;

            // show all rows by default.
            vjs_removeClass(rowEl, 'group_start');

            // get the current_value
            var current_value = sr_sorttable.getInnerText(rowEl.cells[col]);

            if (sort_dir === 'revert') {
                if (vjs_hasClass(rowEl, 'default_group_start')) {
                    vjs_addClass(rowEl, 'group_start');
                }
            } else if (remove_groups) {
                // this is just a dummy, since we really just want to do nothing in this case.
                last_value = current_value;
            } else if (last_value && (last_value !== current_value)) {
                vjs_addClass(rowEl, 'group_start');
            }

            last_value = current_value;
        }
    },


    /* *********************************************************************
     # Usage       :   
     # Purpose     :   
     # Returns     :   
     # Parameters  :   
     # Throws      :
     # See Also    :
     # Comments : 
     ********************************************************************** */
    recolorTable: function(table) {
        // Check the first columns to see if it is a ranker column.
        if (!vjs_hasClass(table.headrowCells[0], 'ranker')) { // We have a ranker column.
            return;
        }

        var rankerCount = 0;
        // run through the rows.
        for (var i = 0, max = table.sorttable_tbody.rows.length; i < max; i++) {
            var rowEl = table.sorttable_tbody.rows[i];
            // Set the ranker column value here.
            if (!vjs_hasClass(rowEl, 'hidden') && !vjs_hasClass(rowEl, 'thead') && !vjs_hasClass(rowEl, 'spacer') && !vjs_hasClass(rowEl, 'norank')) {
                rankerCount++;
                rowEl.cells[0].innerHTML = rankerCount;
            }
        }

        // update the control button with the current ranker count.
        var control = document.querySelector('#' + table.id + '_control span');
        if (control) {
            control.innerHTML = rankerCount;
        }
    },

    /* ***********************************************************
     move_tooltips_to_first_row
     
     If we've called up the tooltips and sorted, we always want to move
     them back to the first entry.
     
     ********************************************************* */
    move_row_safe: function(table, from, to) {
        if (from === to) {
            return;
        }
        var tbody = table.sorttable_tbody; // Use tbody
        var row = tbody.rows[from]; // Make sure row stays referenced
        var insertPos = tbody.rows[to];

        var parent = row.parentNode;

        parent.removeChild(row);
        parent.insertBefore(row, insertPos);
    },

    /* *********************************************************************
     # Usage       :   
     # Purpose     :   
     # Returns     :   
     # Parameters  :   
     # Throws      :
     # See Also    :
     # Comments : 
     ********************************************************************** */
    move_tooltips_to_first_row: function(table) {
        //alert(table_dom.id);

        // Figure out if there is a tooltip row.
        var tips_row = table.querySelector('tr.delete_this_tip');

        // Get the tooltip rows index. and move it to the index of the
        // first row after thead.
        if (tips_row) {
            var old_idx = tips_row.rowIndex - table.tHead.rows.length;
            var new_idx = 0;
            sr_sorttable.move_row_safe(table, old_idx, new_idx);
        }
    },


    /* *********************************************************************
       # Usage       :   sr_sorttable.useDocHashValue
       # Purpose     :   a means for sorting when the page loads.
       # Returns     :   
       # Parameters  :   table_id, sorted_column, focus_here
       # Throws      :
       # Comments    :  

       Takes the document hash value onload and attempts to sort the
       tables as needed.

       The hashes have the form
       table_name::sorted_column;;table_name2::sorted_column2

       ********************************************************* */
    useDocHashValue: function() {

        // Parse the existing hash and check to see if this table_name
        // is already set here.
        var current_hash = window.location.hash;
        if (current_hash === "") {
            return true;
        }

        if (current_hash.charAt(0) === '#') {
            var drop_hash = current_hash.substring(1);
            current_hash = drop_hash;
        }

        var arr_sorted_tables = new Array;
        var arr_tables_keys = new Array;
        arr_sorted_tables = current_hash.split(/;;/);
        for (var i = 0, max = arr_sorted_tables.length; i < max; i++) {
            // Get the table id and the column to sort.
            arr_tables_keys = arr_sorted_tables[i].split('::');
            if (arr_tables_keys.length < 2) {
                return true;
            }
            // see if we are given a column number here.
            else if (/^[0-9]+$/.test(arr_tables_keys[1]) || (arr_tables_keys[1] === 'none')) {
                // none
                var table_id = arr_tables_keys[0];

                // since some mobile tables are commented out to start
                // we need to first see if we have to load those
                // tables in.
                sr_sorttable.clickTableControl(table_id);

                // The (i === 0) is for a focus boolean.  We want the
                // browser window to focus on only the first table we have sorted.
                //if (document.getElementById(table_id) && (arr_tables_keys[1] !== 'none')) {
                if (document.getElementById(table_id)) {
                    sr_sorttable.delay_sortOnLoad(table_id, arr_tables_keys[1], (i === 0));
                }
            }
            // check to see if we have a stat id that matches a stat in this table
            else if (/[a-z]/.test(arr_tables_keys[1])) {
                // none
                var table_id = arr_tables_keys[0];

                // since some mobile tables are commented out to start
                // we need to first see if we have to load those
                // tables in.
                sr_sorttable.clickTableControl(table_id);

                // get the table
                var table_to_sort = document.getElementById(table_id);
                var row_header = table_to_sort.tHead.rows[table_to_sort.tHead.rows.length - 1];
                var idx = -1;
                var count = 0;
                vjs_forEach.call(row_header.cells, function(cell, index) {
                    if (vjs_getAttr(cell, 'data-stat') === arr_tables_keys[1]) {
                        idx = count;
                    } else {
                        count = count + 1;
                    }
                });

                console.log('### Trying to sort based on the idx:' + idx);


                if (idx === -1) {
                    return false;
                }

                // The (i === 0) is for a focus boolean.  We want the
                // browser window to focus on only the first table we have sorted.
                if (document.getElementById(table_id)) {
                    sr_sorttable.delay_sortOnLoad(table_id, idx, (i === 0));
                }
            }

        }
        return false;
    },


    /* *********************************************************************
     # Usage       :   clickTableControl
     # Purpose     :   some tables are hidden on load, so this unhides them when
                          the user is trying to use a deep link to them
     # Returns     :   
     # Parameters  :   table_id
     # Throws      :
     # See Also    :  
     ********************************************************************** */
    delay_sortOnLoad: function(table_id, keys, focus) {
        setTimeout(function() { sr_sorttable.sortOnLoad(table_id, keys, focus); }, 150);
    },
    clickTableControl: function(table_id) {

        // check if the table isn't in the dom and if we aren't doing
        // a ks (kitchen_sink) table.
        // 
        if (!document.getElementById(table_id) && !table_id.match(/_ks_/)) {
            // this id does not exist see if it's commented
            // out and click on the control if so.
            var selector = '#all_' + table_id + ' .comment_control';
            var control = document.querySelector(selector);
            if (control) {
                vjs_triggerEvent(control, 'click');
            }
        } else if (!document.getElementById(table_id) && table_id.match(/_ks_/)) {
            // this id does not exist see if it's commented
            // out and click on the control if so.
            var ks_id = table_id.replace(/^stats_/, 'kitchen_sink_');
            ks_id = ks_id.replace(/_ks_.*/, '_control');
            console.log("### trying to click a ks entry:" + ks_id);
            var control = document.getElementById(ks_id);
            if (control) {
                vjs_triggerEvent(control, 'click');
            }

        }

        // Next click the relevant control the above opens up the div
        // we want to see, but if it's a ks table that was hidden
        // before we may then need to also click on the tab for the ks
        // table set.
        if (document.getElementById('button_' + table_id)) {
            var control = document.getElementById('button_' + table_id);
            if (control) {
                vjs_triggerEvent(control, 'click');
            }
        }
    },
    /* *********************************************************************
     # Usage       :   sortOnLoad
     # Purpose     :   a means for sorting when the page loads.
     # Returns     :   
     # Parameters  :   table_id, sorted_column, focus_here
     # Throws      :
     # See Also    :  
     ********************************************************************** */
    sortOnLoad: function(table_id, sorted_column, focus_here) {
        var table = document.getElementById(table_id);
        if (!table) { return; }

        console.log("### sortOnLoad, table: " + table_id + ', sorted_column:' + sorted_column + ', focus_here:' + focus_here);
        console.log(table);
        console.log(table.headrowCells);
        if (sorted_column !== 'none') {
            if (!document.all) {
                var fireOnThis = table.headrowCells[sorted_column];
                var evObj = document.createEvent('MouseEvents');
                evObj.initEvent('click', true, true);
                fireOnThis.dispatchEvent(evObj);
            } else {
                var fireOnThis = table.headrowCells[sorted_column];
                fireOnThis.fireEvent('onclick');
            }
        }

        if (focus_here) {
            vjs_setAttr(table, 'tabindex', '-1');
            table.focus();
            window.scrollY += 1;
            var current_hash = window.location.hash;
            // sr_set_interior_link_with_frozen(table_id.concat('_link'));
            //sr_set_interior_link_with_frozen(current_hash);
        }
    },

    /* ***********************************************************
     setDocHashValue
     
     Takes a table and column and adds a sort command to the hash result
     for use later in providing a bookmarkable link.   
     
     The hashes have the form
     table_id::sorted_column;;table_id2::sorted_column2
     
     ********************************************************* */
    setDocHashValue: function(table_id, sorted_column) {
        // Parse the existing hash and check to see if this
        // table_id is already set here.

        //alert("set doc_hash");
        var current_hash = window.location.hash;
        if (current_hash.charAt(0) === '#') {
            var drop_hash = current_hash.substring(1);
            current_hash = drop_hash;
        }

        var arr_sorted_tables = new Array;
        var arr_tables_keys = new Array;
        var arr_new_hash = new Array;
        var has_found_table = 0;

        arr_sorted_tables = current_hash.split(/;;/);

        for (var i = 0, max = arr_sorted_tables.length; i < max; i++) {
            arr_tables_keys = arr_sorted_tables[i].split(/::/);
            if (arr_tables_keys[0] === table_id) {
                has_found_table = 1;
                arr_tables_keys[1] = sorted_column;
            }

            if (arr_tables_keys.length === 2) {
                arr_new_hash.push(arr_tables_keys.join('::'));
            }
        }

        // For a table not in the hash
        if (!has_found_table) {
            arr_new_hash.push(table_id + '::' + sorted_column);
        }

        // Reset the window's hash.
        window.location.hash = arr_new_hash.join(';;');
    },

    /* ***********************************************************
     setDirectLinkValue
     
     Takes a table and column and replaces a direct link in that table
     with a table_id::column_number pair that can be used to then send a
     link to someone else.
     
     The hashes have the form
     table_id::sorted_column
     
     ********************************************************* */
    setDirectLinkValue: function(table_id, sorted_column) {
        // Parse the existing hash and check to see if this table_id is
        // already set here.

        //alert("set doc_hash");
        var link = document.getElementById('a_' + table_id);
        if (link) {
            vjs_setAttr(link, 'href', '#' + table_id);
            if (sorted_column) {
            	vjs_setAttr(link, 'href', '#' + table_id + '::' + sorted_column);
            } else {
            	vjs_setAttr(link, 'href', '#' + table_id + '::none');
            }
        }
    }

}




/* *********************************************************************
   # Usage       :   sr_st_statline_appendTableControls
   # Purpose     :   adds all of the js table controls to the tables automatically
   # Returns     :   nothing
   # Parameters  :   none
   # Throws      :
   # See Also    :

   # Comments :
   By default this is added to all tables with class="stats_table sortable" ||  class="show_controls"

   
   Full list of outputs added to the table controls are.
   Glossary - pulled from the tip values for this table.
   Hide Partial - to hide partial_table rows
   Show Minors - to show minors_table rows
   SHARE - to open up the share option.
   CSV - to create a csv output
   PRE to create a pre-formatted output
   LINK - to create a direct link to this table even if sorted.
   ZOOM - to attach a zoom class to the rows.
   More Tools - explain the sorting and row summing.


   You can suppress each of these outputs by adding a class to the table of  partial table text by adding a class "suppress_partial" to the table.
   supress_all
   suppress_glossary, suppress_partial, suppress_share, suppress_csv, suppress_pre, suppress_link, suppress_more


  here: use the onclick handler rather than appending it in the html
 ********************************************************************** */
function sr_st_statline_appendTableControls(id) {
    console.log('   ### enter sr_st_statline_appendTableControls');

    var baseNode = document.createElement("BUTTON");
    var baseNode_li = document.createElement("LI");
    baseNode.innerHTML = '';
    vjs_addClass(baseNode, 'tooltip');
    vjs_setAttr(baseNode, 'tip', '');
    vjs_setAttr(baseNode, 'type', 'button');
    baseNode.onclick = function(e) {};
    var newNode, newNode_li;

	var statsTable = document.querySelector('#' + id);
	var sectionHeader = document.querySelector('#' + id + '_sh');
	var tableHeadingText;
	var statsTableId = id;
	var nodesShare = [];
	var nodesTable = [];


	// make sure this has a .section_heading
	table_node_loop: if (sectionHeader &&
		!vjs_hasClass(sectionHeader, 'has_controls') &&
		(vjs_hasClass(statsTable, 'sortable') || vjs_hasClass(statsTable, 'add_controls')) &&
		!vjs_hasClass(statsTable, 'suppress_all') &&
		(tableHeadingText = sectionHeader.querySelector('.section_heading_text, .table_heading_text'))
	) 
	{

		/////////////////////////////////////////////////////////////////////////////////////////////
		// 0z. add a control for non-qualifiers.
		/////////////////////////////////////////////////////////////////////////////////////////////
		if (vjs_hasAttr(statsTable, 'data-non-qual')) {
			var qual_label = vjs_getAttr(statsTable, 'data-qual-label') || __sr_text_hide_non_quals;
			var qual_text = vjs_getAttr(statsTable, 'data-qual-text');
			var qualNum = statsTable.querySelectorAll('.non_qual').length;
			if (qualNum) {
				newNode = document.createElement('FORM');
				newNode_li = baseNode_li.cloneNode();

				// set up the control
				newNode.className = 'non_qual_switch';
				newNode.name = 'form_sortable';
				newNode.id = 'fs_' + statsTable.id;

				var labelText = qual_label;
				if (qual_text) {
					labelText = '<button data-text="' + qual_text + '" class="modal" type="button">' + qual_label + '</button>';
				}

				newNode.innerHTML = '<input type=checkbox name=hide_non_quals value=1 checked id="fs_check_'
					+ statsTable.id
					+ '" onchange="sr_sorttable.sortOnColumn(null,\''
					+ statsTable.id
					+ '\', true);" onclick="sr_record_analytics_event(\'hide_non_quals\', sr_record_directory(), sr_record_page())"><label for="fs_check_'
					+ statsTable.id
					+ '">'
					+ labelText
					+ '</label>';

				// attach the modal control to the new button we added.

				sr_display_modalShow(newNode);
				newNode_li.appendChild(newNode);
				nodesTable.push(newNode_li);
			}

		}


		/////////////////////////////////////////////////////////////////////////////////////////////
		// 1.Add a glossary to the nodes.
		/////////////////////////////////////////////////////////////////////////////////////////////
		if (!vjs_hasClass(statsTable, 'suppress_glossary')) {
			// check to see if there are any glossary entries on this statsTable
			var tips = statsTable.querySelectorAll('th[data-tip]:not([data-tip=""]),th[tip]:not([tip=""])');
			if (tips.length > 0) {

				newNode = baseNode.cloneNode();
				newNode_li = baseNode_li.cloneNode();
				newNode.innerHTML = __sr_text_glossary;
				vjs_setAttr(newNode, 'tip', __sr_text_show_glossary);
				newNode.onclick = function(e) {
					console.log('   ### stats_table.glossary.onclick enter');
					var is_glossary_open = sr_display_showPopup(e, this, sr_st_statline_glossaryBuild(statsTableId));

					// Check to see if the glossary overflows
					var glossary = document.getElementById('sr_glossary');
					if (is_glossary_open && vjs_elementOverflows(glossary, 'y')) {
						vjs_addClass(glossary, 'has_overflow');
					}
					sr_record_analytics_event('glossary', sr_record_directory(), statsTable.id);
					console.log('   ### stats_table.glossary.onclick exit');
				};
				newNode_li.appendChild(newNode);
				nodesTable.push(newNode_li);
			}
		}

		/////////////////////////////////////////////////////////////////////////////////////////////
		// 1.Add a perMatch option to the nodes for fbref
		/////////////////////////////////////////////////////////////////////////////////////////////
		let denominator_stat = '';
		if (sr_SITE_ABB === 'fb') { 
			denominator_stat = 'minutes_90s'; 
		} 
		else if (((sr_SITE_ABB === 'pfr') || (sr_SITE_ABB === 'cfb') || (sr_SITE_ABB === 'cbb')) && vjs_hasClass(statsTable, 'per_match_toggle')) { 
			denominator_stat = 'g'; 
		}
		// switch from "g" to "games" if the match check failed
		if (denominator_stat === 'g' && !sr_st_check_for_perMatch(statsTable, denominator_stat)) {
			denominator_stat = 'games';
		}
		if (denominator_stat && sr_st_check_for_perMatch(statsTable, denominator_stat)) {
			// check to see if there are any glossary entries on this statsTable

			newNode = baseNode.cloneNode();
			newNode_li = baseNode_li.cloneNode();
			newNode.innerHTML = (sr_SITE_ABB === 'fb') ? __sr_text_per90 : 'Toggle Per-Game Stats';
			vjs_setAttr(newNode, 'tip', (sr_SITE_ABB === 'fb') ? __sr_text_per90_tip : 'Convert the counting stats in the table below to a per-match value.<br>Changed values will be shaded.');
			newNode.id = statsTable.id + '_per_match_toggle';
			newNode.onclick = function(e) {
				sr_st_compute_perMatch(statsTable, denominator_stat);
				sr_record_analytics_event('create per match', sr_record_directory(), statsTableId);
			};
			newNode_li.appendChild(newNode);
			nodesTable.push(newNode_li);
		}
		
		
		// improving the above -- once soc stats tables are fully implemented, remove above code and its associated functions
		if(statsTable.classList.contains('per_toggler')) {
			let denominator_stat = statsTable.dataset.autostatDivisor;
			let toggle_stat_list = statsTable.dataset.autostatList;
			toggle_stat_list = toggle_stat_list.replace((/'/g), "\"");
			try {
				toggle_stat_list = JSON.parse(toggle_stat_list);
			}
			catch (e) {
				toggle_stat_list = [];
			}

			newNode = baseNode.cloneNode();
			newNode_li = baseNode_li.cloneNode();
			newNode.innerHTML = (sr_SITE_ABB === 'fb') ? __sr_text_per90 : 'Toggle Per-Game Stats';
			vjs_setAttr(newNode, 'tip', (sr_SITE_ABB === 'fb') ? __sr_text_per90_tip : 'Convert the counting stats in the table below to a per-match value.<br>Changed values will be shaded.');
			newNode.id = statsTable.id + '_per_match_toggle';
			newNode.onclick = function(e) {
				sr_st_compute_autostat(statsTable, denominator_stat, toggle_stat_list);
				sr_record_analytics_event('create per match', sr_record_directory(), statsTableId);
			};
			newNode_li.appendChild(newNode);
			nodesTable.push(newNode_li);
		}

 
		/////////////////////////////////////////////////////////////////////////////////////////////
		// 1b. toggle to hide partial seasons
		/////////////////////////////////////////////////////////////////////////////////////////////
		var partialRowsNum = statsTable.querySelectorAll('tr.partial_table:not(.spacer)').length - statsTable.querySelectorAll('tr.partial_table.blank_table').length;
		if (!vjs_hasClass(statsTable, 'suppress_partial') && partialRowsNum > 0) {
			newNode = baseNode.cloneNode();
			newNode_li = baseNode_li.cloneNode();
			newNode.id = statsTableId + '_toggle_partial_table';
			newNode.innerHTML = __sr_text_hide_partial_rows;
			statsTable.partial_button = 'noclick';
			newNode.onclick = function(e) {
				// toggle the value of partial_button
				statsTable.partial_button =
					statsTable.partial_button === 'noclick' ? 'clickhide' :
					statsTable.partial_button === 'clickhide' ? 'clickshow' :
					statsTable.partial_button === 'sorthide' ? 'clickshow' :
					'clickhide';
				sr_display_toggleClass(statsTableId, 'partial_table', '', statsTable.partial_button);
				sr_sorttable.sortOnColumn(null, statsTable, true);
				sr_record_analytics_event('hide_partial', sr_record_directory(), statsTableId);
				/**
				console.log('   ### partial_rows click');
				console.log(statsTable.partial_button);
				 */
			};
			newNode_li.appendChild(newNode);
			nodesTable.push(newNode_li);
		}

		/////////////////////////////////////////////////////////////////////////////////////////////
		// 1c. toggle to hide rows of a particular class
		/////////////////////////////////////////////////////////////////////////////////////////////
		if (vjs_hasAttr(statsTable, 'data-toggle-class')) {
			var toggle_class = vjs_getAttr(statsTable, 'data-toggle-class');
			var toggle_text = vjs_getAttr(statsTable, 'data-toggle-text') || '{Rows OF A CERTAIN TYPE}';
			var toggleRowsNum = statsTable.querySelectorAll('tr.' + toggle_class).length;
			if (toggleRowsNum) {
				newNode = baseNode.cloneNode();
				newNode_li = baseNode_li.cloneNode();

				// add the class toggle to the rows with the correct class
				for (var row = 0, max = statsTable.rows.length; row < max; row++) {
					var rowEl = statsTable.rows[row];
					if (vjs_hasClass(rowEl, toggle_class)) {
						vjs_addClass(rowEl, 'toggle');
					}
				}

				// set up the control
				newNode.id = statsTableId + '_toggle_general';
				newNode.innerHTML = __sr_text_hide + ' ', toggle_text;
				statsTable.toggle_button = 'noclick';


				newNode.onclick = function(e) {
					// toggle the value of partial_button
					statsTable.toggle_button =
						statsTable.toggle_button === 'noclick' ? 'clickhide' :
						statsTable.toggle_button === 'clickhide' ? 'clickshow' :
						'clickhide';
					sr_display_toggleClass(statsTableId, 'toggle');
					sr_sorttable.sortOnColumn(null, statsTable, true);
					var oSpan = this;

					if (oSpan.innerHTML.match(__sr_text_hide)) {
						oSpan.innerHTML = oSpan.innerHTML.replace(__sr_text_hide, __sr_text_show);
					} else if (oSpan.innerHTML.match(__sr_text_show)) {
						oSpan.innerHTML = oSpan.innerHTML.replace(__sr_text_show, __sr_text_hide);
					}
					oSpan.style.backgroundColor = '#ffa';

					sr_record_analytics_event('show_hide_toggle', sr_record_directory(), statsTableId);

				};
				newNode_li.appendChild(newNode);
				nodesTable.push(newNode_li);
			}

		}

		// for touch devices, we're done, just leave it like this.
		// TODO: TODO, output the glossary	      
		if (Modernizr && Modernizr.phone) {
			break table_node_loop;
		}

		/////////////////////////////////////////////////////////////////////////////////////////////
		// 2.Add sharing  to the nodes.
		/////////////////////////////////////////////////////////////////////////////////////////////
		if (!vjs_hasClass(statsTable, 'suppress_share')) {
			newNode = baseNode.cloneNode();
			newNode_li = baseNode_li.cloneNode();
			newNode.innerHTML = __sr_text_modify_and_share;
			vjs_setAttr(newNode, 'tip', __sr_text_modify_and_share_tip);
			newNode.id = 'share_on_' + statsTableId;
			newNode.onclick = function(e) {
				sr_share_open_sharing(statsTableId);
				sr_record_analytics_event('share opened', sr_record_directory(), statsTableId);
				sr_record_analytics_event('table-tool-share', 'open', 1);
			};
			newNode_li.appendChild(newNode);
			nodesShare.push(newNode_li);
		}


		if (!vjs_hasClass(statsTable, 'suppress_csv')) {
			/////////////////////////////////////////////////////////////////////////////////////////////
			// 5. Output as excel
			/////////////////////////////////////////////////////////////////////////////////////////////
			// SLF: 2016-09-13, with Chrome 53 this no longer works as expected and I can't figur out why not.
			// it's not a major feature so I'm not going to worrry about making it work.
			// add excel here too
			newNode = baseNode.cloneNode();
			newNode_li = baseNode_li.cloneNode();
			newNode.innerHTML = __sr_text_get_as_excel;
			vjs_setAttr(newNode, 'tip', __sr_text_get_as_excel_tip);
			newNode.onclick = function(e) {
				sr_tableToExcel(statsTableId);
				sr_record_analytics_event('excel', sr_record_directory(), statsTableId);
				sr_record_analytics_event('table-tool-excel', 'open', 1);
			};
			newNode_li.appendChild(newNode);
			// append the download link.  This is a hidden empty href.
			var downLink = document.createElement('a');
			downLink.id = 'dlink';
			downLink.style.display = 'none';
			newNode_li.appendChild(downLink);
			nodesShare.push(newNode_li);


			/////////////////////////////////////////////////////////////////////////////////////////////
			// 4. Add csv to the nodes.
			/////////////////////////////////////////////////////////////////////////////////////////////
			newNode = baseNode.cloneNode();
			newNode_li = baseNode_li.cloneNode();
			newNode.innerHTML = __sr_text_get_as_csv;
			vjs_setAttr(newNode, 'tip', __sr_text_get_as_csv_tip);
			newNode.onclick = function(e) {
				table2csv(statsTableId);
				sr_record_analytics_event('CSV', sr_record_directory(), statsTableId);
				sr_record_analytics_event('table-tool-csv', 'open', 1);
			};
			newNode_li.appendChild(newNode);
			nodesShare.push(newNode_li);
		}

		/////////////////////////////////////////////////////////////////////////////////////////////
		// 5c. strip page formatting
		/////////////////////////////////////////////////////////////////////////////////////////////
		// mpk: removed this 3/22/21 as it does nothing
		/* if (Modernizr.laptop || Modernizr.desktop) {
			newNode = baseNode.cloneNode();
			newNode_li = baseNode_li.cloneNode();
			newNode.innerHTML = __sr_text_strip_mobile;
			newNode.onclick = function(e) {
				sr_st_reduceFormatting();
				sr_record_analytics_event('strip mobile formatting', sr_record_directory(), statsTableId);
				sr_record_analytics_event('table-tool-strip-mobile', 'open', 1);
			};
			newNode_li.appendChild(newNode);
			nodesShare.push(newNode_li);
		} */

		/////////////////////////////////////////////////////////////////////////////////////////////
		// 5. Add a hard link.
		/////////////////////////////////////////////////////////////////////////////////////////////
		if (!vjs_hasClass(statsTable, 'suppress_link')) {
			newA = baseNode.cloneNode();
			newA.id = 'a_' + statsTableId;
			vjs_setAttr(newA, 'name', statsTableId);
			vjs_setAttr(newA, 'href', '#' + statsTableId, '::none');

			newNode_li = baseNode_li.cloneNode();
			vjs_setAttr(newA, 'tip', __sr_text_copy_link_tip );
			newA.innerHTML = __sr_text_copy_link_clipboard;
			newA.onclick = function(e) {
				var attr = vjs_getAttr(this, 'href');
				var link = attr;
				if (!attr.match(/^http/)) {
					link = window.location.protocol + '//' + window.location.host + window.location.pathname + window.location.search + attr;
				}
				sr_display_showPopup(e, this, '<p>The link for this page is:</p><p><input type="text" id="linkcopy" value="' + link.replace('"','&quot;') +'" size="30"></p><p><a href="javascript:void(0)" onclick="var t=document.getElementById(\'linkcopy\');t.select();t.setSelectionRange(0,9999);document.execCommand(\'copy\');">Copy to clipboard</a></p>');
				sr_record_analytics_event('hard link', sr_record_directory(), statsTableId);
				sr_record_analytics_event('table-tool-table-link', 'open', 1);
			};

			//newNode_li = baseNode_li.cloneNode();
			//vjs_removeClass(newNode, '');
			newNode_li.appendChild(newA);
			nodesShare.push(newNode_li);
		}

		/////////////////////////////////////////////////////////////////////////////////////////////
		// 6. add link to page tool description
		/////////////////////////////////////////////////////////////////////////////////////////////
		if (!vjs_hasClass(statsTable, 'suppress_share') && !vjs_hasClass(statsTable, 'suppress_about_sharing')) {
			newNode = baseNode.cloneNode();
			newNode_li = baseNode_li.cloneNode();
			newNode.innerHTML = __sr_text_about_sharing_tools;
			newNode.onclick = function(e) {

				var tools_url = '/inc/page_tools' + ((Modernizr.lang && Modernizr.lang !== 'en') ? '-'+Modernizr.lang : '') + '.html';
				sr_display_showPopup(e, this, tools_url);
				sr_record_analytics_event('page tool view', sr_record_directory(), statsTableId);
				sr_record_analytics_event('table-tool-about-tools', 'open', 1);
			};
			newNode_li.appendChild(newNode);
			nodesShare.push(newNode_li);
		}
		/////////////////////////////////////////////////////////////////////////////////////////////
		// 6b. add link to our youtube video for sharing
		/////////////////////////////////////////////////////////////////////////////////////////////
		if (!vjs_hasClass(statsTable, 'suppress_share') && !vjs_hasClass(statsTable, 'suppress_youtube')) {
			newNode = baseNode.cloneNode();
			newNode_li = baseNode_li.cloneNode();
			newNode.innerHTML = '<a href="https://www.youtube.com/watch?v=MWapXbaWs_U&feature=youtu.be" target="_blank">' + __sr_text_video_sr_sharing + '</a>';
			newNode.onclick = function(e) {
				sr_record_analytics_event('yt video view view', sr_record_directory(), statsTableId);
				sr_record_analytics_event('table-tool-watch-youtube-sharing', 'open', 1);
			};
			newNode_li.appendChild(newNode);
			nodesShare.push(newNode_li);

			newNode = baseNode.cloneNode();
			newNode_li = baseNode_li.cloneNode();
			newNode.innerHTML = '<a href="https://www.youtube.com/watch?v=JkDLV0roT14&feature=youtu.be" target="_blank">' + __sr_text_video_sr_stats_table + '</a>';
			newNode.onclick = function(e) {
				sr_record_analytics_event('yt video view view', sr_record_directory(), statsTableId);
				sr_record_analytics_event('table-tool-watch-youtube-statstable', 'open', 1);
			};
			newNode_li.appendChild(newNode);
			nodesShare.push(newNode_li);
		}
		/////////////////////////////////////////////////////////////////////////////////////////////
		// 6c. add link to our data usage terms page
		/////////////////////////////////////////////////////////////////////////////////////////////
		if (!vjs_hasClass(statsTable, 'suppress_share')) {
			newNode = baseNode.cloneNode();
			newNode_li = baseNode_li.cloneNode();
			newNode.innerHTML = '<a href="https://www.sports-reference.com/data_use.html" target="_blank">' + __sr_text_data_usage_terms + '</a>';
			newNode.onclick = function(e) {
				sr_record_analytics_event('data usage terms view', sr_record_directory(), statsTableId);
				sr_record_analytics_event('table-tool-usage-terms-view', 'open', 1);
			};
			newNode_li.appendChild(newNode);
			nodesShare.push(newNode_li);
		}

		/////////////////////////////////////////////////////////////////////////////////////////////
		// 8. toggle to hide partial seasons
		/////////////////////////////////////////////////////////////////////////////////////////////
		// NOT TRANLSATED AS baseball only
		var registerRowsNum = statsTable.querySelectorAll('tr.register_table').length - statsTable.querySelectorAll('tr.register_table.blank_table').length;
		if (registerRowsNum) {
			newNode = baseNode.cloneNode();
			newNode_li = baseNode_li.cloneNode();
			newNode.id = statsTableId + '_toggle_register_table';
			newNode.innerHTML = 'Show Non-MLB Stats';
			newNode.onclick = function(e) {
				sr_display_toggleClass(statsTableId, 'register_table');
				sr_record_analytics_event('show-register', sr_record_directory(), statsTableId);
				sr_record_analytics_event('table-tool-br-minors', 'open', 1);
			};
			newNode_li.appendChild(newNode);
			nodesTable.push(newNode_li);
		}
	}

	/////////////////////////////////////////////////////////////////////////////////////////////
	// we want to create a <ul><li><div><ul>nodesShare</ul></div></li></uL>
	/////////////////////////////////////////////////////////////////////////////////////////////
        // due to a request by Opta we are removing the sharing tool here on fbref. --sf 2023-05-24
        if ((sr_SITE_ABB === 'fb') && (Modernizr.is_live)) {  nodesShare = []; }

	if (nodesTable.length + nodesShare.length) {
		var mainUl = tableHeadingText.querySelector('ul');

		// If we have share nodes add those here.
		if (nodesShare.length) {
			var mainLi = document.createElement('LI');
			vjs_addClass(mainLi, 'hasmore');
			mainLi.innerHTML = "<span>" + ((Modernizr.is_stathead)?__sr_text_share_and_more_stathead:__sr_text_share_and_more) + "</span>";
			var nodeDiv = document.createElement('div');
			var nodeUl = document.createElement('UL');
			mainUl.appendChild(mainLi);
			mainLi.appendChild(nodeDiv);
			nodeDiv.appendChild(nodeUl);
			vjs_forEach.call(nodesShare, function(node, index) {
				nodeUl.appendChild(node);
			});

		}

		// If we have normal nodes add those here.
		if (nodesTable.length) {
			vjs_forEach.call(nodesTable, function(node, index) {
				mainUl.appendChild(node);
			});
		}

		// add this just so we don't do this more than once.
		vjs_addClass(sectionHeader, 'has_controls');
	}
}


/* *********************************************************************
# Usage       :   
# Purpose     :   
# Returns     :   
# Parameters  :   
# Throws      :   
# See Also    :   
********************************************************************** */
function sr_st_compute_autostat(table, denominator_stat, toggle_stat_list) {

	const toggle = document.getElementById(table.id + '_per_match_toggle');
	if (!toggle) {
		return false;
	}
	const toggle_li = toggle.parentNode;
	const header = document.querySelector('#all_' + table.id + ' .section_heading h2');
	const header_span = document.querySelector('#all_' + table.id + ' .section_heading h2 span.per_match');

	// if already per, then undo
	if (table.in_per_state) {
		let pers = table.querySelectorAll('[data-original-value]');
		pers.forEach(cell => {
			cell.innerHTML = unescape(cell.dataset.originalValue);
			vjs_removeClass(cell, 'modified');
		});
		toggle_li.classList.remove('modified');
		table.in_per_state = false;
		
		const header_span = document.querySelector('#all_' + table.id + ' .section_heading h2 span.per_match');
		if(header && header_span) {
			header.removeChild(header_span);
		}
	}
	else {
		// set per value for table.
		toggle_li.classList.add('modified');
		table.in_per_state = true;

		if (header) {
			header.innerHTML = header.innerHTML + ' <span class="modified per_match">' + (sr_SITE_ABB === 'fb' ? '(per 90)' : '(per Game)') + '</span>';
		}

		// run through the tbody rows
		
		// loop thru rows
		// find the value of the denominator_stat
		// loop thru cells
		// if cell header matches something in toggle_stat_list, and isn't the denominator_stat, proceed

		// change the header
		// change the text of the "li" button
		// denote that the table is in an altered state
		
		const rows = table.querySelectorAll('tbody tr,tfoot tr');
		rows.forEach(row => {

			if(row.classList.contains('thead')) {
				return;
			}

			const denominator_stat_cell = row.querySelector('[data-stat="'+denominator_stat+'"]');
			let denominator_stat_value = parseFloat(denominator_stat_cell.textContent); 

			toggle_stat_list.forEach ((stat) => {
				let this_cell = row.querySelector('[data-stat="'+stat+'"]');
				if(!this_cell) {  // it's possible the cell doesn't exist because it was removed (by perl) due to the player's column being blank for every year
					return;
				}

				let this_cell_value = parseFloat(this_cell.textContent); 
				let new_value = this_cell_value / denominator_stat_value;
				if (isNaN(new_value)) {
					return
				}

				this_cell.dataset.originalValue = escape(this_cell.innerHTML || ' ');
				if (new_value < 10) {
					this_cell.textContent = new_value.toFixed(2);
				} else {
					this_cell.textContent = new_value.toFixed(1);
				}
				this_cell.classList.add('modified');
			});
		});

	}
}




/* ******************************************************************
   Convert a table into csv.  This is fairly straightforward, except
   in cases where there are colspans and rowspans.
*/


/* *********************************************************************
   # Usage       :   get_csv_output
   # Purpose     :   provides a csv output for the table.
   # Returns     :   a csv file
   # Parameters  :   tableid, whether to show the over headers and how to handle colspans
   Convert a table into csv.  This is fairly straightforward, except
   in cases where there are colspans and rowspans.
    suppress_ids, prevents the getInnerText from printing the id as part of the player's name
                this should be use for all non-csv outputs.
    add_align_table_row: boolean, tells us whether to add a row for aligning the tables for reddit etc.
 
   blank_colspans tells us not to repeat colspan values in later columns.
   # Throws      :
   # See Also    :  
   ********************************************************************** */
function get_csv_output(tableid, do_drop_over_headers, blank_colspans, suppress_ids, add_align_table_row) {

    var table = document.getElementById(tableid);

    if (!table) { return __sr_text_converting_from_pre; }

    var pre_filled_value = -9999;
    var elSortDir = document.getElementById('sorttable_elSortDir' + table.table_number);
    if (elSortDir) vjs_removeChilde(elSortDir);

    // Delete all of the non-visible rows.
    var rows = table.querySelectorAll('tr');
    vjs_forEach.call(rows, function(row, i) {
        // check if the element is visible
        if (vjs_hasClass(row, 'hidden') || vjs_hasClass(row, 'thead') || (vjs_getAttr(row, 'style') && (row.style.display === 'none'))) {
            vjs_removeChild(row);
        }
    });


    // Safari doesn't support table.tHead, sigh
    if (table.tHead === null)
        table.tHead = table.getElementsByTagName('thead')[0];

    // work through each column and row and stuff into table_entries
    // If we have multiple rows in thead, we want the last one.
    var headrow = table.tHead.rows[table.tHead.rows.length - 1].cells;

    var max_rows = table.rows.length;
    var max_cols = headrow.length;
    var table_entries = new Array(max_rows);
    var cell_align = new Array(max_cols);
    for (var x = 0; x <= max_rows; x++) {
        table_entries[x] = new Array(max_cols);
        for (var y = 0; y <= max_cols; y++) {
            table_entries[x][y] = pre_filled_value;
        }
    }


    // Read in all of the values.
    var initial_row = 0;
    if (do_drop_over_headers) {
        initial_row = table.tHead.rows.length - 1;
    }
    var first_body_row = table.tHead.rows.length;


    var append_cols = 0;

    for (var i = 0; i < max_rows; i++) {
        var row_append_cols = 0;
        var pre_filled_table_entries = 0;
        for (var j = 0; j < max_cols; j++) {

            if (table_entries[i][j] === pre_filled_value) {
                var cell_rowspan = 1;
                var cell_colspan = 1;
                if (table.rows[i].cells[j - pre_filled_table_entries]) {
                    cell_rowspan = table.rows[i].cells[j - pre_filled_table_entries].getAttribute("rowspan");
                    cell_colspan = table.rows[i].cells[j - pre_filled_table_entries].getAttribute("colspan");
                }

                // Read the data within the table cells.
                var node_value = sr_sorttable.getInnerText(table.rows[i].cells[j - pre_filled_table_entries], true, !!suppress_ids);
                var cell_justify = _get_cell_align(table.rows[i].cells[j - pre_filled_table_entries]);

                if (i < initial_row)
                    node_value = node_value.substring(0, 4);

                // Remove any commas from the entry.
                var new_node_value = node_value.replace(/,/g, '');
                node_value = new_node_value;

		var __split_array = node_value.split(sr_append_csv_string), append_string = __split_array[1];
		node_value = __split_array[0];

		// Attach the append string onto the end of the row.
		if (append_string) {
		    table_entries[i][max_cols+row_append_cols] = append_string;

		    // UPdate the header row with this entry if currently empty.
		    table_entries[0][max_cols+row_append_cols] = table_entries[0][j].concat('-additional');
		    row_append_cols++;		    
		}
		
		
                table_entries[i][j] = node_value;
                // get the align value for this cell
                if ((i === first_body_row) && add_align_table_row) {
                    cell_align[j] = cell_justify;
                }

                // Handle the rowspans.
                if (cell_rowspan > 1) {
                    for (var k = 0; k < cell_rowspan; k++) {
                        for (var l = 0; l < cell_colspan; l++) {
                            // alert('prefill: ' + (i+k) + ',' + (j + l - pre_filled_table_entries) + ',' + pre_filled_table_entries);
                            table_entries[i + k][j + l] = node_value;
                            // get the align value for this cell
                            if ((i === first_body_row) && add_align_table_row) {
                                cell_align[j + l] = cell_justify;
                            }
                        }
                    }
                    if (cell_colspan > 1) {
                        pre_filled_table_entries += cell_colspan - 1;
                        j = j + cell_colspan - 1;
                    }
                } else {
                    // Handle the colspans.
                    if (cell_colspan && (cell_colspan > 1)) {
                        for (k = 1; k < cell_colspan; k++) {
                            // For blank_colspans, we just leave the
                            // entry blank, else we repeat the value.
                            if (blank_colspans) {
                                table_entries[i][j + k] = '';
                            } else {
                                table_entries[i][j + k] = node_value;
                            }
                            if ((i === first_body_row) && add_align_table_row) {
                                cell_align[j + k] = cell_justify;
                            }
                            pre_filled_table_entries++;
                        }
                        j += cell_colspan - 1;
                    }
                }


            } else {
                // Note that we've pre-filled something here.
                //pre_filled_table_entries++;
                //j = j + 1;
            }

        }
        if (row_append_cols > append_cols) { append_cols = row_append_cols; }
    }

    // alert(max_rows+":"+max_cols);
    // Output all of the values.
    var csv_output = '';
    if (add_align_table_row) {
        var align_row = new Array;
        for (j = 0; j < max_cols; j++) {
            align_row.push(cell_align[j]);
        }
        csv_output = csv_output + "\n" + 'align:' + (align_row.join(','));
    }
    for (i = 0; i < max_rows; i++) {
        var row_output = new Array;
        for (j = 0; j < max_cols; j++) {
            row_output.push(table_entries[i][j]);
        }

	// Run through all of the appended cells
        for (j = max_cols; j < append_cols + max_cols; j++) {
            row_output.push(table_entries[i][j] || '');
        }
        csv_output = csv_output + "\n" + (row_output.join(','));
    }

    return "<!-- ALREADYCSV -->" + csv_output;
}

/* *********************************************************************
# Usage       :   _get_cell_align
# Purpose     :   gets a cell and discerns it's alignment from the classes it has
# Returns     :   
# Parameters  :   
# Throws      :   
# See Also    :   
********************************************************************** */
function _get_cell_align(this_cell) {

    var this_align = 'left';
    if (vjs_hasClass(this_cell, 'center')) {
        this_align = 'center';
    } else if (vjs_hasClass(this_cell, 'right')) {
        this_align = 'right';
    };
    return this_align;
}

/* *********************************************************************
# Usage       :   
# Purpose     :   
# Returns     :   
# Parameters  :   
# Throws      :
# See Also    :
# Comments : 
********************************************************************** */
function table2csv(table_id) {

    var table_div = document.getElementById('div_' + table_id);

    // Check to see if we have already made this a csv.
    if (table_div.innerHTML.match(/ALREADYPRE/)) {
        alert(__sr_text_we_can_not_convert_from_pre);
        return false;
    } else if (table_div.innerHTML.match(/ALREADYCSV/)) {
        return false;
    }
    var csv_output = '--- ' + __sr_text_share_cite_plaintext + "\n\n\n ";
    csv_output = csv_output + get_csv_output(table_id);
    table_div.innerHTML = __sr_text_reload_page_to_return + '<div style="overflow:auto"><pre id="csv_' + table_id + '">' + csv_output + '</pre></div>';

    return true;
}

/* *********************************************************************
   # Usage       :   sr_st_add_table_headers
   # Purpose     :   Add intermediate headers for this table if appropriate.
   # Returns     :   nothing
   # Parameters  :   table id
   # Throws      : 
   # See Also    :    is run when the tables are set up,
   #                   this only copies the bottom row of the header into the tables.
   ********************************************************************** */
function sr_st_add_table_headers(table_id) {

    // todo, add this to the table setup process
    // for .long tables, just wait until we click the button to open the full table
    // for non .long tables just run this when we setup the table control stuff.
    // add a suppress_headers options to prevent the auto-setup of headers
    // add a dr. j entry for this

    // make sure there is a table_id
    if (!table_id) {
        console.log('### sr_st_add_table_headers: no table_id');
        return false;
    }

    console.log('### sr_st_add_table_headers: table_id:' + table_id);

    // make sure there is a table
    var table = document.getElementById(table_id);
    if (!table) {
        console.log('### sr_st_add_table_headers: no table for id:' + table_id);
        return false;
    }

    // for now see if it has the class name .suppress_headers
    if (vjs_hasClass(table, 'suppress_headers')) {
        console.log('### sr_st_add_table_headers: no table.suppress_headers for id:' + table_id);
        return false;
    }

    // for now see if it has the class name .long
    if (vjs_hasClass(table, 'long')) {
        console.log('### sr_st_add_table_headers: table is truncated since so long (sort after click):' + table_id);
        return false;
    }

    // we mark interior header rows with a thead class.
    // the true and actual header is thead > tr
    var theads = table.querySelectorAll('tr.thead');
    if (theads.length) {
        console.log('### sr_st_add_table_headers: has tr.theads:' + table_id);
        return false;
    }

    // for short tables, we just return.
    var trs = table.querySelectorAll('tbody > tr');
    if (trs.length < 30) {
        console.log('### sr_st_add_table_headers: trs.length < 30 for id:' + table_id + ',len:' + trs.length);
        return false;
    }

    // make sure our table isn't completely viewable.
    var vph = vjs_viewportGetHeight();
    var table_height = vjs_getHeight(table);
    if (table_height < vph) {
        console.log('### sr_st_add_table_headers: table_height < viewport height');
        return false;
    }

    // find the number of rows a screen shows rounded down to the nearest multiple of 5
    var rows_in_screen = Math.floor((vph / (table_height / trs.length)) / 5 - 1) * 5;

    console.log('### sr_st_add_table_headers: add headers to this table every N rows, N:' + rows_in_screen);
    var rows_remain = trs.length;
    var row_count = 0;
    var header_rows = table.querySelectorAll('thead > tr');

    // run through our rows.
    while (rows_remain > 5) {
        // every rows_in_screen insert the header, so long as 5 rows
        // remain in the table.
        if (row_count && (row_count % rows_in_screen === 0)) {
            console.log('### sr_st_add_table_headers: adding header at row:' + row_count);

            vjs_forEach.call(header_rows, function(header_row, i) {
                var new_header = header_row.cloneNode(true);
                vjs_addClass(new_header, 'thead');
                table.tBodies[0].insertBefore(new_header, trs[row_count]);
            });
        }

        row_count++;
        rows_remain--;
    }
    return true;

}

/* *********************************************************************
   # Usage       :   sr_st_build_table
   # Purpose     :   create a stat table on the fly with JS    console.log('### sr_st_add_table_headers: table_id:');

   # Returns     :   html table
   # Parameters  :   table_data
   # Throws      :
   # See Also    :

   # utility function to build a stat table on the fly via JS
   # we should get data passed into us that has everything we want:
   # table_data = {  structure: { headers: [ "A", "B", "C" ], class: "foobar" }, data: [ [ "A", "B", "C" ], [ "D", "E", "F" ] ]  };

   ********************************************************************** */
function sr_st_build_table(table_data) {
    var t = document.createElement("table");
    var table_text = ''; // this is our starting table string
    var s = table_data.structure;
    var data = table_data.data;
    if (data.length < 1) {
        return t;
    }

    // start the table string, with a class if one is passed and then the head
    if (s.table_class) {
        var classes = s.table_class.split(/ +/);
        vjs_forEach.call(classes, function(str, i) {
            vjs_addClass(t, str);
        });
    }
    table_text = '<thead><tr>';


    var headers = s.headers; // we are assuming that we have one header for each column. add blank strings for headers we don't want text for
    var header_ids = new Array();
    for (var h in headers) {
        for (var id in headers[h]) {
            header_ids.push(id);
            table_text += '<th class="tooltip">' + headers[h][id] + '</th>';
        }
    }

    // finish the head, start the body
    var have_data = 0;
    table_text += '</tr></thead><tbody>';
    for (var d in data) {
        if (data[d].skip) { // don't show this in the list
            continue;
        } else {
            have_data = 1;
        }
        table_text += "<tr>";
        for (var h in header_ids) {
            table_text += "<td>" + table_data.data[d][header_ids[h]] + "</td>";
        }
        table_text += "</tr>";
    }

    // finish the whole thing
    table_text += '</tbody>';
    // if we have no data, return nothing
    if (!have_data) {
        return t;
    }
    // return a jq object, to be attached to whatever via $().append()

    t.innerHTML = table_text;
    return t;
}

/* *********************************************************************
# Usage       :   sr_st_check_for_perMatch(statsTable)
# Purpose     :   adds a tooltip to change the stats to perMatch as appropriate
# Returns     :   nothing changes the dom
# Parameters  :   div dom element
# Throws      :   
# See Also    :   sr_st_compute_perMatch
********************************************************************** */
function sr_st_check_for_perMatch(table, denominator_stat) {
    if (!table) return false;

    console.log('   ### sr_st_check_for_perMatch, table.id:' + table.id);
    //  see if we have a minutes_90s stat
    var perMatch_cell = table.querySelector('thead tr th[data-stat="' + denominator_stat, '"]');
    if (perMatch_cell) return true;

    return false;
}

/* *********************************************************************
# Usage       :   
# Purpose     :   
# Returns     :   
# Parameters  :   
# Throws      :   
# See Also    :   
********************************************************************** */
function sr_st_compute_perMatch(table, denominator_stat) {

    var toggle = document.getElementById(table.id + '_per_match_toggle');
    if (!toggle) {
        return false;
    }
    var toggle_li = toggle.parentNode;
    var header = document.querySelector('#all_' + table.id + ' .section_heading h2');
    var header_span = document.querySelector('#all_' + table.id + ' .section_heading h2 span.per_match');

    // if already perMatch undo.
    if (table.perMatch) {
        var perMatchs = table.querySelectorAll('[data-original-value]');
        vjs_forEach.call(perMatchs, function(cell, i) {
            cell.innerHTML = unescape(vjs_getAttr(cell, 'data-original-value'));
            vjs_removeClass(cell, 'modified');

        });
        vjs_removeClass(toggle_li, 'modified');
        table.perMatch = false;
        vjs_removeChild(header_span);
    } else {
        // set perMatch value for table.
        vjs_addClass(toggle_li, 'modified');
        table.perMatch = true;
        if (header) {
            header.innerHTML = header.innerHTML + ' <span class="modified per_match">' + (sr_SITE_ABB === 'fb' ? '(per 90)' : '(per Game)') + '</span>';
        }

        // run through the tbody rows.	
        var rows = table.querySelectorAll('tbody tr,tfoot tr');
        vjs_forEach.call(rows, function(row, i) {


            var the90s = 0;

            // increment through the cells and get the perMatch value.
            var cells = row.querySelectorAll('td');
            vjs_forEach.call(cells, function(cell, i) {

                // if we've gotten 90s we start adjusting values.
                if (the90s > 0) {

                    var stat = vjs_getAttr(cell, 'data-stat');
                    stat = stat.toLowerCase();
                    // don't do perMatchs or pcts,
                    // note that the -1 means the string isn't found in the stat.
                    //  _long stats are only to be ignored on pfr
                    if (stat &&
                        (stat.indexOf("pct") === -1) &&
                        (stat.indexOf("perMatch") === -1) &&
                        ((stat.indexOf("_rec") === -1) || (sr_SITE_ABB === 'fb')) &&
                        (stat.indexOf("_perc") === -1) &&
                        (stat.indexOf("_avg") === -1) &&
                        (stat.indexOf("average") === -1) &&
                        (stat.indexOf("_wowy") === -1) &&
                        ((stat.indexOf("_long") === -1) || (sr_SITE_ABB === 'fb')) &&
                        (stat.indexOf("_rating") === -1) &&
                        (stat.indexOf("qbr") === -1) &&
                        ((stat.indexOf("gs") === -1) || (sr_SITE_ABB === 'fb')) &&
                        (stat.indexOf("games_started") === -1) &&
						(stat.indexOf("per90") === -1) &&
                        ((stat.indexOf("wins") === -1) || (sr_SITE_ABB === 'fb')) &&
                        ((stat.indexOf("losses") === -1) || (sr_SITE_ABB === 'fb')) &&
                        (stat.indexOf("srs") === -1) &&
                        (stat.indexOf("sos") === -1) &&
                        (stat.indexOf("_per_") === -1)) {

                        var value = parseFloat(cell.textContent);

                        // If we have a specific denominator for the per game calculation, use that. Otherwise, use the value from the row
                        var den = (vjs_getAttr(cell, 'data-per-g-den')) ? vjs_getAttr(cell, 'data-per-g-den') : the90s;

                        var new_value = value / den;
                        if (!isNaN(new_value)) {
                            vjs_setAttr(cell, 'data-original-value', escape(cell.innerHTML || ' '));
                            if (new_value < 10) {
                                cell.textContent = new_value.toFixed(2);
                            } else {
                                cell.textContent = new_value.toFixed(1);
                            }
                            vjs_addClass(cell, 'modified');
                        }
                    }
                }


                // if we have a perMatch we then adjust the value in the subsequent cells.
                if (vjs_getAttr(cell, 'data-stat') === denominator_stat) {
                    the90s = parseFloat(cell.textContent);
                }


            });
        });
    }
}


/* *********************************************************************
   # Usage       :   sr_tableToExcel
   # Purpose     :   create a download link and output to excel from any table
   # Returns     :   excel
   # Parameters  :   table id
   # Throws      :
   # See Also    :

   # we clean out the colgroup and captions and convert all table cells to plain text
   #  with cell.innerHTML = cell.innerText;
   # we also remove intermediate table tr.thead rows.
   # 
   #  http://stackoverflow.com/questions/17126453/html-table-to-excel-javascript

   ********************************************************************** */
var sr_tableToExcel = (function() {
    var uri = 'data:application/vnd.ms-excel;base64,',
        template = '<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:x="urn:schemas-microsoft-com:office:excel" xmlns="http://www.w3.org/TR/REC-html40"><head><!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet><x:Name>{worksheet}</x:Name><x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]--></head><body><table>{table}</table></body></html>',
        base64 = function(s) { return window.btoa(unescape(encodeURIComponent(s))) },
        format = function(s, c) { return s.replace(/{(\w+)}/g, function(m, p) { return c[p]; }) };
    return function(table) {
        if (!table.nodeType) { table = document.getElementById(table); }

        var table_clone = table.cloneNode(true);
        var caption = table_clone.querySelector('caption');
        var colgroup = table_clone.querySelector('colgroup');
        if (caption) { vjs_removeChild(caption); }
        if (colgroup) { vjs_removeChild(colgroup); }


        // strip all html out of the cells.
        var cells = table_clone.querySelectorAll('th,td');
        vjs_forEach.call(cells, function(cell, i) {
            cell.innerHTML = cell.textContent;
        });

        // remove secondary header rows.
        var tr_extras = table_clone.querySelectorAll('tr.thead');
        vjs_forEach.call(tr_extras, function(tr, i) {
            vjs_removeChild(tr);
        });

        // delete all hidden rows.
        var tr_hidden = table_clone.querySelectorAll('tr.hidden');
        vjs_forEach.call(tr_hidden, function(tr, i) {
            vjs_removeChild(tr);
        });


        // We limit this to 500 rows as we fail somewhere between 750 and 1100 rows in most cases.
        // we alert the user in this case and still give them the first 500.
        var trs = table_clone.querySelectorAll('tr');
        if (trs.length > 500) {
            alert(__sr_text_excel_constraints);

            vjs_forEach.call(trs, function(tr, i) {
                if (i > 500) {
                    vjs_removeChild(tr);
                }
            });
        }

        var ctx = { worksheet: 'Worksheet', table: table_clone.innerHTML };
        var dlink = document.getElementById("dlink");
        dlink.href = uri + base64(format(template, ctx));
        dlink.download = 'sportsref_download.xls';
        dlink.click();

    };
})();
/* ### FILE:stathead.tools.js    */

sr_utilities_js_loader.push(function() {


	let sh_form = document.querySelector('form.pi_forms');
	if(!sh_form) {
		return;
	}

	// set the old_data description to empty.
	sh_form.data_old_desc = [];

	// how many open criteria elements are we starting with 
	// - later, any time we create a new one, we use this number to create the form element names
	let crit_num = document.querySelectorAll('.pi_filter_sets > div.stat_criteria > .fieldset.open').length;
	let user_sub_cookie = vjs_readCookie('stathead_site');
	let current_site = sh_form.dataset.site;


	// do some things to the form in general upon page load

	// listener on submit event to show spinner and disable submit buttons
	sh_form.addEventListener('submit',sr_form_spawn_spinner);
	// for page requests via tiny url, show the form fields on the left (desktop only)
	// (page requests with query params don't ordinarily have the form fields visible)
	if (sh_form.classList.contains('tinyrequest') && Modernizr.desktop) {
		document.getElementById('criteria_opener').firstElementChild.click();
	}


	// check each filter set, if some fieldsets are visible on load, change the select label
	let fs = document.querySelectorAll('.pi_filter_sets > div');
	fs.forEach((el) => {
		if(el.querySelectorAll('.fieldset.open').length) {
			// find the direct child select
			let select;
			for(let x = 0; x<el.children.length; ++x) {
				if(el.children[x].nodeName=='SELECT') {
					select = el.children[x];
				}
			}
			set_filter_select_state(select);
		}
	});

	// a particular widget/filter is selected from the dropdown - revealing the requested form element
	let pi_filter_sels = document.querySelectorAll('.pi_filter_sets > div > select');
	pi_filter_sels.forEach((s) => {
		// handle stat criteria section differently
		if(s.classList.contains('stat_criteria')) {
			s.addEventListener('change', function(e) {
				let criteria_wrapper_div = this.parentNode;
				// if more than 10 criteria elements exist, do not allow it (actually 11, if we can't the template)
				let existing = criteria_wrapper_div.querySelectorAll('.fieldset').length;
				if(existing >= 11) {
					// add warning
					if(!criteria_wrapper_div.querySelector('.criteria_warning')) {
						var el_warning = document.createElement('p');
						el_warning.classList.add('criteria_warning');
						el_warning.innerText = "Warning: You have reached the maximum of 10 Criteria";
						s.after(el_warning);
					}
					return;
				}
				else {
					// if the warning exists, remove it
					if(criteria_wrapper_div.querySelector('.criteria_warning')) {
						criteria_wrapper_div.querySelector('.criteria_warning').remove();
					}
				}
				// add this based on the template
				let template = criteria_wrapper_div.querySelector('.template');
				let newdiv = template.cloneNode(true);
				newdiv.classList.remove('template');
				newdiv.classList.add('open');
				newdiv.classList.add('changed');
				newdiv.querySelector('select.criteria-comp').removeAttribute('disabled');
				newdiv.querySelector('.formlabel').innerText = this.options[this.selectedIndex].text;
				// all form elements in here now need their "name" attributes to be set according to how many exist
				// ... use the crit_num variable
				++crit_num;
				let input_fields = newdiv.querySelectorAll('[name]');
				let focus_me;
					vjs_forEach.call(input_fields, function(f, i){
					let thisname = f.getAttribute('name');
					thisname += '[' + crit_num + ']';
					f.setAttribute('name',thisname);
					if(f.getAttribute('type')=='text') {
						focus_me = f;
					}
				});
				// the hidden 'cstat' field needs a value - i.e. which stat criteria this is
				newdiv.querySelector('.criteria-stat').value = this.options[this.selectedIndex].value;
				// add element to DOM
				//criteria_wrapper_div.appendChild(newdiv);
				criteria_wrapper_div.insertBefore(newdiv,this);
				focus_me.focus();
				set_filter_select_state(this);
				// add event listeners on this cloned item
				addCriteriaEventListeners(newdiv);
			});
			// also add event listeners to existing 'visible' criteria boxes (ones that show on page load b/c of query_string)
			let critboxes = s.parentNode.querySelectorAll('.fieldset:not(.template)');
				vjs_forEach.call(critboxes, function(c, i){
				addCriteriaEventListeners(c);
			});
		}
		// these are non-statcriteria filters - they already exist and are just hidden/shown on page load or when a user selects a filter from this dropdown
		//     ... this is as opposed to the stat criteria, whose fieldsets are created from an HTML template when the stat is selected from the dropdown
		else {
			s.addEventListener('change', function(e) {
				let targ = this.parentNode.querySelector('.fieldset:nth-of-type('+this.value+')');
				// when you open it, set the element to a certain defined value, if you want
				// it might be inside a subfield, so check all formfields inside this fieldset
				if(targ.hasAttribute('data-onopen')) {
					set_value_on_open(targ, targ.getAttribute('data-onopen'));
				}
				let ffs = targ.querySelectorAll('.formfield').forEach(ff => {
					if(ff.parentNode.hasAttribute('data-onopen')) {
						let openval = ff.parentNode.getAttribute('data-onopen');
						set_value_on_open(ff, openval);
					}
				});
				// set the 'open' class, which will show the element
				targ.classList.add('open');
				set_filter_select_state(this);
			});
		}
	});

	// all fieldsets that are not statistical criteria types, they can be "removed" (actually, just re-hidden - and set back to default value)
	//   so, need click handlers
	let pi_filter_divs = document.querySelectorAll('.pi_filter_sets > div:not(.stat_criteria) > .fieldset');
	pi_filter_divs.forEach((el) => {
		el.addEventListener('click', function(e) {
			if (e.target.classList.contains('formlabel') && e.offsetX > 250) { // this is a fudge - i.e. user clicks the 'close' area
				// reset to default
				let defaults = get_defaults(sh_form, this);

				vjs_deserializeForm(sh_form,defaults);

				this.classList.toggle('changed');
				this.classList.toggle('open');
				sr_form_changeDesc(sh_form, 'filter-remove');

			}
		});
	});

	// any form element is changed - parent 'fieldset' is highlighted - and description updates
	let f = sh_form.querySelectorAll('input, select, textarea');
	f.forEach((el) => {
		if(el.type=='button') {
			return;
		}
		el.addEventListener('change', function (e) {
			// top options change is handled differently - parent '.choice' is highlighted, others de-highlighted
			if (el.closest('.options')) {
				let all_choices = document.querySelectorAll('.options .choice');
				all_choices.forEach((c) => {
					c.classList.remove('selected');
				});
				let targ = this.closest('.choice');
				targ.classList.add('selected');
				sh_form.querySelector('.pi_modal').classList.add('changed');
				sh_form.querySelector('.pi_modal_bg').classList.add('changed');
			}
			// indicate change with red box
			else {
				indicateChangedFormfield(e);
			}
			// also fire the description box update
			sr_form_changeDesc_caller(el.closest('form'), 'inputs');
		});
	});



	// any fields that have a minimized class, attach the event listener to toggle show/hide
	let el_min = document.querySelectorAll('.fieldset.minimized');
	el_min.forEach((el) => {
		el.querySelector('.formlabel button').addEventListener('click', function(e) {
			// (actually only want it on the :after element - if it falls outside a range, we know it was on the pseudo element)
			//if (e.offsetX > 250) { // this is a fudge
				let targ = this.closest('.fieldset');
				targ.classList.toggle('show');
			//}
		});
	});

	// any fieldset with toggleable combo boxes, needs click handlers
	let tcb = document.querySelectorAll('.fieldset.has_toggleable_combos');
	tcb.forEach((el) => {
		// find all radio buttons
		el.querySelectorAll('input').forEach((r) => {
			r.addEventListener('click',function(e) {
				// close all other toggleable combos
				let parent = e.target.closest('.fieldset');
				let combos = parent.querySelectorAll('.combo.toggleable');
				combos.forEach((t) => {
					t.classList.remove('open');
				});
				// if this choice has a combo that's toggleable, open it
				let radio_wrap = e.target.closest('.choice');
				let toggleable_combo = radio_wrap.querySelector('.combo.toggleable');
				if (toggleable_combo) {
					toggleable_combo.classList.add('open');
				}
			});
		});
	});




	// attach the 'close' handler to any CTA/Tiny boxes
	var tiny_cta = document.querySelector('.criteria .stathead_cta');
	if(tiny_cta) {
		// person is a subscriber - just remove it right away
		if(user_sub_cookie=='all' || user_sub_cookie==current_site) {
			remove_tiny_cta(tiny_cta);
		}
		// non-subscriber, must click to remove
		else {
			var el_close = tiny_cta.querySelector('.close');
			el_close.addEventListener('click',function(e) {
				e.preventDefault();
				remove_tiny_cta(tiny_cta);
			});
		}
	}

	// tweak placement of the CTA that overlays results table
	let cta = document.querySelectorAll('#stathead_results .stathead_cta, .stathead_results .stathead_cta');
	cta.forEach((el) => {
		let table = el.nextElementSibling;
		if(table) {
			let body = table.querySelector('tbody');
			let body_top = body.offsetTop;
			let rows = body.querySelectorAll('tr');
			let ht;
			let table_w = body.offsetWidth;
			if (window.innerWidth < table_w) {
				table_w = document.getElementById('content').offsetWidth;
			}
			el.style.width = table_w + 'px';

			// we want to attach this to the 10th row from the bottom if this is a bottom display
			if (el.classList.contains('stathead_cta_bottom')) {
				var table_rows = rows.length;
				var eleventh_top = rows[table_rows-10].offsetTop;
				var final_bottom = rows[table_rows-1].offsetTop + rows[table_rows-1].offsetHeight - 2;
				ht = final_bottom - eleventh_top;

				el.style.top = eleventh_top + 'px';
				el.style.height = ht + 'px';
			} else {
				if(rows.length>10) {
					var eleventh_top = rows[10].offsetTop;
					ht = eleventh_top - body_top;
				}
				else {
					ht = body.offsetHeight;
				}
				el.style.top = body_top + 'px';
				el.style.height = ht + 'px';
			}
		}
	});
	
	// fix the modal when scrolling
	let change_modal = document.querySelector('.pi_modal');
	if(change_modal) {
		let table = sh_form.querySelector('tbody');
		if(table) {
			window.addEventListener('scroll',function(e) {
				check_modal_pos(change_modal,table);
			});
		}
	}
	
	scroll_to_stathead_results();
});


// sets the value of the formfield within - or another one if specified - when the user opens that widget (i.e. selects it from the dropdown of widget options)
function set_value_on_open(ff,openval) {
	if(openval.includes(':')) {
		let p = openval.split(':');
		document.querySelector('[name="'+p[0]+'"]').value = p[1];
	}
	else {
		let inputs = ff.querySelectorAll('input');
		inputs.forEach(i => {
			if(i.type == 'radio') {
				if(i.value == openval) {
					i.checked = true;
				}
			}
			else { 
				i.value = openval;
			}
		})
	}
}

// on mobile, scroll down to results upon load - only if 'request' is in the query_string
function scroll_to_stathead_results () {
	if(document.querySelector('html').classList.contains('phone')) {
		let urlParams = new URLSearchParams(location.search);
		if (urlParams.has('request')) {
			let el = document.getElementById('stathead_results')
			el.scrollIntoView();
			console.log('scroll');
		}
	}
}

// check for position of the table top in relation to the window - if too high, 'fix' the modal position
// the modal appears when something is changed 
// so this function needs to be triggered upon the form element change, or when the user scrolls the page
function check_modal_pos(modal,table) {
	let table_top = table.getBoundingClientRect().top;
	if (table_top < 0) {
		modal.classList.add('fixed');
	}
	else {
		modal.classList.remove('fixed');
	};
}

function indicateChangedFormfield(e) { // old way, just comes as the event (e) - so e.target is the clicked element ... new JS, comes here as the form el, so just e = the target clicked
	let this_targ = e.target || e;
	let targ = this_targ.closest('.fieldset');
	if(!targ || targ.classList.contains('no_getresults_overlay')) {
		return;
	}
	let modal = document.querySelector('.pi_forms .pi_modal');
	let modal_bg = document.querySelector('.pi_forms .pi_modal_bg');
	let modal_spin = document.querySelector('.pi_forms .pi_modal_bg');

	let table = document.querySelector('.pi_forms .stats_table tbody');
	// change the target element to changed state
	targ.classList.add('changed');
	// display the modal overlay over the form
	modal.classList.add('changed');
	modal_bg.classList.add('changed');
	modal_spin.classList.add('changed');

	// check for whether the modal needs to be 'fixed' in CSS
	if(table) {
		check_modal_pos(modal,table);
	}
}

function handle_stat_criteria_options(e) {
	e.preventDefault();
	let targ = e.target; // the option link that was clicked/selected
	let fieldset = targ.closest('.fieldset');

	// the link contains the 'id' of the 'option' that you want to view
	let id = targ.getAttribute('data-opt');
	// show 'open' state of the selector link you just clicked
	targ.classList.toggle('open');
	// show the 'option' you want to work with
	fieldset.querySelector('.crit_options div#'+id).classList.toggle('open');
	// if id=ratio - do special things (data-preset should be leveraged here instead, but doing this for now)
	if(id=='ratio') {

		let comp_select = fieldset.querySelector('.criteria-comp');

		// change the comp dropdown - lte gte to lt gt (nvm - forget it - AW 1/11/2021)
		//comp_select.options[0].innerText = ">";
		//comp_select.options[1].innerText = "<";
		//comp_select.options.length = 0;
		//comp_select.options[comp_select.options.length] = new Option('New Element', '0', false, false);
		// set comp to '='
		comp_select.value = "eq";

		// set value to 1.0
		fieldset.querySelector('.criteria-val').value = "1.0";
	}
	// close the opener/dropdown, if it exists (only exists when there's more than one option)
	if (fieldset.querySelector('.opener')) {
		fieldset.querySelector('.opener').classList.remove('open');
	}
}

// when a criteria filter is selected from dropdown - after done handling that, do some things to the dropdown
function set_filter_select_state(select) {
	// reset this dropdown to default state
	select.selectedIndex = 0;
	// change dropdown label wording
	select.options[0].innerText = select.options[0].innerText.replace(' a ',' another ');
}

// setting event listeners on the newly created criteria boxes
function addCriteriaEventListeners(el) {

	// add a click handler to this formlabel - when you click it, the element deletes
	el.querySelector('.formlabel').addEventListener('click',function(e) {
		// grab parent first for later use, or it won't exist once 'this' is removed from DOM
		let parent = this.closest('div.stat_criteria');
		// (actually only want it on the :after element - if it falls outside a range, we know it was on the pseudo element)
		if (e.offsetX > 250) { // this is a fudge
			var targ = this.closest('.fieldset');
			targ.remove();
			let sh_form = document.querySelector('form.pi_forms');
			sr_form_changeDesc(sh_form, 'criteria-filter-remove');
		}
		// if there are no more fieldsets left after removing this one, change the 'select' option text back to 'a' vs. 'another'
		let select = parent.querySelector('select.stat_criteria');
		if (parent.querySelectorAll('div.fieldset:not(.template)').length==0) {
			select.options[0].innerText = select.options[0].innerText.replace(' another ',' a ');
		}
	});

	// additional criteria options - if they exist, this is how you choose to view them
	if (el.querySelector('.crit_options_selector')) {
		el.querySelector('.crit_options_selector button').addEventListener('click', handle_stat_criteria_options);
	}
	
	// when additional criteria options has an 'opener' box (i.e. a dropdown with multiple options)
	if (el.querySelector('.opener')) {
		el.querySelector('.opener').addEventListener('click', function(e) {
			e.preventDefault();
			let id = this.getAttribute('data-id');
			let selector = this.getAttribute('data-selector');
			this.classList.toggle('open');
			if(id) {
				el.querySelector('#'+id).classList.toggle('open');
			}
			if(selector) {
				el.querySelectorAll(selector).forEach((sel) => {
					sel.classList.toggle('open');
				});
			}
		});
	}
	
	// any of the form elements within this new fieldset are changed, note the 'changed' state
	let f = el.querySelectorAll('input, select, textarea');
	f.forEach((fld) => {
		if(fld.type!='button') {
			fld.addEventListener('change', indicateChangedFormfield);
			
			// also fire the description box update
			fld.addEventListener('change', function (e) { 
				sr_form_changeDesc_caller(el.closest('form'), 'new-criteria');
			});
		}
	});
	
}

function remove_tiny_cta(tiny_cta) {
	tiny_cta.remove();
	document.querySelector('.criteria .stathead_cta_bg').remove();
}

function sr_form_spawn_spinner() {
	document.querySelector('.pi_forms .pi_modal_spinner').classList.add('changed');
	console.log('### submit - show spinner');
	let buttons = document.querySelectorAll(".sh-get-results");
	buttons.forEach((el) => {
		el.disabled = true; 
	});
}

function get_defaults(form,fs) {

	let defaults = {};
	if(!fs.dataset.defaults) {
		let default_val = '';
		if(fs.dataset.default) {
			default_val = fs.dataset.default;
		}
		
		const fields = fs.querySelectorAll('input, textarea, select');
		fields.forEach((el) => {
			defaults[el.getAttribute('name')] = default_val;
		});
	}
	else {
		let temp = fs.dataset.defaults;
		temp = temp.replace(/'/g, '"');
		defaults = JSON.parse(temp);
	}

	// if any of the defaults are checkbox fields, convert the key to match what's actually on the page, before sending to serialize function
	for (var key in defaults) {
		if(!form.elements.namedItem(key) && form.elements.namedItem(key+'[]')) {
			defaults[key+'[]'] = defaults[key];
		}
	}

	return defaults;
}


// 'resume' either not a thing yet in all browsers - or not working as expcted for some reason
//  but this code works just as well in 'pageshow'
/*
window.addEventListener('resume', (e) => {
	// because javascript state now persists on back button interaction
	// we must reset the form so the spinner disappears
	// and anything form elements that we disabled, are no longer disabled
	// we disable them onsubmit for two reasons ...
	//  1. when the spinner is shown, on the submit buttons, to prevent submitting twice
	//  2. any empty form elements (value="") so that they don't become part of the subsequent url
	console.log('### resume event from back button - undo some javascript things that were done onsubmit');

	let spinner = document.querySelector('.pi_forms .pi_modal_spinner');
	if (spinner) { 
		spinner.classList.remove('changed');
	}
	let formels = document.querySelectorAll(".pi_forms input, .pi_forms submit");
	formels.forEach((el) => {
		el.disabled = false; 
	});
});
*/

window.addEventListener('pageshow', (e) => {
  if (e.persisted) {
    console.log('### pageshow event - restored from bfcache.');

	// we could just as easily do "location.reload()" - which would have the same effect 
	// - but you'd lose the caching speed, which might be nice to have
	let spinner = document.querySelector('.pi_forms .pi_modal_spinner');
	if (spinner) { 
		spinner.classList.remove('changed');
	}
	let formels = document.querySelectorAll(".pi_forms input, .pi_forms submit");
	formels.forEach((el) => {
		el.disabled = false; 
	});

  } else {
    console.log('### pageshow event - bfcache not used');
  }
});

window.addEventListener('pagehide', (e) => {
  if (e.persisted) {
    console.log('### pagehide event - page will be put into bfcache.');
  } else {
    console.log('### pagehide event - bfcache not used');
  }
});
class FormEvents {

	constructor () {

		this.needs_desc_change_after_load = 0;
		this.needs_desc_change = 0;
		this.sh_form = document.querySelector('form.pi_forms');
		
		//this.setup_preset_buttons();
		// this.show_preset_explainer();

		if(typeof sh_events === 'undefined') {
			return;
		}

		Object.keys(sh_events).forEach(fieldname => {
			
			if(sh_events[fieldname].event_handlers) {
				for(let event_type in sh_events[fieldname].event_handlers) {
					
					// set up things that happen on load

					if(event_type === 'change_load') {
						// for large data sets that use info from the DB, on initial page loads, this allows us to avoid having to hit the DB twice
						// (once to set the data for JS, and once to get the data for the initial dropdown population on the perl end)
						// instead we'll just populate from that JS data that was culled from the DB in the first place
						//
						// better idea, though, is to create the dropdown from the dataset - to avoid the double hit
						// and even better than that, is to cache the initial dataset
						// 
						// basically, it's better to have the dropdown pre-populated on the server side than to use JS for it
						let el = document.querySelector('[name="'+fieldname+'"]');
						this.check_action(el, event_type, fieldname,'load');
					}

					// set up the other event handlers
					// radio buttons are set up as 'change' - but what we really need is a click handler on each radio

					if(event_type=='change' || event_type=='change_load') {
						if(sh_events[fieldname].type === 'radio') {
							let radios = document.querySelectorAll('[name="'+fieldname+'"]');
							radios.forEach(r => {
								r.addEventListener('click', (e) => this.check_action(r, event_type, fieldname, e.type) );
							});
						}
						else {
							let el = document.querySelector('[name="'+fieldname+'"]');
							if(el) {
								el.addEventListener('change', (e) => this.check_action(el, event_type, fieldname, e.type) );
							}
						}
					}
					else if(event_type=='click') {
						// a few different things that could've been clicked - handle each one differently
						// 1. a radio button (actually, handle that above)
						// 2. a "preset" button - which is what we call the red buttons a user can click to change the values of a form field more easily
						// 3. or a literal "preset_button" - which is slightly different
						document.querySelectorAll('#'+fieldname+'.sr_preset_group span button').forEach((el) => {
							el.addEventListener(event_type, (e) => this.check_action(el, event_type, fieldname, e.type) );
						});
					}
				}
			}
		});

		// not sure this is actually needed after load
		//if(this.needs_desc_change_after_load) {
			// sr_form_changeDesc(this.sh_form,'newjs-after-load');
		//}
	}


	check_action (el, event_type, fieldname, real_event_type) { 

		// read the event handler settings for this field in order to determine what happens after the change/click event occurs
		let settings = sh_events[fieldname].event_handlers[event_type];
		this.handled_el = el;

		// cycle through each group of settings and check their 'match' settings to see if these actions should run - if so, it dispatches to 'run_action'
		settings.forEach(rules => {

			let valid = 1;
			
			if(rules.match) {

				// each member of the "match" array is meant to be an "AND" - so all must pass
				//  if any one of them fails, we are done

				//rules.match.forEach (cond => {
				valid = rules.match.every (cond => {

					// the value we're testing is either 
					let value_to_test;
					
					// a) the value of some other field than the one whose settings this is (cond.param)
					if(cond.param) {
						value_to_test = document.querySelector('[name="'+cond.param+'"]').value;
					}
					// b) the data-id of this element - usually reserved for clicked non-form elements, like presets
					else if(cond.id) {
						value_to_test = this.handled_el.dataset.id;
					}
					// c) the value of data that isn't in a field, but is associated with this field's value, and is part of the larger sh_dataset
					else if(cond.dataset) {
						value_to_test = this.get_data_from_route(fieldname,cond.dataset,real_event_type);
					}
					// d) this code assumes we're testing against the value of this field (else ...)
					//    Note: upon load, the value in the dropdown won't necessarily have been set yet, because we haven't populated the dropdown yet ... so read the value from the initial json setup
					//          if it's a later change by the user, then we're reading the value they changed it to, so it's OK to use this.handled_el.value
					else {
						value_to_test = (real_event_type=='load') ? (sh_param[fieldname] || sh_events[fieldname].default) : this.handled_el.value; 
					}

					// valid = this.check_if(cond,value_to_test);
					return this.check_if(cond,value_to_test);

				});
			}

			if(!valid) {
				return;
			}

			rules.actions.forEach (act => {
				this.run_action(fieldname,act,real_event_type);
			});

		});

		if(this.needs_desc_change) {
			sr_form_changeDesc_caller(this.sh_form,'newjs-preset');
		}

	}
	
	check_if(cond,value_to_test) {
		// return 'true' once any of the conditions are good within this set of conditionals (usually there's just 1, but there could be multiples, which means OR

		// use either == or != or a regex
		if(typeof cond.val !== 'undefined') {
			if (value_to_test == cond.val) {
				return true;
			}
		}
		if(cond.id) {
			if (value_to_test == cond.id) {
				return true;
			}
		}
		if(typeof cond.val_ne !== 'undefined') {
			if (value_to_test != cond.val_ne) {
				return true;
			}
		}
		if(cond.regex) {
			const re = new RegExp(cond.regex);
			if(re.test(value_to_test)) {
				return true;
			}
		}
		
		return false;
	}

	check_filter(data,filter) {
		let valid = false;
		//  filter => [ { key => 'tier', equals => '1' } ],
		filter.forEach((f) => {
			if(f.eq) {
				if (data[f.key] == f.eq) {
					valid = true;
				}
			}
			else if(f.gte) {
				if (data[f.key] >= f.gte) {
					valid = true;
				}
			}
		});
		return valid;
	}

	run_action (fieldname,action,real_event_type) {  // real_event_type == the real event type (click or change), as opposed to what we passed (which could be "change_load")
	
		// determine which other fields/selectors you are targeting to be altered in the DOM
		let targets = [];
		if(action.target_field) {
			action.target_field.forEach (tar => {
				targets.push('[name="'+tar+'"]');
			});
		}
		if(action.target_selector) {
			action.target_selector.forEach (tar => {
				targets.push(tar);
			});
		}
		if(!targets.length) {
			return;
		}
		let target_selector_string = targets.join(',');

		// proceed based on action type
		if(action.type == 'repopulate') {
			let html_options = [];
			let fetches = [];

			// loop through the 'options' settings - and create val/label pairs for <option>
			action.options.forEach(opt => {
				
				if(opt.dataset) {
					let data = this.get_data_from_route(fieldname,opt.dataset,real_event_type);
					if(data && Array.isArray(data)) {
						data.forEach(d => {
							html_options.push({ val: d, label: d });
						});
					}
					else if(data) {
						//data = this.data_sort(data,opt.label);
						let temp_options = [];
						Object.keys(data).forEach(key => {
							let valid = true;
							if(opt.filter) {
								valid = this.check_filter(data[key],opt.filter);
							}
							if(valid && data[key][opt.label]) {
								temp_options.push({ val: key, label: data[key][opt.label] });
							}
						});
						let sort_by = action.sort_by || 'label';
						temp_options = this.data_sort(temp_options,sort_by);
						temp_options.forEach(t => html_options.push(t));
					}
				}
				else if (opt.stats) {
					let temp_options = this.get_stats_options(opt.stats);
					temp_options.forEach(t => html_options.push(t));
				}
				else if (opt.range) {
					for (let x=opt.range[0]; x<=opt.range[1]; ++x) {
						html_options.push({ val: x, label: x });
					}
				}
				else if(opt.ajax) {
					// turn opt.ajax.params into string
					//const qs = new URLSearchParams(JSON.parse(opt.ajax.params)).toString();

					let qs_arr = [];
					Object.entries(opt.ajax.params).map(([key, val]) => {
						let temp = key+'=';
						temp += (val.fieldval)
							? document.querySelector('[name="'+encodeURIComponent(val.fieldval)+'"]').value
							: temp += val
						;
						qs_arr.push(temp);
					});
					let qs = qs_arr.join('&');

					fetches.push(
						fetch(opt.ajax.source + '?' + qs,
							{
								method: 'GET',
								headers: {
									'Accept': 'application/json',
								}
							})
							.then((response) => response.json())		
							.then((data) => {
								// data = JSON.parse(data);
								data.forEach(d => {
									html_options.push({ val: d.val, label: d.label });
								});
							})
							.catch(() => {
								// appendTo.innerHTML = '<p class="oops">Something went wrong.</p>';
							})
					);
							/*
							vjs_Ajax('GET',
								opt.ajax.source + '?' + qs,
								{},
								function(data) {
									data = JSON.parse(data);
									data.forEach(d => {
										html_options.push({ val: d.val, label: d.label });
									});
								}, // success
								function() { return true; }, // failure
								false,
								false
							);
							*/
				}
				else {
					html_options.push({ val: opt.val, label: opt.label, disabled: opt.disabled });
				}

			});

			// now that you have an array of <option>s - populate the targeted fields
			if(fetches.length) {
				Promise.all(fetches).then(() => {
					this.populate_select(target_selector_string, real_event_type, action, html_options);
				});
			}
			else {
				this.populate_select(target_selector_string, real_event_type, action, html_options);
			}
		}
		else if (action.type == 'filter') {
			// theoretically this could take an array of values to filter in (or out)
			//   or take the data that's returned and those are what to keep
			let vals_to_keep = [];
			if(action.dataset) {
				let data = this.get_data_from_route(fieldname,action.dataset,real_event_type);
				if(Array.isArray(data)) {
					vals_to_keep = data;
				}
				else {
					vals_to_keep = Object.keys(data);
				}
			}
			else if(action.min) {
				let form_el = document.querySelectorAll(target_selector_string)[0]; // assume if it's multiple (like year_min/year_max) that the two dropdowns are the same. This is a bit hacky - only used by PFR play_finder at the moment - "playoff_round" selection to SB/not-SB changes year_min/max
				for (const opt of form_el.options) {
					if(opt.value >= action.min) {
						vals_to_keep.push(opt.value);
					}
				}
			}
			document.querySelectorAll(target_selector_string).forEach(form_el => {
				// get existing value
				let original_dropdown_value = form_el.value;
				
				// set dropdown value to empty - we'll set it back to original later, if it exists in the vals_to_keep array
				form_el.value = '';
			
				// hide all dropdown values ...
				if(form_el.options) {
					for (const opt of form_el.options) {
						if(opt.value!=='') {  // don't hide the ones with no values, like 'Any'
							opt.hidden = true;
							opt.disable = true;
						}
					}
				}
				// ... then show the ones we'll keep
				vals_to_keep.forEach((v) => {
					let opt = form_el.querySelector('option[value="'+v+'"]');
					if(opt) {
						opt.hidden = false;
						opt.disable = false;
					}
				});

				// set back to original value, if it exists in the new array
				if(vals_to_keep.includes(original_dropdown_value)) {
					form_el.value = original_dropdown_value;
				}

			});
		}
		else if (action.type == 'unfilter') {
			document.querySelectorAll(target_selector_string).forEach(form_el => {
//			action.target_field.forEach (tar => {
//				let form_el = document.querySelector('[name="'+tar+'"]');
//				if(form_el) {
					if(form_el.options) {
						for (const opt of form_el.options) {
							opt.hidden = false;
							opt.disable = false;
						}
					}
//				}
			});
		}
		else if(action.type == "trigger") {
			document.querySelectorAll(target_selector_string).forEach(form_el => {
				form_el.dispatchEvent(new Event(action.trigger_event));
			});
		}
		else if(action.type == "set") {
			document.querySelectorAll(target_selector_string).forEach(form_el => {
				const fieldname = form_el.name;

				if(typeof action.set_val==='undefined') {
					return;
				}

				if(form_el.type==='radio') {
					form_el.checked=false;
					if (form_el.value==action.set_val) {
						form_el.checked=true;
						form_el.dispatchEvent(new Event('click'));
					}
				}
				else if(form_el.type==='checkbox') {
					form_el.checked=false;
					let setValues = JSON.parse(action.set_val);
					if (setValues.includes(form_el.value)) {
						form_el.checked=true;
						form_el.dispatchEvent(new Event('change'));
					}
				}
				else {
					if (action.set_val=='match-this') {
						form_el.value = (this.handled_el.type == 'checkbox') ? ((this.handled_el.checked) ? 1 : 0): this.handled_el.value;
					}
					else if (new RegExp('from:').test(action.set_val)) {
						let f = action.set_val.replace('from:','').trim();
						form_el.value = document.querySelector('[name="' + f + '"]').value;
					}
					else {
						form_el.value = action.set_val;
					}
					form_el.dispatchEvent(new Event('change'));
					this.check_reset_chosen(form_el);
				} 
				//else { // this is a checkbox group --- I think this section is unnecessary, and it could do like what the radio section does
					//let setValues = JSON.parse(action.set_val);
					// first uncheck it - then recheck it if it matches one of the assigned values
					//form_el.checked = false;
					//setValues.forEach((v) => {
					//	if(form_el.value == v) {
					//		form_el.checked = true;
					//	}
					//});
				//}
				
				//indicateChangedFormfield(form_el);
			});
			if(real_event_type == 'load') {
				this.needs_desc_change_after_load = 1;
			}
			else {
				this.needs_desc_change = 1;
			}
		}
		else if(action.type == 'hide') {
//			action.target_field.forEach (tar => {
			document.querySelectorAll(target_selector_string).forEach(fieldset_el => {
//				let fieldset_el = document.querySelector('.fieldset.'+tar);
//				if(fieldset_el) {
				//let fieldset_el = el.classList.contains('fieldset') ? el : el.closest('.fieldset');
					if(fieldset_el.classList.contains('toggleable')) {
						fieldset_el.classList.remove('open');
					}
					else {
						fieldset_el.classList.add('hidden');
					}
//				}
			});
		}
		else if(action.type == 'show') {
//			action.target_field.forEach (tar => {
			if(action.target_selector_from_field_val) {
				let f = document.querySelector('[name="'+action.target_selector_from_field_val+'"]');
				target_selector_string = f.value;
			}
			document.querySelectorAll(target_selector_string).forEach(fieldset_el => {
//				let fieldset_el = document.querySelector('.fieldset.'+tar);
//				if(fieldset_el) {
					if(fieldset_el.classList.contains('toggleable')) {
						fieldset_el.classList.add('open');
						// do the 'chosen' stuff because it wasn't set up on load if the field was hidden
						sr_chosen_enable_select(fieldset_el);
					}
					else {
						fieldset_el.classList.remove('hidden');
					}
//				}
			});
		}
	}


	populate_select(target_selector_string, real_event_type, action, html_options) {
		document.querySelectorAll(target_selector_string).forEach(form_el => {
			console.log(form_el.name);
			// "form_el" is theoretically the <select> at this point
			//   failsafe, return if not a select
			//   one situation where this may be true is when "order_by" is turned into a hidden field for non-subscribers
			if(!form_el || form_el.tagName!=='SELECT') {
				return; 
			}

			// the options can be an "append", "prepend", "remove" or "normal" - which is an actual entire repopulation
			// remove any existing <option>s if this is a "normal" repopulate
			if(!action.append && !action.prepend && !action.remove && form_el.options) {
				form_el.options.length = 0;
			}

			html_options.forEach(o => {
				if(action.remove) {
					let els = form_el.querySelectorAll('option[value="' + o.val + '"]');
					if(!els) { return; }
					if(o.label) {
						form_el.removeChild(Array.from(els).find(el => el.textContent == o.label));
					}
					else {
						form_el.removeChild(els[0]);
					}
				}
				else {

					// cycle through our options and add to the <select>
					let new_opt = new Option(o.label,o.val);
					if(o.disabled) {
						new_opt.disabled = true;
					}

					if(action.prepend) {
						form_el.insertBefore(new_opt, form_el.firstChild);
					}
					else {
						form_el.add(new_opt);
					}
				}
			});

			// if this is repopulating on load - set the selected option to the value of what's in $sh{param}
			let tar = form_el.name || '';
			if(real_event_type=='load') {
				form_el.value = (tar && sh_param[tar]) ? sh_param[tar] : '';
			}
			// or set it to what was explicitly requested in the settings
			if(action.set_to) {
				if (real_event_type!='load' || !action.set_to.not_on_load) { // i.e. a 'change_load' event, but you don't want it to happen on the 'load' part -- none of these actually exist
					if(typeof action.set_to.val !== 'undefined') {
						form_el.value = action.set_to.val;
					}
				}

				if(real_event_type == 'load') {
					this.needs_desc_change_after_load = 1;
				}
				else {
					this.needs_desc_change = 1;
				}
			}

			// the 'chosen' stuff needs to be reset if it exists - except on load
			//   on load, sr_chosen_enable_select happens in the old JS towards the end of page load 
			if(real_event_type!='load') {
				this.check_reset_chosen(form_el);
			}

		});
	}

	check_reset_chosen(form_el) {
		let chosen = form_el.parentNode.querySelector('.chosen-container');
		if(chosen) {
			// the chosen code checks for 'has_chosen' class - and if it exists, it skips re-doing it
			// thus, in order to hack into it -- so that the display is equal to the select field we've changed things to --
			//   we must remove 'chosen' first, then it just gets created again by the chosen code
			// (path of least resistance vs. changing all of the chosen code to handle this)
			form_el.parentNode.removeChild(chosen);
			form_el.has_chosen = false;
			form_el.style.display = 'block';
			sr_chosen_enable_select(form_el.parentNode);
		}
	}
	
	get_data_from_route(fieldname,data_route,real_event_type) {
		let data = sh_dataset;
		data_route.forEach(dr => {
			if(dr.key_from_param) {
				let t;
				if(sh_events[dr.key_from_param].type === 'radio') {
					let radios = document.querySelectorAll('[name="'+dr.key_from_param+'"]');
					radios.forEach(r => {
						if (r.checked) {
							t = r.value;
						}
					});
				}
				else {
					let sel = document.querySelector('[name="'+dr.key_from_param+'"]');
					if(!sel) { return; }
					t = sel.value || sh_events[fieldname].default;
				}
				if(!t) { return; }
				data = data[t];
			}
			else if(dr.key_from_value) {
				let value_to_get = (real_event_type=='load') ? (sh_param[fieldname] || sh_events[fieldname].default) : this.handled_el.value;  // upon load, the value in the dropdown won't have been set yet, because we haven't populated the dropdown yet ... if it's a later change by the user, then we're reading the value they changed it to, so it's OK to use handled_el.value
				data = data[value_to_get];
			}
			else if(dr.key) {
				if(data) {
					data = data[dr.key] || 0;
				}
			}
		});
		return data;
	}
	
	data_sort(data,order_by,dir) {
		
		if(!data.length) {
			return data;
		}
		
		dir = dir || 'a';
		let type;
		//if(data[Object.keys(data)[0]][order_by].match(/^[0-9.]*$/)) {
		if(data[0][order_by].match(/^[0-9.]*$/)) {
			type = 'num';
		}
		else {
			type = 'str';
		}

        data.sort((a,b) => {
            if(type==='num') {
                if (dir === 'a') {
                    return parseFloat(a[order_by].replace(/,/g, '')) - parseFloat(b[order_by].replace(/,/g, '')); // this is so numbers with comma separators are treated as numbers when asked for ... the alternative would be to use a 'sort' value of the actual integer on each cell
                } else {
                    return parseFloat(b[order_by].replace(/,/g, '')) - parseFloat(a[order_by].replace(/,/g, ''));
                }
            }
            else if(type==='str') {
                if (dir === 'a') {
                    return a[order_by].localeCompare(b[order_by]);
                } else {
                    return b[order_by].localeCompare(a[order_by]);
                }
            }
        });
		
		return data;
	}
	
	get_stats_options(config) {
		
		let options = [];

		let type_key;
		let match_key;

		if(config.type) {
			if(config.type.set) {
				type_key = config.type.set;
			}
			else if(config.type.read_field) {
				type_key = document.querySelector('input[name="' + config.type.read_field + '"]:checked').value;
			}
		}
		if (config.match) {
			if(config.match.set) {
				match_key = config.match.set;
			}
			else if(config.match.read_field) {
				match_key = document.querySelector('input[name="' + config.match.read_field + '"]:checked').value;
			}
		}

		let stats;
		if(type_key && match_key) {
			stats = (sh_stats.type[type_key].match[match_key])
				? sh_stats.type[type_key].match[match_key]
				: sh_stats.type[type_key].match.general
			;
		}
		else if (type_key && sh_stats.type[type_key]) {
			stats = sh_stats.type[type_key];
		}
		else if (match_key) {
			stats = (sh_stats.match[match_key])
				? sh_stats.match[match_key]
				: sh_stats.match.general
			;
		}

		if(config.base && sh_stats.order_by_base_list) {  // things like streaks, won't have an order by list - so need to skip this if so
			sh_stats.order_by_base_list.forEach(function(item,x) {
				options.push({ val: Object.keys(item)[0], label: Object.values(item)[0] }); 
			});
			options.push({ val: '', label: '---', disabled: true });
		}
							
		// respect the groupings_order if it exists
		let final_groupings_order = (stats.groupings_order)
			? stats.groupings_order
			: Object.keys(stats.groupings)
		;

		final_groupings_order.forEach(function(group,i) { 
			// will check if there is a group first -- prevents errors if something is in groupings_order array, but shouldn't be there
			if(stats.groupings[group]) {
				if(stats.groupings[group].label) {
					options.push({ val: '', label: '', disabled: true });
					options.push({ val: '', label: '--- '+stats.groupings[group].label+' ---', disabled: true });
				}
				//for (const [key, label] of Object.entries(stats.groupings[group].list)) {
				stats.groupings[group].list.forEach(function(stat,i) {
					let label = Object.values(stat)[0];
					let key   = Object.keys(stat)[0];
					options.push({ val: key, label: label });
				});
			}
		});

		return options;

	}

}// stathead ad code file for determining if users are NORMs and showing them the proper stuff

// NORMs def: http://wiki.srdevel.com/en/analytics/north-star/norms
// users who visited at least 4 times in the past 7 days
// we're going to simplify this and give them am/pm for each day


var utm_campaign = '2023_02_bnnr_norms_stathead';
var desktop_event_labels = [ 'bttn_desktop_cta_happyplace', 'bttn_desktop_cta_userslikeyou', 'bttn_desktop_cta_adfree', 'bttn_desktop_cta_allaccess' ];
var mobile_event_labels = [ 'bttn_mobile_cta_userslikeyou', 'bttn_mobile_cta_happyplace', 'bttn_mobile_cta_allaccess', 'bttn_mobile_cta_adfree' ];

var desktop_norm_ads = [
        '<div id="ad_top" class="SITEID"><div class="ad_copy"><div class="ad_headline">Is SITENAME your happy place? Stathead is for you.</div><div class="ad_subhed"><ul class="ad_bullet"><li>Access the SITENAME database</li><li>Affordable</li><li>Discovery Tools</li><li>Ad-Free Viewing</li></ul></div></div><div id="right_button"><a class="button ad_button" href="https://stathead.com/sport/SPORT/?utm_medium=sr_xsite&utm_source=SITEID&utm_campaign=UTM_CAMPAIGN&utm_content=bttn_desktop_cta_happyplace">Get your first month FREE</a></div></div>',
        '<div id="ad_top" class="SITEID"><div class="ad_copy"><div class="ad_headline">We built Stathead for users like you</div><div class="ad_subhed">Stathead is your all access pass to the SITENAME database. A search engine to easily answer all your statistical questions, plus ad-free viewing.</div></div><div id="right_button"><a class="button ad_button" href="https://stathead.com/sport/SPORT/?utm_medium=sr_xsite&utm_source=SITEID&utm_campaign=UTM_CAMPAIGN&utm_content=bttn_desktop_cta_userslikeyou">Get your first month FREE</a></div></div>',
        '<div id="ad_top" class="SITEID"><div class="ad_copy"><div class="ad_headline">Get Ad-Free viewing with Stathead</div><div class="ad_subhed">and go inside the SITENAME database. Our sports search engine easily answers all your statistical questions.</div></div><div id="right_button"><a class="button ad_button" href="https://stathead.com/sport/SPORT/?utm_medium=sr_xsite&utm_source=SITEID&utm_campaign=UTM_CAMPAIGN&utm_content=bttn_desktop_cta_adfree">Get your first month FREE</a></div></div>',
        '<div id="ad_top" class="SITEID"><div class="ad_copy"><div class="ad_headline">Stathead is your all-access ticket to the SITENAME database</div><div class="ad_subhed">A sports search engine to easily answer all your statistical questions</div></div><div id="right_button"><a class="button ad_button" href="https://stathead.com/sport/SPORT/?utm_medium=sr_xsite&utm_source=SITEID&utm_campaign=UTM_CAMPAIGN&utm_content=bttn_desktop_cta_userslikeyou">Get your first month FREE</a></div></div>',
    ];

var mobile_chart = '<div id="mobile_ad_top" class="SITEID no_logo"><div class="mobile_ad_copy"><div class="ad_subhed mobile_table">Go beyond the basics.<br />Go Inside the SITENAME Database.<br />Go to Stathead.</div><table id="stathead_table"><thead><tr><th>&nbsp;</th><th id="mobile_table_pennant"><img src="https://cdn.ssref.net/req/202301032/pennants/full/SITEID-pennant.svg"></th><th><img src="https://cdn.ssref.net/req/202301032/logos/stathead-SITEID.svg"></th></tr></thead><tbody><tr><td class="first">Affordable</td><td><span class="check_yes">&#10003;</span></td><td><span class="check_yes">&#10003;</span></td></tr><tr><td class="first">Discovery tools to search</td><td><span class="check_no">x</span></td><td><span class="check_yes">&#10003;</span></td></tr><tr><td class="first">Customized leaderboards</td><td><span class="check_no">x</span></td><td><span class="check_yes">&#10003;</span></td></tr><tr><td class="first">Ad-free viewing</td><td><span class="check_no">x</span></td><td><span class="check_yes">&#10003;</span></td></tr></tbody></table><div class="ad_foot">' + (sr_SITE_ABB == 'fb' ? 'Stathead FBref is free for a limited time' : 'Get your first month FREE. Cancel anytime.') + '&nbsp;<a class="button ad_button" href="https://stathead.com/sport/SPORT/?utm_medium=sr_xsite&utm_source=SITEID&utm_campaign=UTM_CAMPAIGN&utm_content=bttn_mobile_cta_happyplace">SIGN ME UP!</a></div></div></div>';

var mobile_norm_ads = [
    mobile_chart,
        '<div id="mobile_ad_top" class="SITEID"><div class="mobile_ad_copy"><div class="ad_headline">We built Stathead for users like you</div><div class="ad_subhed">Stathead is your all access pass to the SITENAME database. A search engine to easily answer all your statistical questions, plus ad-free viewing.</div></div><div id="mobile_button"><a class="button ad_button" href="https://stathead.com/sport/SPORT/?utm_medium=sr_xsite&utm_source=SITEID&utm_campaign=UTM_CAMPAIGN&utm_content=bttn_mobile_cta_userslikeyou">Get your first month FREE</a></div></div>',
        '<div id="mobile_ad_top" class="SITEID"><div class="mobile_ad_copy"><div class="ad_headline">Is SITENAME your happy place? Stathead is for you.</div><div class="ad_subhed"><ul class="ad_bullet"><li>Access the SITENAME database</li><li>Affordable</li><li>Discovery Tools</li><li>Ad-Free Viewing</li></ul></div></div><div id="mobile_button"><a class="button ad_button" href="https://stathead.com/sport/SPORT/?utm_medium=sr_xsite&utm_source=SITEID&utm_campaign=UTM_CAMPAIGN&utm_content=bttn_mobile_cta_happyplace">Get your first month FREE</a></div></div>',
        '<div id="mobile_ad_top" class="SITEID"><div class="mobile_ad_copy"><div class="ad_headline">Stathead is your all-access ticket to the SITENAME database</div><div class="ad_subhed">A sports search engine to easily answer all your statistical questions</div></div><div id="mobile_button"><a class="button ad_button" href="https://stathead.com/sport/SPORT/?utm_medium=sr_xsite&utm_source=SITEID&utm_campaign=UTM_CAMPAIGN&utm_content=bttn_mobile_cta_allaccess">Get your first month FREE</a></div></div>',
    ];

var norm_ad_strings = {
	'pfr': { 'SITEID': 'pfr', 'SITENAME': 'Pro Football Reference', 'SPORT': 'football', 'SHORTNAME': 'Pro Football Ref' },
    'cfb': { 'SITEID': 'cfb', 'SITENAME': 'College Football Reference', 'SPORT': 'college football', 'SHORTNAME': 'College Football Ref' },
	'br': { 'SITEID': 'br', 'SITENAME': 'Baseball Reference', 'SPORT': 'baseball', 'SHORTNAME': 'Baseball Ref' },
	'bbr': { 'SITEID': 'bbr', 'SITENAME': 'Basketball Reference', 'SPORT': 'basketball', 'SHORTNAME': 'Basketball Ref' },
    'cbb': { 'SITEID': 'cbb', 'SITENAME': 'College Basketball Reference', 'SPORT': 'college basketball', 'SHORTNAME': 'College Basketball Ref' },
	'hr': { 'SITEID': 'hr', 'SITENAME': 'Hockey Reference', 'SPORT': 'hockey', 'SHORTNAME': 'Hockey Ref' },
	'fb': { 'SITEID': 'fb', 'SITENAME': 'FBref', 'SPORT': 'fb', 'SHORTNAME': 'FBref' },
};

/* turn the generic ad copy above into a sport-specific version */
function sr_norm_ad_parse(ad_copy, sport) {
	var replacement_strings = norm_ad_strings[sport];

	var keys = Object.keys(replacement_strings);
	keys.forEach(function(orig_string) {
		var replace = new RegExp(orig_string, 'g');
		ad_copy = ad_copy.replace(replace, replacement_strings[orig_string]);
	});	

	// also change the utm string
	ad_copy = ad_copy.replace(/UTM_CAMPAIGN/, utm_campaign);

	return ad_copy;
}

/* track if this user is a norm or not via some localstorage items */
function sr_norm_tracker() {
    // time to go to the norm store
    var norm_store = localStorage.getItem('sr_v');
    if (norm_store) {
	norm_store = atob(norm_store);
        norm_store = JSON.parse(norm_store);
    } else {
        norm_store = new Object();
    }
    /* this is a hash with dates as the key
    like so:
        sr_v = { '2022-12-31': { a: 1, p: 1 },
                 '2023-01-01': { a: 1, p: 0 },
        where a and p indicate an am or pm visit */

    // first thing we want to do is delete anything from >7 days ago
    var today = new Date();
    var week_ago = new Date();
    week_ago.setDate(today.getDate()-7);

    // count the norms while we're doing this too
    var norm_count = 0;
    var dates = Object.keys(norm_store);
    dates.forEach(function(date) {
        var d = new Date(date);
        if (d < week_ago) {
            delete norm_store[date];
        } else {
            // if this is not from > 7 days ago then go ahead and add it to the count
            norm_count += (norm_store[date].a)?1:0;
            norm_count += (norm_store[date].p)?1:0;
        }
    });

    // next add an object for today whether it's am or pm
    var today_date = today.getFullYear() + '-' + (today.getMonth()+1) + '-' + today.getDate();
    if (!norm_store[today_date]) {
        norm_store[today_date] = new Object();
    }
    if (today.getHours() >= 12) {
        if (norm_store[today_date].p != 1) {
            norm_store[today_date].p = 1;
            norm_count++;
        }
    } else {
        if (norm_store[today_date].a != 1) {
            norm_store[today_date].a = 1;
            norm_count++;
        }
    }

    localStorage.setItem('sr_v', btoa(JSON.stringify(norm_store)));

    // finally, return if we are a NORM
    if (norm_count >= 4) {
        return 1;
    } else {
        return 0;
    }
}

// use session cookies to track pageviews
function sr_pv_tracker(stathead_site) {
    var session_cookie_name = 'sr_s' + (stathead_site ? '_' + stathead_site : '');
    var session_cookie = sessionStorage.getItem(session_cookie_name);

    // this reads the same cookie as the NORM ad since we don't want to show
    // the same ads a zillion times
    var norm_cookie_name = 'sr_n'; // cookie name for this to see how many/when we've seen an ad
    var norm_cookie = vjs_readCookie(norm_cookie_name);

    var num_seen = 0; // default this to having seen the ad 0 times
    var last_seen;
    if (norm_cookie) {
        // this is like num_ads:date/time last seen
        var cookie_split = norm_cookie.split("|");

        num_seen = cookie_split[0];
        last_seen = new Date(cookie_split[1]);
    }

    var session_pv_val = 0;
    if (session_cookie) {
        // just storing the current pv value in the session cookie
        // the ad seen stuff comes in the NORM cookie because we're sharing
        // ads between the two
        session_pv_val = session_cookie;
    }

    // increment for this pageview
    session_pv_val++;

    var check_days = 7;
    if (num_seen > 1) {
        check_days = 14;
    }

    if(sr_SITE_ABB == 'fb'){
        check_days = 5;
    }

    if (session_pv_val == 1 && sr_SITE_ABB == 'stathead'){

        var is_mobile = (Modernizr.desktop || Modernizr.laptop)?0:1;
        if (is_mobile) {
            console.log("### showing mobile modal first visit ad");
            sr_show_desktop_modal_first_visit_ad('mobile', stathead_site);
        } else {
            console.log("### showing desktop modal first visit ad");
            sr_show_desktop_modal_first_visit_ad('desktop', stathead_site);
        }
        
    }
    else if (session_pv_val == 5 && sr_SITE_ABB != 'cfb') { //disable cfb 5pv ads for the time being
        // check if last seen is >= 7 days ago
        // or 14 days if we're past the first ad

        var week_ago = new Date();
        week_ago.setDate(week_ago.getDate()-check_days);
        if (last_seen && last_seen > week_ago) {
            // don't show the ad
            console.log("### user has seen an ad too recently, skipping");
        } else {
            var is_mobile = (Modernizr.desktop || Modernizr.laptop)?0:1;
            if (is_mobile) {
		    utm_campaign = '2023_02_bnnr_5pagesession_stathead';
		    event_label = mobile_event_labels[num_seen];
                    sr_record_analytics_event(utm_campaign + '_mobile', document.location.hostname, event_label);
                    sr_show_mobile_top_norm_ad(num_seen);
            } else {
                if (num_seen < 1) {
                    console.log("### showing desktop modal norm ad");
		    utm_campaign = '2023_02_mdl_5pagesession_stathead';
                    sr_record_analytics_event(utm_campaign + '_desktop', document.location.hostname, sr_record_directory());
                    sr_show_desktop_modal_norm_ad(1);
                } else {
                    console.log("### showing desktop top norm ad " + (num_seen-1));
		    utm_campaign = '2023_02_bnnr_5pagesession_stathead';
		    if (num_seen == 1) {
		    	event_label = desktop_event_labels[3];
                    	sr_record_analytics_event(utm_campaign + '_desktop', document.location.hostname, event_label);
                    	sr_show_desktop_top_norm_ad(3); // these are in a different order so i put this on the end of this array
		    } else {
		    	event_label = desktop_event_labels[num_seen-1];
                    	sr_record_analytics_event(utm_campaign + '_desktop', document.location.hostname, event_label);
                    	sr_show_desktop_top_norm_ad(num_seen-1); // these should be 1-3, re-ref them to an array so it's 0-2
		    }
                }
            }
            num_seen++;
            if (num_seen >= 4) {
                num_seen = 0;
            }

            var last = new Date();
            // set the cookie with the last seen date as right now so we know when to set an ad next
            // note that no final param = no expires date = session cookie
            vjs_createCookie(norm_cookie_name, num_seen + "|" + last.toUTCString(), 90);
        }
    }

    // always update our session pageview cookie
    sessionStorage.setItem(session_cookie_name, session_pv_val);
}


/* if we are showing the ad, decide which ad to show based on the number we've seen */
function sr_norm_ad() {
    var norm_cookie_name = 'sr_n'; // cookie name for this to see how many/when we've seen an ad
    var norm_cookie = vjs_readCookie(norm_cookie_name);

    var num_seen = 0; // default this to having seen the ad 0 times
    var last_seen;
    if (norm_cookie) {
        // this is like num_ads:date/time last seen
        var cookie_split = norm_cookie.split("|");

        num_seen = cookie_split[0];
        last_seen = new Date(cookie_split[1]);
    }

    // first check if last seen is >= 7 days ago
    var check_days = 7;
    if(sr_SITE_ABB == 'fb'){
        check_days = 10;
    }
    if (last_seen) {
        var week_ago = new Date();
        week_ago.setDate(week_ago.getDate()-check_days);
        if (last_seen > week_ago) {
            // just exit out of this function if we're not showing the ad
            console.log("### user has seen an ad too recently, skipping");
            return 0;
        }
    }

    var is_mobile = (Modernizr.desktop || Modernizr.laptop)?0:1;

    if (is_mobile) {
	    event_label = mobile_event_labels[num_seen];
            sr_record_analytics_event('2023_02_bnnr_norms_stathead_mobile', document.location.hostname, event_label);
            sr_show_mobile_top_norm_ad(num_seen);
    } else {
        if (num_seen < 1) {
            console.log("### showing desktop modal norm ad");
            sr_record_analytics_event('2023_02_normspopup_stathead_desktop', document.location.hostname, sr_record_directory());
            sr_show_desktop_modal_norm_ad();
        } else {
            console.log("### showing desktop top norm ad " + (num_seen-1));
	    event_label = desktop_event_labels[num_seen-1];
            sr_record_analytics_event('2023_02_bnnr_norms_stathead_desktop', document.location.hostname, event_label);
            sr_show_desktop_top_norm_ad(num_seen-1); // these should be 1-3, re-ref them to an array so it's 0-2
        }
    }

    // now update our cookie
    num_seen++;

    // if we got this far then we last saw an ad 7+ days ago
    if (num_seen >= 4) {
        num_seen = 0; // cycle this back to the original pop up ad
    }
    var last = new Date();
    vjs_createCookie(norm_cookie_name, num_seen + "|" + last.toUTCString(), 90);

}

/* modal norm ad overlay code */
function sr_show_desktop_modal_norm_ad(is_5pv) {
    // build our modal here from a static file that should exist for every site via stow (i hope)
    var modal_content = (sr_SITE_ABB == 'cfb' || sr_SITE_ABB == 'cbb' ? ('/' + sr_SITE_ABB) : '') + '/inc/stathead/' + sr_SITE_ABB + '_stathead_ad.html';
    if (is_5pv) {
      modal_content = (sr_SITE_ABB == 'cfb' || sr_SITE_ABB == 'cbb' ? ('/' + sr_SITE_ABB) : '') + '/inc/stathead/' + sr_SITE_ABB + '_stathead_5pv.html';
    }

    // populate the modal
    Modal.open({
	    ajaxContent: modal_content,
	    draggable: false,
	    showOverlay: true,
	    pin: true,
	    params: { }
    });

    // add a mutation observer here to see when this modal-content element appears
    // and when it does, make sure it's centered and styled correctly
    // we were doing this in the load event of the above Modal but that was not firing properly
    var observer = new MutationObserver(
        function(mutationList, mo) {
            if (document.getElementById('modal-content')) {
                document.getElementById('modal-content').style.padding = '0px';
                document.getElementById('modal-container').style.padding = '0px';
                document.getElementById('modal-container').style.backgroundImage = "url('https://cdn.ssref.net/req/202301032/images/stathead/stathead-newspaper-texture.jpg')";
                document.getElementById('modal-close').style.top = '12px';
                document.getElementById('modal-close').style.color = '#fff';
                Modal.center();
                observer.disconnect();
            }
        }
    );

    observer.observe(document.body, { childList: true, subtree: true });

}

/* modal norm ad overlay code */
function sr_show_desktop_modal_first_visit_ad(screen, stathead_site) {

    var modal_content = (sr_SITE_ABB == 'cfb' || sr_SITE_ABB == 'cbb' ? ('/' + sr_SITE_ABB) : '') + '/inc/stathead/' + stathead_site + '_stathead_first_visit' + (screen == 'mobile' ? '_mobile' : '') + '.html';
    // populate the modal
    Modal.open({
	    ajaxContent: modal_content,
	    draggable: false,
	    showOverlay: true,
	    pin: true,
	    params: { }
    });

    var observer = new MutationObserver(
        function(mutationList, mo) {
            if (document.getElementById('modal-content')) {
                document.getElementById('modal-content').style.padding = '0px';
                document.getElementById('modal-container').style.backgroundImage = "url('https://cdn.ssref.net/req/202301032/images/stathead/stathead-newspaper-texture.jpg')";
                document.getElementById('modal-container').style.padding = '0px';
                document.getElementById('modal-close').style.top = '12px';
                document.getElementById('modal-close').style.color = '#fff';
                Modal.center();
                observer.disconnect();
            }
        }
    );
    observer.observe(document.body, { childList: true, subtree: true });
}

/* top banner ad norm ad (3 versions) */
function sr_show_desktop_top_norm_ad(version) {

    // default to the first top ad if nothing's passed
    if (!version) {
        version = 0;
    }

    var d = document.createElement('div');
    d.setAttribute("class", "stathead_ad");
    d.setAttribute("id", "stathead_ad");

    d.innerHTML = sr_norm_ad_parse(desktop_norm_ads[version], sr_SITE_ABB);

    var close_button = document.createElement('div');
    close_button.setAttribute("class", "closer");

    close_button.onclick = function() {
        document.getElementById('stathead_ad').parentNode.removeChild(document.getElementById('stathead_ad'));
    }
    d.firstChild.appendChild(close_button);

    document.getElementById('wrap').insertBefore(d, document.getElementById('header').nextSibling);
    return 0;
}

function sr_show_mobile_top_norm_ad(version) {
    // default to the first top ad if nothing's passed
    if (!version) {
        version = 0;
    }

    var d = document.createElement('div');
    d.setAttribute("class", "mobile_stathead_ad");
    d.setAttribute("id", "mobile_stathead_ad");

    d.innerHTML = sr_norm_ad_parse(mobile_norm_ads[version], sr_SITE_ABB);

    var close_button = document.createElement('div');
    close_button.setAttribute("class", "closer");

    close_button.onclick = function() {
        document.getElementById('mobile_stathead_ad').parentNode.removeChild(document.getElementById('mobile_stathead_ad'));
    }
    d.firstChild.appendChild(close_button);

    document.getElementById('wrap').insertBefore(d, document.getElementById('header').nextSibling);
    // fix this to block instead of flex so it floats right
    document.querySelector('.ad_subhed').style.display = 'block';

    return 0;
}

function sr_af_user_check() {
    var sr_cookie = vjs_readCookie(sr_auth_cookie);
    var cookie_check = { "br": 2, "pfr": 3, "cfb": 3, "bbr": 4, "cbb": 4, "hr": 5, "fb": 6 };
    
    if (sr_cookie) {
        var user_data = sr_cookie.split(/::/);
        var session = user_data[2];
        var cookie_val = cookie_check[sr_SITE_ABB];

	// check for the site we're on or all sites = 1
        if (cookie_val && (session.match(new RegExp(cookie_val + "$")) || session.match(/1$/))) {
                return 1;
        }
   }

   return 0;
}

function sr_norm_check() {
    if (sr_SITE_ABB == 'pfr' || sr_SITE_ABB == 'cfb' || sr_SITE_ABB == 'br' || sr_SITE_ABB == 'bbr' || sr_SITE_ABB == 'cbb' || sr_SITE_ABB == 'hr' || sr_SITE_ABB == 'fb') {
    	    console.log("### running sr_norm_check");
    // track pageviews here too
    sr_pv_tracker();
	    var is_norm = sr_norm_tracker();
	    if (is_norm && sr_SITE_ABB != 'cfb') { //disable cfb norm ads for the time being
		sr_norm_ad();
	    }
    }
    else if (sr_SITE_ABB == 'stathead') { // to show first visit Stathead ad
        var pathname = document.location.pathname;
        if (pathname.includes('/tiny')) {
            // but only do this for non-logged in users
            var stathead_user = vjs_readCookie('stathead_user');
            var sportname = document.querySelector('html').getAttribute('data-root');
            var sitename;
            if (sportname.includes('/pfr')) {
                sitename = 'pfr';
            }
            else if (sportname.includes('/cfb')) {
                sitename = 'cfb';
            }
            else if (sportname.includes('/br')) {
                sitename = 'br';
            }
            else if (sportname.includes('/bbr')) {
                sitename = 'bbr';
            }
            else if (sportname.includes('/cbb')) {
                sitename = 'cbb';
            }
            else if (sportname.includes('/hr')) {
                sitename = 'hr';
            }
            else if (sportname.includes('/fb')) {
                sitename = 'fb';
            }
            if ( !stathead_user && sitename ) {
                sr_pv_tracker(sitename);
            }
            // also check if user should see ads on tinyurl pages
            var stathead_site = vjs_readCookie('stathead_site');
            var stathead_type = vjs_readCookie('stathead_type');
            var college_access = { 'bbr': 'cbb', 'pfr': 'cfb' };
            if( stathead_type == 'pay' && (stathead_site == sitename || (college_access[stathead_site] && college_access[stathead_site] == sitename) || stathead_site == 'all') ){
                var tiny_ad = document.getElementById('stathead_trial_box');
                if(tiny_ad){
                    tiny_ad.style.display = 'none';
                }
            }
        }
    }
}

var is_af = sr_af_user_check();
if (!is_af) {
	sr_utilities_js_loader.push(sr_norm_check);
}

/* *********************************************************************
   # Usage       :   sr_note_box_[check_display|set_cookie]
   # Purpose     :   gives us a means to call out users to the site to sign up for our newsletter or other cta's
   # Returns     :   nothing
   # Parameters  :   none, looks for the .note_box div on the page
   # Throws      :
   # See Also    :

   # Comments :
   ********************************************************************** */

var sr_note_box_cookie    = 'sr_note_box_stathead';
var sr_note_box_countdown_cookie = 'sr_note_box_countdown';

// These params determine how often the note box is shown.
var sr_note_box_before_first_show = 3;
var sr_note_box_show_every = 6;
if (sr_SITE_ABB === 'fb') { 
    sr_note_box_show_every = 4;
}

var sr_note_box_show_times = 12;
// -2 due to two off by one issues
var sr_note_box_countdown_num = sr_note_box_before_first_show + (sr_note_box_show_every * sr_note_box_show_times) - 2;

function sr_note_box_show_social_media(sport, sport_title) {
    var note_box = document.createElement('DIV');

    note_box.id = 'social_cta';
    vjs_addClass(note_box,'sr_note_box');

    var twitter_handles = {
        br : "baseball_ref",
        bbr : "bball_ref",
        pfr : "pfref",
        hr : "hockey_ref",
        cbb : "collegebb_ref",
        cfb : "collegefb_ref",
        sr : "sports_ref",
    };
    var instagram_handles = {
        br : "baseball.reference",
        bbr : "basketball.reference",
        pfr : "profootballreference",
        hr : "hockeyreference",
        cbb : "basketball.reference",
        cfb : "profootballreference",
    };
    var facebook_handles = {
        br : "Baseball.Reference",
        bbr : "Basketball.Reference",
        pfr : "Pro.Football.Reference",
        hr : "Hockey.Reference",
        cbb : "SR.CollegeBasketball",
        cfb : "SR.CollegeFootball",
    };
    var tiktok_handles = {
        br : "baseball.reference",
        bbr : "basketball.reference",
        pfr : "profootballreference",
        hr : "hockeyreference",
        cbb : "collegebb_ref",
        cfb : "collegefb_ref",
    };


    // NOTE: this will need to be updated to use the form and copy that marketing wants.
    if ( sport != "sr") {
        note_box.innerHTML = '	<div role="button" aria-label="close" class="closer" onclick="sr_note_box_set_cookie()"></div>\
        <img src="https://cdn.ssref.net/req/202204281/logos/'+(sport)+'-logo.svg" alt="Stathead.com Logo">\
        <p class="cta">FOLLOW US ON SOCIAL MEDIA<br>Want more of the '+(sport_title)+' Reference content you love? Connect with us!</p>\
        <span class="cta_mobile">Our Social Media</span>\
        <div class="img_row">\
            <div class="img_column">\
            <a href="https://www.twitter.com/'+(twitter_handles[sport])+'" target="_blank"> <img src="https://cdn.ssref.net/req/202204281/logos/twitter_logo_small.png" alt="Twitter logo" style="padding: 6px 0;" /></a>\
            </div>\
            <div class="img_column">\
            <a href="https://www.instagram.com/'+(instagram_handles[sport])+'" target="_blank"> <img src="https://cdn.ssref.net/req/202204281/logos/instagram_logo_small.png" alt="Instagram logo" style="padding: 6px 0;" /></a>\
            </div>\
            <div class="img_column">\
            <a href="https://www.tiktok.com/@'+(tiktok_handles[sport])+'" target="_blank"> <img src="https://cdn.ssref.net/req/202204281/logos/tiktok_logo_small.png" alt="Tik tok logo" style="padding: 6px 0;" /></a>\
            </div>\
            <div class="img_column">\
            <a href="https://www.facebook.com/'+(facebook_handles[sport])+'" target="_blank"> <img src="https://cdn.ssref.net/req/202204281/logos/facebook_logo_small.png" alt="Facebook logo" style="padding: 6px 0;" /></a>\
            </div>\
            <div class="img_column">\
            <a href="https://www.youtube.com/user/sportsreference " target="_blank"> <img src="https://cdn.ssref.net/req/202204281/logos/youtube-logo-small.png" alt="Youtube logo" style="padding: 6px 0;" /></a>\
            </div>\
            <div class="img_column">\
            <a href="https://www.reddit.com/r/sportsreference" target="_blank"> <img src="https://cdn.ssref.net/req/202204281/logos/reddit_logo_small.png" alt="Reddit logo" style="padding: 6px 0;" /></a>\
            </div>\
        </div>\
        <p class="links"><a href="https://'+(window.location.hostname)+'/email" onclick="sr_note_box_set_cookie(90,0,1)" target="_blank">Subscribe to our newsletter</a> &bull; <a href="javascript:sr_note_box_set_cookie()">Hide This</a></p>\
    ';
    }
    else {
        note_box.innerHTML = '	<div role="button" aria-label="close" class="closer" onclick="sr_note_box_set_cookie()"></div>\
        <img src="https://cdn.ssref.net/req/202204281/logos/'+(sport)+'-logo.svg" alt="Stathead.com Logo">\
        <p class="cta">FOLLOW US ON SOCIAL MEDIA<br>Want more of the '+(sport_title)+' Reference content you love? Connect with us!</p>\
        <span class="cta_mobile">Our Social Media</span>\
        <div class="img_row">\
            <div class="img_column">\
            <a href="https://www.twitter.com/'+(twitter_handles[sport])+'" target="_blank"> <img src="https://cdn.ssref.net/req/202204281/logos/twitter_logo_small.png" alt="Twitter logo" style="padding: 6px 0;" /></a>\
            </div>\
            <div class="img_column">\
            <a href="https://www.linkedin.com/company/sports-reference-llc" target="_blank"> <img src="https://cdn.ssref.net/req/202204282/logos/linkedin_logo_small.png" alt="LinkedIn logo" style="padding: 6px 0;" /></a>\
            </div>\
            <div class="img_column">\
            <a href="https://www.youtube.com/user/sportsreference" target="_blank"> <img src="https://cdn.ssref.net/req/202204281/logos/youtube-logo-small.png" alt="YouTube logo" style="padding: 6px 0;" /></a>\
            </div>\
            <div class="img_column">\
            <a href="https://www.reddit.com/r/sportsreference" target="_blank"> <img src="https://cdn.ssref.net/req/202204281/logos/reddit_logo_small.png" alt="Reddit logo" style="padding: 6px 0;" /></a>\
            </div>\
        </div>\
        <p class="links"><a href="https://'+(window.location.hostname)+'/email" onclick="sr_note_box_set_cookie(90,0,1)" target="_blank">Subscribe to our newsletter</a> &bull; <a href="javascript:sr_note_box_set_cookie()">Hide This</a></p>\
    ';
    }

    var div_after = document.getElementById('inner_nav')  || document.getElementById('srcom');

    if (!div_after) { return false; }
    vjs_insertAfter(note_box, div_after);
    vjs_addClass(note_box, 'open');
    setTimeout(function(){ vjs_addClass(note_box, 'alert'); }, 2000);

    sr_record_analytics_event('note_box_show-social',document.location.hostname, sr_record_directory());
}

function sr_note_box_show() {
    console.log('###  sr_note_box_show()');

    var sportregex = /(^[^\s]+)/g;
    var sport = sportregex.exec(document.body.className)[0];
    if (sport === 'stathead' || sport === 'fb') { return false; }

    if (document.lang != 'en') {return false;}

    var sport_texts = {
        br : "Baseball",
        bbr : "Basketball",
        pfr : "Pro Football",
        hr : "Hockey",
        cbb : "College Basketball",
        cfb : "College Football",
        sr : 'Sports',
    };

    var sport_forms = {
        br : "fed1d666-0c08-47ad-a630-98a55512861c",
        bbr : "d84fbf7e-d395-49c6-a64a-2ddaf9a1ab7f",
        pfr : "a4af36f0-eb4e-41fa-a97f-5f35a80b0c44",
        hr : "f283333c-e259-48f0-96e0-15bd344135fd",
        cbb : "8d46fcbe-04b4-4710-9804-c5781bed3a28",
        cfb : "a7ec16f0-83d4-4897-8202-a72ee9c7ba13",
        fb  : "76f967c3-cdb0-4f34-97e9-8bcfe6bf0e53",
    };

    var sport_title = sport_texts[sport];
    var sport_form = sport_forms[sport];

    var randNum = Math.random();

    if (randNum > 0.5 && sport != 'fb'){
        // 50% chance to show to social media cta rather than the newsletter
        sr_note_box_show_social_media(sport, sport_title);
        return true;

    }
    // build the dom for the note_box.

    var note_box = document.createElement('DIV');

    note_box.id = 'newsletter_cta';
    vjs_addClass(note_box,'sr_note_box');


    if (sport === 'fb') { 
        note_box.innerHTML = '	<div role="button" aria-label="close" class="closer" onclick="sr_note_box_set_cookie()"></div>\
        <img src="https://cdn.ssref.net/req/202204281/logos/'+(sport)+'-logo.svg" alt="Stathead.com Logo">\
        <span>- NEWSLETTER -</span>\
        <p class="cta">Get 2022 Men\'s World Cup news, advanced stats, leaderboards and more to your inbox!</p>\
        <p class="links"><a href="https://'+(window.location.hostname)+'/email" onclick="sr_note_box_set_cookie(90,0,1)" target="_blank">Find out More</a> &bull; <a href="javascript:sr_note_box_set_cookie()">Hide This</a></p>\
    ';
    }
    else{
        note_box.innerHTML = '	<div role="button" aria-label="close" class="closer" onclick="sr_note_box_set_cookie()"></div>\
        <img src="https://cdn.ssref.net/req/202204281/logos/'+(sport)+'-logo.svg" alt="Stathead.com Logo">\
        <span>- NEWSLETTER -</span>\
        <p class="cta">Subscribe to our newsletter and get curated stats and recaps from '+(sport_title)+' Reference in your inbox!</p>\
        <p class="links"><a href="https://'+(window.location.hostname)+'/email" onclick="sr_note_box_set_cookie(90,0,1)" target="_blank">Find out More</a> &bull; <a href="javascript:sr_note_box_set_cookie()">Hide This</a></p>\
    ';
    }
    // include hubspot lib files
    var script_ext  = document.createElement('script');
    script_ext.src  = "//js.hsforms.net/forms/v2.js";
    script_ext.type = 'text/javascript';

    var script_form  = document.createElement('script');
    script_form.type = 'text/javascript';
    // put the note_box into the page
    var div_after = document.getElementById('inner_nav')  || document.getElementById('srcom');

    if (!div_after) { return false; }
    vjs_insertAfter(note_box, div_after);
    vjs_addClass(note_box, 'open');

    script_form.innerHTML = 'hbspt.forms.create({\
         region: "na1",\
         portalId: "20503178",\
         formId: "'+(sport_form)+'"\
    });\
    ';
    // add js to call hubspot API
    setTimeout(function(){ note_box.appendChild(script_ext);  }, 1000);
    setTimeout(function(){ note_box.appendChild(script_form);  }, 2000);

    setTimeout(function(){ vjs_addClass(note_box, 'alert'); }, 2000);

    setTimeout(  function(){
        // wait for hubspot to return form html before adding listener to set cookie if user signs up
        var frame = document.getElementById('hs-form-iframe-0');
        var iWindow = frame.contentWindow;
        var iDocument = iWindow.document;

        var theform = iDocument.getElementById('hsForm_'+sport_form);

        vjs_addEvent(theform, 'submit', function () { sr_note_box_set_cookie(365, true); });


    },   7000);

    sr_record_analytics_event('note_box_show-email',document.location.hostname, sr_record_directory());
    return true;

}

function sr_note_box_check_display() {
    console.log('###  sr_note_box_check_display()');

    // we do not show this for languages other than 'en', so we just return here in those cases.
    if (Modernizr.lang !== 'en') {
	console.log('###  sr_note_box_check_display() skip since not english.');
	return false;
    }


    if (window.location.host.includes('d.')) {
    // if (false) {
	// test
	sr_note_box_show();
	return true;
    }
    else {
//return false;

    }

    // We are in business and might show a note_box here.
    // we don't need this as we are constructing the note_box in place.
    // var note_box = document.querySelector('.sr_note_box');
    // if (!note_box) { return false; }

    // run through all of the cases where we don't want to show a note_box
    // make sure that we don't have a suppression cookie and also aren't a logged in user.
    if (window.location.host.includes('stathead')
	|| window.location.host.includes('user')
	|| window.location.host.includes('ozzie')
	|| window.location.host.includes('otto')
	|| window.location.host.includes('widgets')
	|| vjs_readCookie(sr_note_box_cookie)
	|| vjs_readCookie('SR_user')) {
	console.log('We are not showing a box here');
	return false;
    }


    // see if we have a countdown cookie.
    var cd_cookie = vjs_readCookie(sr_note_box_countdown_cookie);

    // if the cookie has value zero we have exhausted it and just move on.
    if (cd_cookie === '0') {

    }
    // check the cookie # modulo our show every
    else if ((parseInt(cd_cookie) % sr_note_box_show_every) === 0) {
	// decrement the counter and then show the note box.
	vjs_createCookie(sr_note_box_countdown_cookie, parseInt(cd_cookie) - 1, 30);
	sr_note_box_show();

    }
    // if we have a positive value just decrement and return.
    else if (parseInt(cd_cookie)) {
	// decrement the counter and then return.
	vjs_createCookie(sr_note_box_countdown_cookie, parseInt(cd_cookie) - 1, 30);
    }
    // no cookie is set, so start the process.
    else {
	vjs_createCookie(sr_note_box_countdown_cookie, sr_note_box_countdown_num, 30);
    }

    return false;
}

function sr_note_box_set_cookie(term_days, keep_form, is_positive_response) {
    term_days = term_days || 60;
    vjs_createCookie(sr_note_box_cookie,true, term_days);
    var note_box = document.querySelector('.sr_note_box');
    if (note_box && !keep_form) { vjs_removeChild(note_box); }
    // add some analytics to see if user hides the box here.
    if (is_positive_response) {
	sr_record_analytics_event('note_box_accept',document.location.hostname, sr_record_directory());
    }
    else {
	sr_record_analytics_event('note_box_hide',document.location.hostname, sr_record_directory());
    }

}
sr_utilities_js_loader.push(sr_note_box_check_display);

/* ### FILE:sr.mod.jsFire.js    */
// handle sr debugging or if we have a new version pushed.
var is_sr_debugging = sr_debugging();

// We set this at the header, but need to attach it to the body after body has been setup.
if (document && document.body) {
    document.body.lang = document.lang || '';
}

function sr_fire_js() {

    /* mark if the user is on stathead. for gating the code for stathead  */
    // if we aren't sure if we are is_stathead, do a quick check
    // here. This can't move to modernizr because we don't
    // document.body available when that runs.
    if (!Modernizr.is_stathead) {
        if (document.body.classList.contains('stathead')) {
            sr_html.classList.add('is_stathead');
            Modernizr.is_stathead = true;
            console.log('### On stathead server');
        }
    }

    log_performance && sr_perf_logPerformance('entering jsFire');

    // if debugging or if we have a new version pushed we restart here.
    if (is_sr_debugging || is_new_jscss_version) {
        console.log("### clearing session and local storage");
        sessionStorage.clear();
        localStorage.clear();
        window.sessionStorage['sr_jscss_version'] = sr_jscss_version;
    }

    // Check if we have a new js/css version,
    if (Modernizr.sessionstorage) {
        is_new_jscss_version = !(sr_jscss_version === window.sessionStorage['sr_jscss_version']);
        window.sessionStorage['sr_jscss_version'] = sr_jscss_version;
        console.log("   ### checking jscss version:" + sr_jscss_version + ' // ' + (is_new_jscss_version ? 'New Version' : 'Same Version'));
    }

    if (is_sr_debugging) {
        sr_logger.enableLogger();
        console.log('   ### Enabling console.log');
        console.log("   ### sr_debugger: clearing sessionStorage, localStorage, and cookies");
        vjs_clearCookies();
        console.log('   ### resetting the nav and search autocomplete locations');
        // generate a 10char random string
        sr_dropmenu_url = sr_dropmenu_url.replace('/short/', '/nocdn/');
        //sr_dropmenu_url
        log_performance = true;
        log_performance && sr_perf_logPerformance('starting js');
    }

	// do a couple special things for fbref.
	if (sr_SITE_ABB === 'fb') {
		// For fbref we want the url in the browser to match the canonical.
		sr_utils_match_url_to_canonical();
		if ( document.querySelector('body.front_page')) {
				fb_front_setupPlayerRoster();
				fb_front_country_choice();
		}
	}
    
    // the general idea here is to work from the top of the page down
    // to the bottom, so users don't see these happening.
    sr_display_fill_search_placeholder();

    if (Modernizr.desktop || Modernizr.laptop) { sr_menus_checkInfoCookie('desktop'); } else { sr_menus_checkInfoCookie('mobile'); }


    // set the player age on the player pages.
    sr_utilities_person_age();
    log_performance && sr_perf_logPerformance('person age');

    // update any schedule items relating to the localtime.
    sr_utilities_compute_localtime();
    log_performance && sr_perf_logPerformance('local time');

    // set up the three menu systems on the page.
    // 1. lede area of the page
    // 2. overall site nav  #main_nav
    // 3. #inner_nav for the page-related nav.
    sr_menus_setupMenus();
    sr_form_setup_goto_page();
    log_performance && sr_perf_logPerformance('setup menus all');


    // Show the user is logged in if appropriate.
    if (Modernizr.cookies) { 
        sr_auth_login();
        log_performance && sr_perf_logPerformance('setup sr auth all');
    }

    // We can drop the use of smooth-scrolling polyfill on safari because it
    // became supported in safari in March of 2022
    
    // handle all of the openers on the pages.
    sr_menus_setSwitchers();
    sr_menus_setOpeners();
    log_performance && sr_perf_logPerformance('toggleDiv');


    // show the stats divs that are commented out, this goes before
    // the below because we want to show the tables by default on the
    // desktop and we need to add those to the dom before we can do
    // things like add the sorting and row summing handlers on those
    // tables.
    sr_cc_setup_commented_divs();
    sr_cc_setup_long_divs();
    // run this second time, but we mark those we've found before.
    sr_menus_setSwitchers();
    log_performance && sr_perf_logPerformance('sr_cc_setup_commented_divs');


    // set up link tracking on the front page of the site and any page on stathead
    sr_record_page_link_clicks();


    // setup the stats_table features available on load.
    var stats_tables = document.querySelectorAll('.stats_table');
    var sr_RANDID = 0;
    sr_statsTables_rowSum_init();

    vjs_forEach.call(stats_tables, function(stats_table, i) {
        var id = stats_table.id;

        // By default we add id's to tables that don't have them so we
        // can clone them and make them mobile-friendly, however we
        // don't want to do this for some of the tables.  linescores
        // are one such type.
        if (!vjs_hasClass(stats_table, 'linescore') && (id.length === 0)) {
            id = 'st_' + sr_RANDID++;
            stats_table.id = id;
        }

        if (stats_table.id) {
            sr_st_construct_stats_table_features(id, true);
        }
    });

    // wrap .wikitable's in divs.
    var wiki_tables = document.querySelectorAll('.wikitable');
    vjs_forEach.call(wiki_tables, function(wiki_table, i) {
        console.log('   ### wrap wikitable');
        // wrap our table in a new div.
        vjs_wrapInElementOfType(wiki_table, 'div', '', 'wikitable_wrapper');
    });

    var data_grids = document.querySelectorAll('.data_grid');
    vjs_forEach.call(data_grids, function(data_grid, i) {
        var id = data_grid.id;
        sr_st_construct_data_grid_features(id, true);
    });

    // use the hash value to presort hash tables if needed.
    sr_sorttable.useDocHashValue();

    ///////////////////////////////////////////////////////////////////////////
    // FORMS WORK, sr.form.js
    ///////////////////////////////////////////////////////////////////////////
    sr_form_setupForms();


    ///////////////////////////////////////////////////////////////////////////    
    // exclude various calls for touchscreens.
    ///////////////////////////////////////////////////////////////////////////    
    if (Modernizr && (!Modernizr.touch || Modernizr.desktop || Modernizr.laptop)) {
        // set up tooltips on the page.
        sr_display_tooltipShow();
        sr_display_modalShow();
        log_performance && sr_perf_logPerformance('tooltipShow');
    }

    // set up our svn. This file should be cached past the first
    // request.
    sr_display_flyInSVGsprite();

    // for conversion of inflation adjusted dollars .
    sr_form_cpi_init();
    log_performance && sr_perf_logPerformance('cpi_init   ');

    if (!sr_detect_operaMini && Modernizr.sessionstorage) {

        // Run the autocomplete script on this site.
        // these config files are set up by assets/js/site_build_js.pl
        // and apper in sr-top.js
        let c;
        if (completely_config) {
            console.log('   ### building auto_complete_instances');
            c = sr_setup_autocomplete_instances('.completely', completely_config);
        }
    }


    // handle the menu frozen at the top of the page.
    // this must go after setupMenus.
    freezer_div = sr_get_freezer_div();
    sr_menus_enable_freeze();
    log_performance && sr_perf_logPerformance('enableFreezeBar');

    log_performance && sr_perf_logPerformance('search_ac_autocomplete   ');

    // lazy load all of the later load items we've stored in teh
    // page. note that the array is initially set up in modernizr.js
    sr_utilities_js_load();
    log_performance && sr_perf_logPerformance('js_load   ');
    sr_utilities_set_server_cookie();
    log_performance && sr_perf_logPerformance('sr_server_cookie_set');

    // print out the performance log.
    log_performance && sr_perf_appendLog();

    // strip the widescreen formatting if body has class of widescreen
    if (vjs_hasClass(document.body, 'widescreen')) {
        sr_st_reduceFormatting();
    }
	
}

/* *********************************************************************
   # Usage       :   sr_utils_match_url_to_canonical
   # Purpose     :   makes sure that the url we show to the world matches our canonical value
   # Returns     :   nothing, but updates the url via replaceState
   # Parameters  :   none
   # Throws      : 
   # See Also    :

   # Comments :   
 
   ********************************************************************** */
function sr_utils_match_url_to_canonical() {
    console.log('    ### sr_utils_match_url_to_canonical');

    // we use this only in a couple of specific cases relating to fbref.com
    if (!Modernizr.history
	|| !window.location.host.match(/fbref.com/)
	|| window.location.href.match(/srdev/)
	|| window.location.href.match(/players-who/)
	|| !window.location.pathname.match(/(squads|players|comps)/)
       ) {
        console.log('    ### sr_utils_match_url_to_canonical: not checking due to Modernizr.history or path or domain or srdev');
        return false;
    }
    console.log('    ### sr_utils_match_url_to_canonical: checking urls');

    var sr_url = document.URL;
    var sr_canonical = document.querySelector("link[rel='canonical']").href;
    var hash = location.hash;
    // don't forward for the server's error pages

    if (sr_canonical.vjs_isMatch(/\/[45]0[0-9].html/) || sr_url.vjs_isMatch(/\/players2/)) {
        return false;
    }

    sr_canonical = sr_canonical.replace(/.*fbref.com/g, '');
    sr_url = sr_url.replace(/.*fbref.com/g, '');

    if (sr_url && sr_canonical && sr_url !== sr_canonical && !sr_url.includes('sr_debugger')) {
        //console.log('canonical:'.concat(sr_canonical));
        //console.log('url:'.concat(sr_url));
        window.history.replaceState("object or string", "title", sr_canonical + hash);
    }
}
